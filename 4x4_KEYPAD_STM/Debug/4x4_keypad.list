
4x4_keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ecc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001054  08001054  00002054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001094  08001094  00003060  2**0
                  CONTENTS
  4 .ARM          00000000  08001094  08001094  00003060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001094  08001094  00003060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001094  08001094  00002094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001098  08001098  00002098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800109c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00003060  2**0
                  CONTENTS
 10 .bss          0000016c  20000060  20000060  00003060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001cc  200001cc  00003060  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00003060  2**0
                  CONTENTS, READONLY
 13 .debug_info   000012f9  00000000  00000000  0000308a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000570  00000000  00000000  00004383  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000048f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f8  00000000  00000000  00004a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019fea  00000000  00000000  00004b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001cce  00000000  00000000  0001eb4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008d9e7  00000000  00000000  00020818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ae1ff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000a8c  00000000  00000000  000ae244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000052  00000000  00000000  000aecef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800103c 	.word	0x0800103c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	0800103c 	.word	0x0800103c

080001c8 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <__io_putchar+0x44>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a0d      	ldr	r2, [pc, #52]	@ (800020c <__io_putchar+0x44>)
 80001d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80001da:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80001dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000210 <__io_putchar+0x48>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0b      	ldr	r2, [pc, #44]	@ (8000210 <__io_putchar+0x48>)
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80001e8:	bf00      	nop
 80001ea:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0301 	and.w	r3, r3, #1
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d0f8      	beq.n	80001ea <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80001f8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	6013      	str	r3, [r2, #0]

	return 1;
 8000200:	2301      	movs	r3, #1
}
 8000202:	4618      	mov	r0, r3
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	e000edfc 	.word	0xe000edfc
 8000210:	e0000e00 	.word	0xe0000e00

08000214 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 8000214:	b480      	push	{r7}
 8000216:	b085      	sub	sp, #20
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 800021c:	4b0e      	ldr	r3, [pc, #56]	@ (8000258 <DelayMs+0x44>)
 800021e:	685b      	ldr	r3, [r3, #4]
 8000220:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <DelayMs+0x48>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	4a0e      	ldr	r2, [pc, #56]	@ (8000260 <DelayMs+0x4c>)
 8000228:	fba2 2303 	umull	r2, r3, r2, r3
 800022c:	099b      	lsrs	r3, r3, #6
 800022e:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	68ba      	ldr	r2, [r7, #8]
 8000234:	fb02 f303 	mul.w	r3, r2, r3
 8000238:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800023a:	bf00      	nop
 800023c:	4b06      	ldr	r3, [pc, #24]	@ (8000258 <DelayMs+0x44>)
 800023e:	685a      	ldr	r2, [r3, #4]
 8000240:	68fb      	ldr	r3, [r7, #12]
 8000242:	1ad2      	subs	r2, r2, r3
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	429a      	cmp	r2, r3
 8000248:	d3f8      	bcc.n	800023c <DelayMs+0x28>
}
 800024a:	bf00      	nop
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
 8000256:	bf00      	nop
 8000258:	e0001000 	.word	0xe0001000
 800025c:	20000000 	.word	0x20000000
 8000260:	10624dd3 	.word	0x10624dd3

08000264 <main>:
#include <stdio.h>
#include "stm32f4xx.h"
#include "system_stm32f4xx.h"
#include "keypad.h"
int main(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	SystemInit();
 8000268:	f000 f9e0 	bl	800062c <SystemInit>

	// Enable the GPIOD clock
	RCC->AHB1ENR |= BV(KEYPD_GPIO_EN);
 800026c:	4b8d      	ldr	r3, [pc, #564]	@ (80004a4 <main+0x240>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000270:	4a8c      	ldr	r2, [pc, #560]	@ (80004a4 <main+0x240>)
 8000272:	f043 0308 	orr.w	r3, r3, #8
 8000276:	6313      	str	r3, [r2, #48]	@ 0x30

	// Configure row pins as OUPUT
	KEYPD_GPIO->MODER |= BV((KEYPD_R1 * 2) | (KEYPD_R2 * 2) | (KEYPD_R3 * 2) | (KEYPD_R4 * 2));
 8000278:	4b8b      	ldr	r3, [pc, #556]	@ (80004a8 <main+0x244>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a8a      	ldr	r2, [pc, #552]	@ (80004a8 <main+0x244>)
 800027e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000282:	6013      	str	r3, [r2, #0]
	KEYPD_GPIO->MODER &= ~BV((KEYPD_R1 * 2 + 1) | (KEYPD_R2 * 2 + 1) | (KEYPD_R3 * 2 + 1) | (KEYPD_R4 * 2 + 1));
 8000284:	4b88      	ldr	r3, [pc, #544]	@ (80004a8 <main+0x244>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a87      	ldr	r2, [pc, #540]	@ (80004a8 <main+0x244>)
 800028a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800028e:	6013      	str	r3, [r2, #0]

	// Configure column pins as INPUT
	KEYPD_GPIO->MODER &= ~BV((KEYPD_C1 * 2) | (KEYPD_C2 * 2) | (KEYPD_C3 * 2) | (KEYPD_C4 * 2));
 8000290:	4b85      	ldr	r3, [pc, #532]	@ (80004a8 <main+0x244>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	4a84      	ldr	r2, [pc, #528]	@ (80004a8 <main+0x244>)
 8000296:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800029a:	6013      	str	r3, [r2, #0]
	KEYPD_GPIO->MODER &= ~BV((KEYPD_C1 * 2 + 1) | (KEYPD_C2 * 2 + 1) | (KEYPD_C3 * 2 + 1) | (KEYPD_C4 * 2 + 1));
 800029c:	4b82      	ldr	r3, [pc, #520]	@ (80004a8 <main+0x244>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	4a81      	ldr	r2, [pc, #516]	@ (80004a8 <main+0x244>)
 80002a2:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80002a6:	6013      	str	r3, [r2, #0]

	// Configuring column lines with PULL-UP resistor.
	KEYPD_GPIO->PUPDR |= BV((KEYPD_C1 * 2) | (KEYPD_C2 * 2) | (KEYPD_C3 * 2) | (KEYPD_C4 * 2));
 80002a8:	4b7f      	ldr	r3, [pc, #508]	@ (80004a8 <main+0x244>)
 80002aa:	68db      	ldr	r3, [r3, #12]
 80002ac:	4a7e      	ldr	r2, [pc, #504]	@ (80004a8 <main+0x244>)
 80002ae:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80002b2:	60d3      	str	r3, [r2, #12]
	KEYPD_GPIO->PUPDR &= ~BV((KEYPD_C1 * 2 + 1) | (KEYPD_C2 * 2 + 1) | (KEYPD_C3 * 2 + 1) | (KEYPD_C4 * 2 + 1));
 80002b4:	4b7c      	ldr	r3, [pc, #496]	@ (80004a8 <main+0x244>)
 80002b6:	68db      	ldr	r3, [r3, #12]
 80002b8:	4a7b      	ldr	r2, [pc, #492]	@ (80004a8 <main+0x244>)
 80002ba:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80002be:	60d3      	str	r3, [r2, #12]

	while(1)
	{
		// Configuring all rows as high
		// KEYPD_GPIO->ODR |= BV((KEYPD_R1) | (KEYPD_R2) | (KEYPD_R3) | (KEYPD_R4));
		KEYPD_GPIO->ODR |= 0X0f;
 80002c0:	4b79      	ldr	r3, [pc, #484]	@ (80004a8 <main+0x244>)
 80002c2:	695b      	ldr	r3, [r3, #20]
 80002c4:	4a78      	ldr	r2, [pc, #480]	@ (80004a8 <main+0x244>)
 80002c6:	f043 030f 	orr.w	r3, r3, #15
 80002ca:	6153      	str	r3, [r2, #20]

		// configure R1 as low
		KEYPD_GPIO->ODR &= ~(1 << 0);
 80002cc:	4b76      	ldr	r3, [pc, #472]	@ (80004a8 <main+0x244>)
 80002ce:	695b      	ldr	r3, [r3, #20]
 80002d0:	4a75      	ldr	r2, [pc, #468]	@ (80004a8 <main+0x244>)
 80002d2:	f023 0301 	bic.w	r3, r3, #1
 80002d6:	6153      	str	r3, [r2, #20]

		// checking from C1 too C4
		//	if (!(KEYPD_GPIO->IDR & BV(KEYPD_C1)))
		if(!(KEYPD_GPIO->IDR & BV(KEYPD_C1)))
 80002d8:	4b73      	ldr	r3, [pc, #460]	@ (80004a8 <main+0x244>)
 80002da:	691b      	ldr	r3, [r3, #16]
 80002dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002e0:	2b00      	cmp	r3, #0
 80002e2:	d105      	bne.n	80002f0 <main+0x8c>
		{
			DelayMs(200);
 80002e4:	20c8      	movs	r0, #200	@ 0xc8
 80002e6:	f7ff ff95 	bl	8000214 <DelayMs>
			printf("1\n");
 80002ea:	4870      	ldr	r0, [pc, #448]	@ (80004ac <main+0x248>)
 80002ec:	f000 fb16 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C2)))
 80002f0:	4b6d      	ldr	r3, [pc, #436]	@ (80004a8 <main+0x244>)
 80002f2:	691b      	ldr	r3, [r3, #16]
 80002f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d105      	bne.n	8000308 <main+0xa4>
		{
			DelayMs(200);
 80002fc:	20c8      	movs	r0, #200	@ 0xc8
 80002fe:	f7ff ff89 	bl	8000214 <DelayMs>
			printf("2\n");
 8000302:	486b      	ldr	r0, [pc, #428]	@ (80004b0 <main+0x24c>)
 8000304:	f000 fb0a 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C3)))
 8000308:	4b67      	ldr	r3, [pc, #412]	@ (80004a8 <main+0x244>)
 800030a:	691b      	ldr	r3, [r3, #16]
 800030c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000310:	2b00      	cmp	r3, #0
 8000312:	d105      	bne.n	8000320 <main+0xbc>
		{
			DelayMs(200);
 8000314:	20c8      	movs	r0, #200	@ 0xc8
 8000316:	f7ff ff7d 	bl	8000214 <DelayMs>
			printf("3\n");
 800031a:	4866      	ldr	r0, [pc, #408]	@ (80004b4 <main+0x250>)
 800031c:	f000 fafe 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C4)))
 8000320:	4b61      	ldr	r3, [pc, #388]	@ (80004a8 <main+0x244>)
 8000322:	691b      	ldr	r3, [r3, #16]
 8000324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000328:	2b00      	cmp	r3, #0
 800032a:	d105      	bne.n	8000338 <main+0xd4>
		{
			DelayMs(200);
 800032c:	20c8      	movs	r0, #200	@ 0xc8
 800032e:	f7ff ff71 	bl	8000214 <DelayMs>
			printf("A\n");
 8000332:	4861      	ldr	r0, [pc, #388]	@ (80004b8 <main+0x254>)
 8000334:	f000 faf2 	bl	800091c <puts>
		}

		// Configuring all rows as high
		//	KEYPD_GPIO->ODR |= BV((KEYPD_R1) | (KEYPD_R2) | (KEYPD_R3) | (KEYPD_R4));
		KEYPD_GPIO->ODR |= 0X0f;
 8000338:	4b5b      	ldr	r3, [pc, #364]	@ (80004a8 <main+0x244>)
 800033a:	695b      	ldr	r3, [r3, #20]
 800033c:	4a5a      	ldr	r2, [pc, #360]	@ (80004a8 <main+0x244>)
 800033e:	f043 030f 	orr.w	r3, r3, #15
 8000342:	6153      	str	r3, [r2, #20]

		// configure R2 as low
		KEYPD_GPIO->ODR &= ~(1 << 1);
 8000344:	4b58      	ldr	r3, [pc, #352]	@ (80004a8 <main+0x244>)
 8000346:	695b      	ldr	r3, [r3, #20]
 8000348:	4a57      	ldr	r2, [pc, #348]	@ (80004a8 <main+0x244>)
 800034a:	f023 0302 	bic.w	r3, r3, #2
 800034e:	6153      	str	r3, [r2, #20]
		//KEYPD_GPIO->ODR &= ~BV(KEYPD_R2);

		// checking from C1 too C4
		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C1)))
 8000350:	4b55      	ldr	r3, [pc, #340]	@ (80004a8 <main+0x244>)
 8000352:	691b      	ldr	r3, [r3, #16]
 8000354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000358:	2b00      	cmp	r3, #0
 800035a:	d105      	bne.n	8000368 <main+0x104>
		{
			DelayMs(200);
 800035c:	20c8      	movs	r0, #200	@ 0xc8
 800035e:	f7ff ff59 	bl	8000214 <DelayMs>
			printf("4\n");
 8000362:	4856      	ldr	r0, [pc, #344]	@ (80004bc <main+0x258>)
 8000364:	f000 fada 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C2)))
 8000368:	4b4f      	ldr	r3, [pc, #316]	@ (80004a8 <main+0x244>)
 800036a:	691b      	ldr	r3, [r3, #16]
 800036c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000370:	2b00      	cmp	r3, #0
 8000372:	d105      	bne.n	8000380 <main+0x11c>
		{
			DelayMs(200);
 8000374:	20c8      	movs	r0, #200	@ 0xc8
 8000376:	f7ff ff4d 	bl	8000214 <DelayMs>
			printf("5\n");
 800037a:	4851      	ldr	r0, [pc, #324]	@ (80004c0 <main+0x25c>)
 800037c:	f000 face 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C3)))
 8000380:	4b49      	ldr	r3, [pc, #292]	@ (80004a8 <main+0x244>)
 8000382:	691b      	ldr	r3, [r3, #16]
 8000384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000388:	2b00      	cmp	r3, #0
 800038a:	d105      	bne.n	8000398 <main+0x134>
		{
			DelayMs(200);
 800038c:	20c8      	movs	r0, #200	@ 0xc8
 800038e:	f7ff ff41 	bl	8000214 <DelayMs>
			printf("6\n");
 8000392:	484c      	ldr	r0, [pc, #304]	@ (80004c4 <main+0x260>)
 8000394:	f000 fac2 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C4)))
 8000398:	4b43      	ldr	r3, [pc, #268]	@ (80004a8 <main+0x244>)
 800039a:	691b      	ldr	r3, [r3, #16]
 800039c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d105      	bne.n	80003b0 <main+0x14c>
		{
			DelayMs(200);
 80003a4:	20c8      	movs	r0, #200	@ 0xc8
 80003a6:	f7ff ff35 	bl	8000214 <DelayMs>
			printf("B\n");
 80003aa:	4847      	ldr	r0, [pc, #284]	@ (80004c8 <main+0x264>)
 80003ac:	f000 fab6 	bl	800091c <puts>
		}

		// Configuring all rows as high
		//	KEYPD_GPIO->ODR |= BV((KEYPD_R1) | (KEYPD_R2) | (KEYPD_R3) | (KEYPD_R4));
		KEYPD_GPIO->ODR |= 0X0f;
 80003b0:	4b3d      	ldr	r3, [pc, #244]	@ (80004a8 <main+0x244>)
 80003b2:	695b      	ldr	r3, [r3, #20]
 80003b4:	4a3c      	ldr	r2, [pc, #240]	@ (80004a8 <main+0x244>)
 80003b6:	f043 030f 	orr.w	r3, r3, #15
 80003ba:	6153      	str	r3, [r2, #20]

		// configure R3 as low
		KEYPD_GPIO->ODR &= ~(1 << 2);
 80003bc:	4b3a      	ldr	r3, [pc, #232]	@ (80004a8 <main+0x244>)
 80003be:	695b      	ldr	r3, [r3, #20]
 80003c0:	4a39      	ldr	r2, [pc, #228]	@ (80004a8 <main+0x244>)
 80003c2:	f023 0304 	bic.w	r3, r3, #4
 80003c6:	6153      	str	r3, [r2, #20]
		//KEYPD_GPIO->ODR &= ~BV(KEYPD_R3);

		// checking from C1 too C4
		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C1)))
 80003c8:	4b37      	ldr	r3, [pc, #220]	@ (80004a8 <main+0x244>)
 80003ca:	691b      	ldr	r3, [r3, #16]
 80003cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d105      	bne.n	80003e0 <main+0x17c>
		{
			DelayMs(200);
 80003d4:	20c8      	movs	r0, #200	@ 0xc8
 80003d6:	f7ff ff1d 	bl	8000214 <DelayMs>
			printf("7\n");
 80003da:	483c      	ldr	r0, [pc, #240]	@ (80004cc <main+0x268>)
 80003dc:	f000 fa9e 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C2)))
 80003e0:	4b31      	ldr	r3, [pc, #196]	@ (80004a8 <main+0x244>)
 80003e2:	691b      	ldr	r3, [r3, #16]
 80003e4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d105      	bne.n	80003f8 <main+0x194>
		{
			DelayMs(200);
 80003ec:	20c8      	movs	r0, #200	@ 0xc8
 80003ee:	f7ff ff11 	bl	8000214 <DelayMs>
			printf("8\n");
 80003f2:	4837      	ldr	r0, [pc, #220]	@ (80004d0 <main+0x26c>)
 80003f4:	f000 fa92 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C3)))
 80003f8:	4b2b      	ldr	r3, [pc, #172]	@ (80004a8 <main+0x244>)
 80003fa:	691b      	ldr	r3, [r3, #16]
 80003fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000400:	2b00      	cmp	r3, #0
 8000402:	d105      	bne.n	8000410 <main+0x1ac>
		{
			DelayMs(200);
 8000404:	20c8      	movs	r0, #200	@ 0xc8
 8000406:	f7ff ff05 	bl	8000214 <DelayMs>
			printf("9\n");
 800040a:	4832      	ldr	r0, [pc, #200]	@ (80004d4 <main+0x270>)
 800040c:	f000 fa86 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C4)))
 8000410:	4b25      	ldr	r3, [pc, #148]	@ (80004a8 <main+0x244>)
 8000412:	691b      	ldr	r3, [r3, #16]
 8000414:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000418:	2b00      	cmp	r3, #0
 800041a:	d105      	bne.n	8000428 <main+0x1c4>
		{
			DelayMs(200);
 800041c:	20c8      	movs	r0, #200	@ 0xc8
 800041e:	f7ff fef9 	bl	8000214 <DelayMs>
			printf("C\n");
 8000422:	482d      	ldr	r0, [pc, #180]	@ (80004d8 <main+0x274>)
 8000424:	f000 fa7a 	bl	800091c <puts>
		}

		// Configuring all rows as high
		//	KEYPD_GPIO->ODR |= BV((KEYPD_R1) | (KEYPD_R2) | (KEYPD_R3) | (KEYPD_R4));
		KEYPD_GPIO->ODR |= 0X0f;
 8000428:	4b1f      	ldr	r3, [pc, #124]	@ (80004a8 <main+0x244>)
 800042a:	695b      	ldr	r3, [r3, #20]
 800042c:	4a1e      	ldr	r2, [pc, #120]	@ (80004a8 <main+0x244>)
 800042e:	f043 030f 	orr.w	r3, r3, #15
 8000432:	6153      	str	r3, [r2, #20]

		// configure R4 as low
		KEYPD_GPIO->ODR &= ~(1 << 3);
 8000434:	4b1c      	ldr	r3, [pc, #112]	@ (80004a8 <main+0x244>)
 8000436:	695b      	ldr	r3, [r3, #20]
 8000438:	4a1b      	ldr	r2, [pc, #108]	@ (80004a8 <main+0x244>)
 800043a:	f023 0308 	bic.w	r3, r3, #8
 800043e:	6153      	str	r3, [r2, #20]
		//KEYPD_GPIO->ODR &= ~BV(KEYPD_R2);

		// checking from C1 too C4
		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C1)))
 8000440:	4b19      	ldr	r3, [pc, #100]	@ (80004a8 <main+0x244>)
 8000442:	691b      	ldr	r3, [r3, #16]
 8000444:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000448:	2b00      	cmp	r3, #0
 800044a:	d105      	bne.n	8000458 <main+0x1f4>
		{
			DelayMs(200);
 800044c:	20c8      	movs	r0, #200	@ 0xc8
 800044e:	f7ff fee1 	bl	8000214 <DelayMs>
			printf("*\n");
 8000452:	4822      	ldr	r0, [pc, #136]	@ (80004dc <main+0x278>)
 8000454:	f000 fa62 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C2)))
 8000458:	4b13      	ldr	r3, [pc, #76]	@ (80004a8 <main+0x244>)
 800045a:	691b      	ldr	r3, [r3, #16]
 800045c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000460:	2b00      	cmp	r3, #0
 8000462:	d105      	bne.n	8000470 <main+0x20c>
		{
			DelayMs(200);
 8000464:	20c8      	movs	r0, #200	@ 0xc8
 8000466:	f7ff fed5 	bl	8000214 <DelayMs>
			printf("0\n");
 800046a:	481d      	ldr	r0, [pc, #116]	@ (80004e0 <main+0x27c>)
 800046c:	f000 fa56 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C3)))
 8000470:	4b0d      	ldr	r3, [pc, #52]	@ (80004a8 <main+0x244>)
 8000472:	691b      	ldr	r3, [r3, #16]
 8000474:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000478:	2b00      	cmp	r3, #0
 800047a:	d105      	bne.n	8000488 <main+0x224>
		{
			DelayMs(200);
 800047c:	20c8      	movs	r0, #200	@ 0xc8
 800047e:	f7ff fec9 	bl	8000214 <DelayMs>
			printf("#\n");
 8000482:	4818      	ldr	r0, [pc, #96]	@ (80004e4 <main+0x280>)
 8000484:	f000 fa4a 	bl	800091c <puts>
		}

		if (!(KEYPD_GPIO->IDR & BV(KEYPD_C4)))
 8000488:	4b07      	ldr	r3, [pc, #28]	@ (80004a8 <main+0x244>)
 800048a:	691b      	ldr	r3, [r3, #16]
 800048c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000490:	2b00      	cmp	r3, #0
 8000492:	f47f af15 	bne.w	80002c0 <main+0x5c>
		{
			DelayMs(200);
 8000496:	20c8      	movs	r0, #200	@ 0xc8
 8000498:	f7ff febc 	bl	8000214 <DelayMs>
			printf("D\n");
 800049c:	4812      	ldr	r0, [pc, #72]	@ (80004e8 <main+0x284>)
 800049e:	f000 fa3d 	bl	800091c <puts>
		KEYPD_GPIO->ODR |= 0X0f;
 80004a2:	e70d      	b.n	80002c0 <main+0x5c>
 80004a4:	40023800 	.word	0x40023800
 80004a8:	40020c00 	.word	0x40020c00
 80004ac:	08001054 	.word	0x08001054
 80004b0:	08001058 	.word	0x08001058
 80004b4:	0800105c 	.word	0x0800105c
 80004b8:	08001060 	.word	0x08001060
 80004bc:	08001064 	.word	0x08001064
 80004c0:	08001068 	.word	0x08001068
 80004c4:	0800106c 	.word	0x0800106c
 80004c8:	08001070 	.word	0x08001070
 80004cc:	08001074 	.word	0x08001074
 80004d0:	08001078 	.word	0x08001078
 80004d4:	0800107c 	.word	0x0800107c
 80004d8:	08001080 	.word	0x08001080
 80004dc:	08001084 	.word	0x08001084
 80004e0:	08001088 	.word	0x08001088
 80004e4:	0800108c 	.word	0x0800108c
 80004e8:	08001090 	.word	0x08001090

080004ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b086      	sub	sp, #24
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	60f8      	str	r0, [r7, #12]
 80004f4:	60b9      	str	r1, [r7, #8]
 80004f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e00a      	b.n	8000514 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80004fe:	f3af 8000 	nop.w
 8000502:	4601      	mov	r1, r0
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	1c5a      	adds	r2, r3, #1
 8000508:	60ba      	str	r2, [r7, #8]
 800050a:	b2ca      	uxtb	r2, r1
 800050c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050e:	697b      	ldr	r3, [r7, #20]
 8000510:	3301      	adds	r3, #1
 8000512:	617b      	str	r3, [r7, #20]
 8000514:	697a      	ldr	r2, [r7, #20]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	429a      	cmp	r2, r3
 800051a:	dbf0      	blt.n	80004fe <_read+0x12>
	}

return len;
 800051c:	687b      	ldr	r3, [r7, #4]
}
 800051e:	4618      	mov	r0, r3
 8000520:	3718      	adds	r7, #24
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}

08000526 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000526:	b580      	push	{r7, lr}
 8000528:	b086      	sub	sp, #24
 800052a:	af00      	add	r7, sp, #0
 800052c:	60f8      	str	r0, [r7, #12]
 800052e:	60b9      	str	r1, [r7, #8]
 8000530:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000532:	2300      	movs	r3, #0
 8000534:	617b      	str	r3, [r7, #20]
 8000536:	e009      	b.n	800054c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	60ba      	str	r2, [r7, #8]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4618      	mov	r0, r3
 8000542:	f7ff fe41 	bl	80001c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	3301      	adds	r3, #1
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697a      	ldr	r2, [r7, #20]
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	429a      	cmp	r2, r3
 8000552:	dbf1      	blt.n	8000538 <_write+0x12>
	}
	return len;
 8000554:	687b      	ldr	r3, [r7, #4]
}
 8000556:	4618      	mov	r0, r3
 8000558:	3718      	adds	r7, #24
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}

0800055e <_close>:

int _close(int file)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
	return -1;
 8000566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800056a:	4618      	mov	r0, r3
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bc80      	pop	{r7}
 8000572:	4770      	bx	lr

08000574 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
 800057c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000584:	605a      	str	r2, [r3, #4]
	return 0;
 8000586:	2300      	movs	r3, #0
}
 8000588:	4618      	mov	r0, r3
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	bc80      	pop	{r7}
 8000590:	4770      	bx	lr

08000592 <_isatty>:

int _isatty(int file)
{
 8000592:	b480      	push	{r7}
 8000594:	b083      	sub	sp, #12
 8000596:	af00      	add	r7, sp, #0
 8000598:	6078      	str	r0, [r7, #4]
	return 1;
 800059a:	2301      	movs	r3, #1
}
 800059c:	4618      	mov	r0, r3
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bc80      	pop	{r7}
 80005a4:	4770      	bx	lr

080005a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005a6:	b480      	push	{r7}
 80005a8:	b085      	sub	sp, #20
 80005aa:	af00      	add	r7, sp, #0
 80005ac:	60f8      	str	r0, [r7, #12]
 80005ae:	60b9      	str	r1, [r7, #8]
 80005b0:	607a      	str	r2, [r7, #4]
	return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bc80      	pop	{r7}
 80005bc:	4770      	bx	lr
	...

080005c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b086      	sub	sp, #24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005c8:	4a14      	ldr	r2, [pc, #80]	@ (800061c <_sbrk+0x5c>)
 80005ca:	4b15      	ldr	r3, [pc, #84]	@ (8000620 <_sbrk+0x60>)
 80005cc:	1ad3      	subs	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005d4:	4b13      	ldr	r3, [pc, #76]	@ (8000624 <_sbrk+0x64>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d102      	bne.n	80005e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005dc:	4b11      	ldr	r3, [pc, #68]	@ (8000624 <_sbrk+0x64>)
 80005de:	4a12      	ldr	r2, [pc, #72]	@ (8000628 <_sbrk+0x68>)
 80005e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <_sbrk+0x64>)
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	4413      	add	r3, r2
 80005ea:	693a      	ldr	r2, [r7, #16]
 80005ec:	429a      	cmp	r2, r3
 80005ee:	d207      	bcs.n	8000600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005f0:	f000 fac2 	bl	8000b78 <__errno>
 80005f4:	4603      	mov	r3, r0
 80005f6:	220c      	movs	r2, #12
 80005f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005fe:	e009      	b.n	8000614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <_sbrk+0x64>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000606:	4b07      	ldr	r3, [pc, #28]	@ (8000624 <_sbrk+0x64>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	4a05      	ldr	r2, [pc, #20]	@ (8000624 <_sbrk+0x64>)
 8000610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000612:	68fb      	ldr	r3, [r7, #12]
}
 8000614:	4618      	mov	r0, r3
 8000616:	3718      	adds	r7, #24
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	20020000 	.word	0x20020000
 8000620:	00000400 	.word	0x00000400
 8000624:	2000007c 	.word	0x2000007c
 8000628:	200001d0 	.word	0x200001d0

0800062c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  DWT_Init();
 8000630:	f000 f802 	bl	8000638 <DWT_Init>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}

08000638 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 800063c:	4b14      	ldr	r3, [pc, #80]	@ (8000690 <DWT_Init+0x58>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	4a13      	ldr	r2, [pc, #76]	@ (8000690 <DWT_Init+0x58>)
 8000642:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8000646:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000648:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <DWT_Init+0x58>)
 800064a:	68db      	ldr	r3, [r3, #12]
 800064c:	4a10      	ldr	r2, [pc, #64]	@ (8000690 <DWT_Init+0x58>)
 800064e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000652:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000654:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <DWT_Init+0x5c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0e      	ldr	r2, [pc, #56]	@ (8000694 <DWT_Init+0x5c>)
 800065a:	f023 0301 	bic.w	r3, r3, #1
 800065e:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000660:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <DWT_Init+0x5c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <DWT_Init+0x5c>)
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 800066c:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <DWT_Init+0x5c>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 8000672:	bf00      	nop
    __ASM volatile ("NOP");
 8000674:	bf00      	nop
    __ASM volatile ("NOP");
 8000676:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000678:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <DWT_Init+0x5c>)
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	2b00      	cmp	r3, #0
 800067e:	bf0c      	ite	eq
 8000680:	2301      	moveq	r3, #1
 8000682:	2300      	movne	r3, #0
 8000684:	b2db      	uxtb	r3, r3
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	e000edf0 	.word	0xe000edf0
 8000694:	e0001000 	.word	0xe0001000

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	@ (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f7ff ffc6 	bl	800062c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	@ (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	@ (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	@ (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	@ (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f000 fa5d 	bl	8000b84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff fdcb 	bl	8000264 <main>

080006ce <LoopForever>:

LoopForever:
  b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80006dc:	0800109c 	.word	0x0800109c
  ldr r2, =_sbss
 80006e0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80006e4:	200001cc 	.word	0x200001cc

080006e8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC_IRQHandler>
	...

080006ec <std>:
 80006ec:	2300      	movs	r3, #0
 80006ee:	b510      	push	{r4, lr}
 80006f0:	4604      	mov	r4, r0
 80006f2:	e9c0 3300 	strd	r3, r3, [r0]
 80006f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006fa:	6083      	str	r3, [r0, #8]
 80006fc:	8181      	strh	r1, [r0, #12]
 80006fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8000700:	81c2      	strh	r2, [r0, #14]
 8000702:	6183      	str	r3, [r0, #24]
 8000704:	4619      	mov	r1, r3
 8000706:	2208      	movs	r2, #8
 8000708:	305c      	adds	r0, #92	@ 0x5c
 800070a:	f000 f9e7 	bl	8000adc <memset>
 800070e:	4b0d      	ldr	r3, [pc, #52]	@ (8000744 <std+0x58>)
 8000710:	6263      	str	r3, [r4, #36]	@ 0x24
 8000712:	4b0d      	ldr	r3, [pc, #52]	@ (8000748 <std+0x5c>)
 8000714:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000716:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <std+0x60>)
 8000718:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800071a:	4b0d      	ldr	r3, [pc, #52]	@ (8000750 <std+0x64>)
 800071c:	6323      	str	r3, [r4, #48]	@ 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	@ (8000754 <std+0x68>)
 8000720:	6224      	str	r4, [r4, #32]
 8000722:	429c      	cmp	r4, r3
 8000724:	d006      	beq.n	8000734 <std+0x48>
 8000726:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800072a:	4294      	cmp	r4, r2
 800072c:	d002      	beq.n	8000734 <std+0x48>
 800072e:	33d0      	adds	r3, #208	@ 0xd0
 8000730:	429c      	cmp	r4, r3
 8000732:	d105      	bne.n	8000740 <std+0x54>
 8000734:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073c:	f000 ba46 	b.w	8000bcc <__retarget_lock_init_recursive>
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	0800092d 	.word	0x0800092d
 8000748:	0800094f 	.word	0x0800094f
 800074c:	08000987 	.word	0x08000987
 8000750:	080009ab 	.word	0x080009ab
 8000754:	20000080 	.word	0x20000080

08000758 <stdio_exit_handler>:
 8000758:	4a02      	ldr	r2, [pc, #8]	@ (8000764 <stdio_exit_handler+0xc>)
 800075a:	4903      	ldr	r1, [pc, #12]	@ (8000768 <stdio_exit_handler+0x10>)
 800075c:	4803      	ldr	r0, [pc, #12]	@ (800076c <stdio_exit_handler+0x14>)
 800075e:	f000 b869 	b.w	8000834 <_fwalk_sglue>
 8000762:	bf00      	nop
 8000764:	20000004 	.word	0x20000004
 8000768:	08000ec5 	.word	0x08000ec5
 800076c:	20000014 	.word	0x20000014

08000770 <cleanup_stdio>:
 8000770:	6841      	ldr	r1, [r0, #4]
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <cleanup_stdio+0x34>)
 8000774:	4299      	cmp	r1, r3
 8000776:	b510      	push	{r4, lr}
 8000778:	4604      	mov	r4, r0
 800077a:	d001      	beq.n	8000780 <cleanup_stdio+0x10>
 800077c:	f000 fba2 	bl	8000ec4 <_fflush_r>
 8000780:	68a1      	ldr	r1, [r4, #8]
 8000782:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <cleanup_stdio+0x38>)
 8000784:	4299      	cmp	r1, r3
 8000786:	d002      	beq.n	800078e <cleanup_stdio+0x1e>
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fb9b 	bl	8000ec4 <_fflush_r>
 800078e:	68e1      	ldr	r1, [r4, #12]
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <cleanup_stdio+0x3c>)
 8000792:	4299      	cmp	r1, r3
 8000794:	d004      	beq.n	80007a0 <cleanup_stdio+0x30>
 8000796:	4620      	mov	r0, r4
 8000798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079c:	f000 bb92 	b.w	8000ec4 <_fflush_r>
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	bf00      	nop
 80007a4:	20000080 	.word	0x20000080
 80007a8:	200000e8 	.word	0x200000e8
 80007ac:	20000150 	.word	0x20000150

080007b0 <global_stdio_init.part.0>:
 80007b0:	b510      	push	{r4, lr}
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <global_stdio_init.part.0+0x30>)
 80007b4:	4c0b      	ldr	r4, [pc, #44]	@ (80007e4 <global_stdio_init.part.0+0x34>)
 80007b6:	4a0c      	ldr	r2, [pc, #48]	@ (80007e8 <global_stdio_init.part.0+0x38>)
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	4620      	mov	r0, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	f7ff ff94 	bl	80006ec <std>
 80007c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80007c8:	2201      	movs	r2, #1
 80007ca:	2109      	movs	r1, #9
 80007cc:	f7ff ff8e 	bl	80006ec <std>
 80007d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80007d4:	2202      	movs	r2, #2
 80007d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007da:	2112      	movs	r1, #18
 80007dc:	f7ff bf86 	b.w	80006ec <std>
 80007e0:	200001b8 	.word	0x200001b8
 80007e4:	20000080 	.word	0x20000080
 80007e8:	08000759 	.word	0x08000759

080007ec <__sfp_lock_acquire>:
 80007ec:	4801      	ldr	r0, [pc, #4]	@ (80007f4 <__sfp_lock_acquire+0x8>)
 80007ee:	f000 b9ee 	b.w	8000bce <__retarget_lock_acquire_recursive>
 80007f2:	bf00      	nop
 80007f4:	200001c1 	.word	0x200001c1

080007f8 <__sfp_lock_release>:
 80007f8:	4801      	ldr	r0, [pc, #4]	@ (8000800 <__sfp_lock_release+0x8>)
 80007fa:	f000 b9e9 	b.w	8000bd0 <__retarget_lock_release_recursive>
 80007fe:	bf00      	nop
 8000800:	200001c1 	.word	0x200001c1

08000804 <__sinit>:
 8000804:	b510      	push	{r4, lr}
 8000806:	4604      	mov	r4, r0
 8000808:	f7ff fff0 	bl	80007ec <__sfp_lock_acquire>
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	b11b      	cbz	r3, 8000818 <__sinit+0x14>
 8000810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000814:	f7ff bff0 	b.w	80007f8 <__sfp_lock_release>
 8000818:	4b04      	ldr	r3, [pc, #16]	@ (800082c <__sinit+0x28>)
 800081a:	6223      	str	r3, [r4, #32]
 800081c:	4b04      	ldr	r3, [pc, #16]	@ (8000830 <__sinit+0x2c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f5      	bne.n	8000810 <__sinit+0xc>
 8000824:	f7ff ffc4 	bl	80007b0 <global_stdio_init.part.0>
 8000828:	e7f2      	b.n	8000810 <__sinit+0xc>
 800082a:	bf00      	nop
 800082c:	08000771 	.word	0x08000771
 8000830:	200001b8 	.word	0x200001b8

08000834 <_fwalk_sglue>:
 8000834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000838:	4607      	mov	r7, r0
 800083a:	4688      	mov	r8, r1
 800083c:	4614      	mov	r4, r2
 800083e:	2600      	movs	r6, #0
 8000840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000844:	f1b9 0901 	subs.w	r9, r9, #1
 8000848:	d505      	bpl.n	8000856 <_fwalk_sglue+0x22>
 800084a:	6824      	ldr	r4, [r4, #0]
 800084c:	2c00      	cmp	r4, #0
 800084e:	d1f7      	bne.n	8000840 <_fwalk_sglue+0xc>
 8000850:	4630      	mov	r0, r6
 8000852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000856:	89ab      	ldrh	r3, [r5, #12]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d907      	bls.n	800086c <_fwalk_sglue+0x38>
 800085c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000860:	3301      	adds	r3, #1
 8000862:	d003      	beq.n	800086c <_fwalk_sglue+0x38>
 8000864:	4629      	mov	r1, r5
 8000866:	4638      	mov	r0, r7
 8000868:	47c0      	blx	r8
 800086a:	4306      	orrs	r6, r0
 800086c:	3568      	adds	r5, #104	@ 0x68
 800086e:	e7e9      	b.n	8000844 <_fwalk_sglue+0x10>

08000870 <_puts_r>:
 8000870:	6a03      	ldr	r3, [r0, #32]
 8000872:	b570      	push	{r4, r5, r6, lr}
 8000874:	6884      	ldr	r4, [r0, #8]
 8000876:	4605      	mov	r5, r0
 8000878:	460e      	mov	r6, r1
 800087a:	b90b      	cbnz	r3, 8000880 <_puts_r+0x10>
 800087c:	f7ff ffc2 	bl	8000804 <__sinit>
 8000880:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000882:	07db      	lsls	r3, r3, #31
 8000884:	d405      	bmi.n	8000892 <_puts_r+0x22>
 8000886:	89a3      	ldrh	r3, [r4, #12]
 8000888:	0598      	lsls	r0, r3, #22
 800088a:	d402      	bmi.n	8000892 <_puts_r+0x22>
 800088c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800088e:	f000 f99e 	bl	8000bce <__retarget_lock_acquire_recursive>
 8000892:	89a3      	ldrh	r3, [r4, #12]
 8000894:	0719      	lsls	r1, r3, #28
 8000896:	d502      	bpl.n	800089e <_puts_r+0x2e>
 8000898:	6923      	ldr	r3, [r4, #16]
 800089a:	2b00      	cmp	r3, #0
 800089c:	d135      	bne.n	800090a <_puts_r+0x9a>
 800089e:	4621      	mov	r1, r4
 80008a0:	4628      	mov	r0, r5
 80008a2:	f000 f8c5 	bl	8000a30 <__swsetup_r>
 80008a6:	b380      	cbz	r0, 800090a <_puts_r+0x9a>
 80008a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80008ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80008ae:	07da      	lsls	r2, r3, #31
 80008b0:	d405      	bmi.n	80008be <_puts_r+0x4e>
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	059b      	lsls	r3, r3, #22
 80008b6:	d402      	bmi.n	80008be <_puts_r+0x4e>
 80008b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80008ba:	f000 f989 	bl	8000bd0 <__retarget_lock_release_recursive>
 80008be:	4628      	mov	r0, r5
 80008c0:	bd70      	pop	{r4, r5, r6, pc}
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	da04      	bge.n	80008d0 <_puts_r+0x60>
 80008c6:	69a2      	ldr	r2, [r4, #24]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	dc17      	bgt.n	80008fc <_puts_r+0x8c>
 80008cc:	290a      	cmp	r1, #10
 80008ce:	d015      	beq.n	80008fc <_puts_r+0x8c>
 80008d0:	6823      	ldr	r3, [r4, #0]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	6022      	str	r2, [r4, #0]
 80008d6:	7019      	strb	r1, [r3, #0]
 80008d8:	68a3      	ldr	r3, [r4, #8]
 80008da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80008de:	3b01      	subs	r3, #1
 80008e0:	60a3      	str	r3, [r4, #8]
 80008e2:	2900      	cmp	r1, #0
 80008e4:	d1ed      	bne.n	80008c2 <_puts_r+0x52>
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	da11      	bge.n	800090e <_puts_r+0x9e>
 80008ea:	4622      	mov	r2, r4
 80008ec:	210a      	movs	r1, #10
 80008ee:	4628      	mov	r0, r5
 80008f0:	f000 f85f 	bl	80009b2 <__swbuf_r>
 80008f4:	3001      	adds	r0, #1
 80008f6:	d0d7      	beq.n	80008a8 <_puts_r+0x38>
 80008f8:	250a      	movs	r5, #10
 80008fa:	e7d7      	b.n	80008ac <_puts_r+0x3c>
 80008fc:	4622      	mov	r2, r4
 80008fe:	4628      	mov	r0, r5
 8000900:	f000 f857 	bl	80009b2 <__swbuf_r>
 8000904:	3001      	adds	r0, #1
 8000906:	d1e7      	bne.n	80008d8 <_puts_r+0x68>
 8000908:	e7ce      	b.n	80008a8 <_puts_r+0x38>
 800090a:	3e01      	subs	r6, #1
 800090c:	e7e4      	b.n	80008d8 <_puts_r+0x68>
 800090e:	6823      	ldr	r3, [r4, #0]
 8000910:	1c5a      	adds	r2, r3, #1
 8000912:	6022      	str	r2, [r4, #0]
 8000914:	220a      	movs	r2, #10
 8000916:	701a      	strb	r2, [r3, #0]
 8000918:	e7ee      	b.n	80008f8 <_puts_r+0x88>
	...

0800091c <puts>:
 800091c:	4b02      	ldr	r3, [pc, #8]	@ (8000928 <puts+0xc>)
 800091e:	4601      	mov	r1, r0
 8000920:	6818      	ldr	r0, [r3, #0]
 8000922:	f7ff bfa5 	b.w	8000870 <_puts_r>
 8000926:	bf00      	nop
 8000928:	20000010 	.word	0x20000010

0800092c <__sread>:
 800092c:	b510      	push	{r4, lr}
 800092e:	460c      	mov	r4, r1
 8000930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000934:	f000 f8fc 	bl	8000b30 <_read_r>
 8000938:	2800      	cmp	r0, #0
 800093a:	bfab      	itete	ge
 800093c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800093e:	89a3      	ldrhlt	r3, [r4, #12]
 8000940:	181b      	addge	r3, r3, r0
 8000942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000946:	bfac      	ite	ge
 8000948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800094a:	81a3      	strhlt	r3, [r4, #12]
 800094c:	bd10      	pop	{r4, pc}

0800094e <__swrite>:
 800094e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000952:	461f      	mov	r7, r3
 8000954:	898b      	ldrh	r3, [r1, #12]
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	4605      	mov	r5, r0
 800095a:	460c      	mov	r4, r1
 800095c:	4616      	mov	r6, r2
 800095e:	d505      	bpl.n	800096c <__swrite+0x1e>
 8000960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000964:	2302      	movs	r3, #2
 8000966:	2200      	movs	r2, #0
 8000968:	f000 f8d0 	bl	8000b0c <_lseek_r>
 800096c:	89a3      	ldrh	r3, [r4, #12]
 800096e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000976:	81a3      	strh	r3, [r4, #12]
 8000978:	4632      	mov	r2, r6
 800097a:	463b      	mov	r3, r7
 800097c:	4628      	mov	r0, r5
 800097e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000982:	f000 b8e7 	b.w	8000b54 <_write_r>

08000986 <__sseek>:
 8000986:	b510      	push	{r4, lr}
 8000988:	460c      	mov	r4, r1
 800098a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800098e:	f000 f8bd 	bl	8000b0c <_lseek_r>
 8000992:	1c43      	adds	r3, r0, #1
 8000994:	89a3      	ldrh	r3, [r4, #12]
 8000996:	bf15      	itete	ne
 8000998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800099a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800099e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80009a2:	81a3      	strheq	r3, [r4, #12]
 80009a4:	bf18      	it	ne
 80009a6:	81a3      	strhne	r3, [r4, #12]
 80009a8:	bd10      	pop	{r4, pc}

080009aa <__sclose>:
 80009aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009ae:	f000 b89d 	b.w	8000aec <_close_r>

080009b2 <__swbuf_r>:
 80009b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80009b4:	460e      	mov	r6, r1
 80009b6:	4614      	mov	r4, r2
 80009b8:	4605      	mov	r5, r0
 80009ba:	b118      	cbz	r0, 80009c4 <__swbuf_r+0x12>
 80009bc:	6a03      	ldr	r3, [r0, #32]
 80009be:	b90b      	cbnz	r3, 80009c4 <__swbuf_r+0x12>
 80009c0:	f7ff ff20 	bl	8000804 <__sinit>
 80009c4:	69a3      	ldr	r3, [r4, #24]
 80009c6:	60a3      	str	r3, [r4, #8]
 80009c8:	89a3      	ldrh	r3, [r4, #12]
 80009ca:	071a      	lsls	r2, r3, #28
 80009cc:	d501      	bpl.n	80009d2 <__swbuf_r+0x20>
 80009ce:	6923      	ldr	r3, [r4, #16]
 80009d0:	b943      	cbnz	r3, 80009e4 <__swbuf_r+0x32>
 80009d2:	4621      	mov	r1, r4
 80009d4:	4628      	mov	r0, r5
 80009d6:	f000 f82b 	bl	8000a30 <__swsetup_r>
 80009da:	b118      	cbz	r0, 80009e4 <__swbuf_r+0x32>
 80009dc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80009e0:	4638      	mov	r0, r7
 80009e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009e4:	6823      	ldr	r3, [r4, #0]
 80009e6:	6922      	ldr	r2, [r4, #16]
 80009e8:	1a98      	subs	r0, r3, r2
 80009ea:	6963      	ldr	r3, [r4, #20]
 80009ec:	b2f6      	uxtb	r6, r6
 80009ee:	4283      	cmp	r3, r0
 80009f0:	4637      	mov	r7, r6
 80009f2:	dc05      	bgt.n	8000a00 <__swbuf_r+0x4e>
 80009f4:	4621      	mov	r1, r4
 80009f6:	4628      	mov	r0, r5
 80009f8:	f000 fa64 	bl	8000ec4 <_fflush_r>
 80009fc:	2800      	cmp	r0, #0
 80009fe:	d1ed      	bne.n	80009dc <__swbuf_r+0x2a>
 8000a00:	68a3      	ldr	r3, [r4, #8]
 8000a02:	3b01      	subs	r3, #1
 8000a04:	60a3      	str	r3, [r4, #8]
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	1c5a      	adds	r2, r3, #1
 8000a0a:	6022      	str	r2, [r4, #0]
 8000a0c:	701e      	strb	r6, [r3, #0]
 8000a0e:	6962      	ldr	r2, [r4, #20]
 8000a10:	1c43      	adds	r3, r0, #1
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d004      	beq.n	8000a20 <__swbuf_r+0x6e>
 8000a16:	89a3      	ldrh	r3, [r4, #12]
 8000a18:	07db      	lsls	r3, r3, #31
 8000a1a:	d5e1      	bpl.n	80009e0 <__swbuf_r+0x2e>
 8000a1c:	2e0a      	cmp	r6, #10
 8000a1e:	d1df      	bne.n	80009e0 <__swbuf_r+0x2e>
 8000a20:	4621      	mov	r1, r4
 8000a22:	4628      	mov	r0, r5
 8000a24:	f000 fa4e 	bl	8000ec4 <_fflush_r>
 8000a28:	2800      	cmp	r0, #0
 8000a2a:	d0d9      	beq.n	80009e0 <__swbuf_r+0x2e>
 8000a2c:	e7d6      	b.n	80009dc <__swbuf_r+0x2a>
	...

08000a30 <__swsetup_r>:
 8000a30:	b538      	push	{r3, r4, r5, lr}
 8000a32:	4b29      	ldr	r3, [pc, #164]	@ (8000ad8 <__swsetup_r+0xa8>)
 8000a34:	4605      	mov	r5, r0
 8000a36:	6818      	ldr	r0, [r3, #0]
 8000a38:	460c      	mov	r4, r1
 8000a3a:	b118      	cbz	r0, 8000a44 <__swsetup_r+0x14>
 8000a3c:	6a03      	ldr	r3, [r0, #32]
 8000a3e:	b90b      	cbnz	r3, 8000a44 <__swsetup_r+0x14>
 8000a40:	f7ff fee0 	bl	8000804 <__sinit>
 8000a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a48:	0719      	lsls	r1, r3, #28
 8000a4a:	d422      	bmi.n	8000a92 <__swsetup_r+0x62>
 8000a4c:	06da      	lsls	r2, r3, #27
 8000a4e:	d407      	bmi.n	8000a60 <__swsetup_r+0x30>
 8000a50:	2209      	movs	r2, #9
 8000a52:	602a      	str	r2, [r5, #0]
 8000a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a58:	81a3      	strh	r3, [r4, #12]
 8000a5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a5e:	e033      	b.n	8000ac8 <__swsetup_r+0x98>
 8000a60:	0758      	lsls	r0, r3, #29
 8000a62:	d512      	bpl.n	8000a8a <__swsetup_r+0x5a>
 8000a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a66:	b141      	cbz	r1, 8000a7a <__swsetup_r+0x4a>
 8000a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a6c:	4299      	cmp	r1, r3
 8000a6e:	d002      	beq.n	8000a76 <__swsetup_r+0x46>
 8000a70:	4628      	mov	r0, r5
 8000a72:	f000 f8af 	bl	8000bd4 <_free_r>
 8000a76:	2300      	movs	r3, #0
 8000a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a7a:	89a3      	ldrh	r3, [r4, #12]
 8000a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a80:	81a3      	strh	r3, [r4, #12]
 8000a82:	2300      	movs	r3, #0
 8000a84:	6063      	str	r3, [r4, #4]
 8000a86:	6923      	ldr	r3, [r4, #16]
 8000a88:	6023      	str	r3, [r4, #0]
 8000a8a:	89a3      	ldrh	r3, [r4, #12]
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	81a3      	strh	r3, [r4, #12]
 8000a92:	6923      	ldr	r3, [r4, #16]
 8000a94:	b94b      	cbnz	r3, 8000aaa <__swsetup_r+0x7a>
 8000a96:	89a3      	ldrh	r3, [r4, #12]
 8000a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000aa0:	d003      	beq.n	8000aaa <__swsetup_r+0x7a>
 8000aa2:	4621      	mov	r1, r4
 8000aa4:	4628      	mov	r0, r5
 8000aa6:	f000 fa5b 	bl	8000f60 <__smakebuf_r>
 8000aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000aae:	f013 0201 	ands.w	r2, r3, #1
 8000ab2:	d00a      	beq.n	8000aca <__swsetup_r+0x9a>
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	60a2      	str	r2, [r4, #8]
 8000ab8:	6962      	ldr	r2, [r4, #20]
 8000aba:	4252      	negs	r2, r2
 8000abc:	61a2      	str	r2, [r4, #24]
 8000abe:	6922      	ldr	r2, [r4, #16]
 8000ac0:	b942      	cbnz	r2, 8000ad4 <__swsetup_r+0xa4>
 8000ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000ac6:	d1c5      	bne.n	8000a54 <__swsetup_r+0x24>
 8000ac8:	bd38      	pop	{r3, r4, r5, pc}
 8000aca:	0799      	lsls	r1, r3, #30
 8000acc:	bf58      	it	pl
 8000ace:	6962      	ldrpl	r2, [r4, #20]
 8000ad0:	60a2      	str	r2, [r4, #8]
 8000ad2:	e7f4      	b.n	8000abe <__swsetup_r+0x8e>
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	e7f7      	b.n	8000ac8 <__swsetup_r+0x98>
 8000ad8:	20000010 	.word	0x20000010

08000adc <memset>:
 8000adc:	4402      	add	r2, r0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d100      	bne.n	8000ae6 <memset+0xa>
 8000ae4:	4770      	bx	lr
 8000ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8000aea:	e7f9      	b.n	8000ae0 <memset+0x4>

08000aec <_close_r>:
 8000aec:	b538      	push	{r3, r4, r5, lr}
 8000aee:	4d06      	ldr	r5, [pc, #24]	@ (8000b08 <_close_r+0x1c>)
 8000af0:	2300      	movs	r3, #0
 8000af2:	4604      	mov	r4, r0
 8000af4:	4608      	mov	r0, r1
 8000af6:	602b      	str	r3, [r5, #0]
 8000af8:	f7ff fd31 	bl	800055e <_close>
 8000afc:	1c43      	adds	r3, r0, #1
 8000afe:	d102      	bne.n	8000b06 <_close_r+0x1a>
 8000b00:	682b      	ldr	r3, [r5, #0]
 8000b02:	b103      	cbz	r3, 8000b06 <_close_r+0x1a>
 8000b04:	6023      	str	r3, [r4, #0]
 8000b06:	bd38      	pop	{r3, r4, r5, pc}
 8000b08:	200001bc 	.word	0x200001bc

08000b0c <_lseek_r>:
 8000b0c:	b538      	push	{r3, r4, r5, lr}
 8000b0e:	4d07      	ldr	r5, [pc, #28]	@ (8000b2c <_lseek_r+0x20>)
 8000b10:	4604      	mov	r4, r0
 8000b12:	4608      	mov	r0, r1
 8000b14:	4611      	mov	r1, r2
 8000b16:	2200      	movs	r2, #0
 8000b18:	602a      	str	r2, [r5, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	f7ff fd43 	bl	80005a6 <_lseek>
 8000b20:	1c43      	adds	r3, r0, #1
 8000b22:	d102      	bne.n	8000b2a <_lseek_r+0x1e>
 8000b24:	682b      	ldr	r3, [r5, #0]
 8000b26:	b103      	cbz	r3, 8000b2a <_lseek_r+0x1e>
 8000b28:	6023      	str	r3, [r4, #0]
 8000b2a:	bd38      	pop	{r3, r4, r5, pc}
 8000b2c:	200001bc 	.word	0x200001bc

08000b30 <_read_r>:
 8000b30:	b538      	push	{r3, r4, r5, lr}
 8000b32:	4d07      	ldr	r5, [pc, #28]	@ (8000b50 <_read_r+0x20>)
 8000b34:	4604      	mov	r4, r0
 8000b36:	4608      	mov	r0, r1
 8000b38:	4611      	mov	r1, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	602a      	str	r2, [r5, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	f7ff fcd4 	bl	80004ec <_read>
 8000b44:	1c43      	adds	r3, r0, #1
 8000b46:	d102      	bne.n	8000b4e <_read_r+0x1e>
 8000b48:	682b      	ldr	r3, [r5, #0]
 8000b4a:	b103      	cbz	r3, 8000b4e <_read_r+0x1e>
 8000b4c:	6023      	str	r3, [r4, #0]
 8000b4e:	bd38      	pop	{r3, r4, r5, pc}
 8000b50:	200001bc 	.word	0x200001bc

08000b54 <_write_r>:
 8000b54:	b538      	push	{r3, r4, r5, lr}
 8000b56:	4d07      	ldr	r5, [pc, #28]	@ (8000b74 <_write_r+0x20>)
 8000b58:	4604      	mov	r4, r0
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	4611      	mov	r1, r2
 8000b5e:	2200      	movs	r2, #0
 8000b60:	602a      	str	r2, [r5, #0]
 8000b62:	461a      	mov	r2, r3
 8000b64:	f7ff fcdf 	bl	8000526 <_write>
 8000b68:	1c43      	adds	r3, r0, #1
 8000b6a:	d102      	bne.n	8000b72 <_write_r+0x1e>
 8000b6c:	682b      	ldr	r3, [r5, #0]
 8000b6e:	b103      	cbz	r3, 8000b72 <_write_r+0x1e>
 8000b70:	6023      	str	r3, [r4, #0]
 8000b72:	bd38      	pop	{r3, r4, r5, pc}
 8000b74:	200001bc 	.word	0x200001bc

08000b78 <__errno>:
 8000b78:	4b01      	ldr	r3, [pc, #4]	@ (8000b80 <__errno+0x8>)
 8000b7a:	6818      	ldr	r0, [r3, #0]
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000010 	.word	0x20000010

08000b84 <__libc_init_array>:
 8000b84:	b570      	push	{r4, r5, r6, lr}
 8000b86:	4d0d      	ldr	r5, [pc, #52]	@ (8000bbc <__libc_init_array+0x38>)
 8000b88:	4c0d      	ldr	r4, [pc, #52]	@ (8000bc0 <__libc_init_array+0x3c>)
 8000b8a:	1b64      	subs	r4, r4, r5
 8000b8c:	10a4      	asrs	r4, r4, #2
 8000b8e:	2600      	movs	r6, #0
 8000b90:	42a6      	cmp	r6, r4
 8000b92:	d109      	bne.n	8000ba8 <__libc_init_array+0x24>
 8000b94:	4d0b      	ldr	r5, [pc, #44]	@ (8000bc4 <__libc_init_array+0x40>)
 8000b96:	4c0c      	ldr	r4, [pc, #48]	@ (8000bc8 <__libc_init_array+0x44>)
 8000b98:	f000 fa50 	bl	800103c <_init>
 8000b9c:	1b64      	subs	r4, r4, r5
 8000b9e:	10a4      	asrs	r4, r4, #2
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	42a6      	cmp	r6, r4
 8000ba4:	d105      	bne.n	8000bb2 <__libc_init_array+0x2e>
 8000ba6:	bd70      	pop	{r4, r5, r6, pc}
 8000ba8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bac:	4798      	blx	r3
 8000bae:	3601      	adds	r6, #1
 8000bb0:	e7ee      	b.n	8000b90 <__libc_init_array+0xc>
 8000bb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bb6:	4798      	blx	r3
 8000bb8:	3601      	adds	r6, #1
 8000bba:	e7f2      	b.n	8000ba2 <__libc_init_array+0x1e>
 8000bbc:	08001094 	.word	0x08001094
 8000bc0:	08001094 	.word	0x08001094
 8000bc4:	08001094 	.word	0x08001094
 8000bc8:	08001098 	.word	0x08001098

08000bcc <__retarget_lock_init_recursive>:
 8000bcc:	4770      	bx	lr

08000bce <__retarget_lock_acquire_recursive>:
 8000bce:	4770      	bx	lr

08000bd0 <__retarget_lock_release_recursive>:
 8000bd0:	4770      	bx	lr
	...

08000bd4 <_free_r>:
 8000bd4:	b538      	push	{r3, r4, r5, lr}
 8000bd6:	4605      	mov	r5, r0
 8000bd8:	2900      	cmp	r1, #0
 8000bda:	d041      	beq.n	8000c60 <_free_r+0x8c>
 8000bdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000be0:	1f0c      	subs	r4, r1, #4
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	bfb8      	it	lt
 8000be6:	18e4      	addlt	r4, r4, r3
 8000be8:	f000 f8e0 	bl	8000dac <__malloc_lock>
 8000bec:	4a1d      	ldr	r2, [pc, #116]	@ (8000c64 <_free_r+0x90>)
 8000bee:	6813      	ldr	r3, [r2, #0]
 8000bf0:	b933      	cbnz	r3, 8000c00 <_free_r+0x2c>
 8000bf2:	6063      	str	r3, [r4, #4]
 8000bf4:	6014      	str	r4, [r2, #0]
 8000bf6:	4628      	mov	r0, r5
 8000bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bfc:	f000 b8dc 	b.w	8000db8 <__malloc_unlock>
 8000c00:	42a3      	cmp	r3, r4
 8000c02:	d908      	bls.n	8000c16 <_free_r+0x42>
 8000c04:	6820      	ldr	r0, [r4, #0]
 8000c06:	1821      	adds	r1, r4, r0
 8000c08:	428b      	cmp	r3, r1
 8000c0a:	bf01      	itttt	eq
 8000c0c:	6819      	ldreq	r1, [r3, #0]
 8000c0e:	685b      	ldreq	r3, [r3, #4]
 8000c10:	1809      	addeq	r1, r1, r0
 8000c12:	6021      	streq	r1, [r4, #0]
 8000c14:	e7ed      	b.n	8000bf2 <_free_r+0x1e>
 8000c16:	461a      	mov	r2, r3
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	b10b      	cbz	r3, 8000c20 <_free_r+0x4c>
 8000c1c:	42a3      	cmp	r3, r4
 8000c1e:	d9fa      	bls.n	8000c16 <_free_r+0x42>
 8000c20:	6811      	ldr	r1, [r2, #0]
 8000c22:	1850      	adds	r0, r2, r1
 8000c24:	42a0      	cmp	r0, r4
 8000c26:	d10b      	bne.n	8000c40 <_free_r+0x6c>
 8000c28:	6820      	ldr	r0, [r4, #0]
 8000c2a:	4401      	add	r1, r0
 8000c2c:	1850      	adds	r0, r2, r1
 8000c2e:	4283      	cmp	r3, r0
 8000c30:	6011      	str	r1, [r2, #0]
 8000c32:	d1e0      	bne.n	8000bf6 <_free_r+0x22>
 8000c34:	6818      	ldr	r0, [r3, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	6053      	str	r3, [r2, #4]
 8000c3a:	4408      	add	r0, r1
 8000c3c:	6010      	str	r0, [r2, #0]
 8000c3e:	e7da      	b.n	8000bf6 <_free_r+0x22>
 8000c40:	d902      	bls.n	8000c48 <_free_r+0x74>
 8000c42:	230c      	movs	r3, #12
 8000c44:	602b      	str	r3, [r5, #0]
 8000c46:	e7d6      	b.n	8000bf6 <_free_r+0x22>
 8000c48:	6820      	ldr	r0, [r4, #0]
 8000c4a:	1821      	adds	r1, r4, r0
 8000c4c:	428b      	cmp	r3, r1
 8000c4e:	bf04      	itt	eq
 8000c50:	6819      	ldreq	r1, [r3, #0]
 8000c52:	685b      	ldreq	r3, [r3, #4]
 8000c54:	6063      	str	r3, [r4, #4]
 8000c56:	bf04      	itt	eq
 8000c58:	1809      	addeq	r1, r1, r0
 8000c5a:	6021      	streq	r1, [r4, #0]
 8000c5c:	6054      	str	r4, [r2, #4]
 8000c5e:	e7ca      	b.n	8000bf6 <_free_r+0x22>
 8000c60:	bd38      	pop	{r3, r4, r5, pc}
 8000c62:	bf00      	nop
 8000c64:	200001c8 	.word	0x200001c8

08000c68 <sbrk_aligned>:
 8000c68:	b570      	push	{r4, r5, r6, lr}
 8000c6a:	4e0f      	ldr	r6, [pc, #60]	@ (8000ca8 <sbrk_aligned+0x40>)
 8000c6c:	460c      	mov	r4, r1
 8000c6e:	6831      	ldr	r1, [r6, #0]
 8000c70:	4605      	mov	r5, r0
 8000c72:	b911      	cbnz	r1, 8000c7a <sbrk_aligned+0x12>
 8000c74:	f000 f9d2 	bl	800101c <_sbrk_r>
 8000c78:	6030      	str	r0, [r6, #0]
 8000c7a:	4621      	mov	r1, r4
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f000 f9cd 	bl	800101c <_sbrk_r>
 8000c82:	1c43      	adds	r3, r0, #1
 8000c84:	d103      	bne.n	8000c8e <sbrk_aligned+0x26>
 8000c86:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	bd70      	pop	{r4, r5, r6, pc}
 8000c8e:	1cc4      	adds	r4, r0, #3
 8000c90:	f024 0403 	bic.w	r4, r4, #3
 8000c94:	42a0      	cmp	r0, r4
 8000c96:	d0f8      	beq.n	8000c8a <sbrk_aligned+0x22>
 8000c98:	1a21      	subs	r1, r4, r0
 8000c9a:	4628      	mov	r0, r5
 8000c9c:	f000 f9be 	bl	800101c <_sbrk_r>
 8000ca0:	3001      	adds	r0, #1
 8000ca2:	d1f2      	bne.n	8000c8a <sbrk_aligned+0x22>
 8000ca4:	e7ef      	b.n	8000c86 <sbrk_aligned+0x1e>
 8000ca6:	bf00      	nop
 8000ca8:	200001c4 	.word	0x200001c4

08000cac <_malloc_r>:
 8000cac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000cb0:	1ccd      	adds	r5, r1, #3
 8000cb2:	f025 0503 	bic.w	r5, r5, #3
 8000cb6:	3508      	adds	r5, #8
 8000cb8:	2d0c      	cmp	r5, #12
 8000cba:	bf38      	it	cc
 8000cbc:	250c      	movcc	r5, #12
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	4606      	mov	r6, r0
 8000cc2:	db01      	blt.n	8000cc8 <_malloc_r+0x1c>
 8000cc4:	42a9      	cmp	r1, r5
 8000cc6:	d904      	bls.n	8000cd2 <_malloc_r+0x26>
 8000cc8:	230c      	movs	r3, #12
 8000cca:	6033      	str	r3, [r6, #0]
 8000ccc:	2000      	movs	r0, #0
 8000cce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000da8 <_malloc_r+0xfc>
 8000cd6:	f000 f869 	bl	8000dac <__malloc_lock>
 8000cda:	f8d8 3000 	ldr.w	r3, [r8]
 8000cde:	461c      	mov	r4, r3
 8000ce0:	bb44      	cbnz	r4, 8000d34 <_malloc_r+0x88>
 8000ce2:	4629      	mov	r1, r5
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	f7ff ffbf 	bl	8000c68 <sbrk_aligned>
 8000cea:	1c43      	adds	r3, r0, #1
 8000cec:	4604      	mov	r4, r0
 8000cee:	d158      	bne.n	8000da2 <_malloc_r+0xf6>
 8000cf0:	f8d8 4000 	ldr.w	r4, [r8]
 8000cf4:	4627      	mov	r7, r4
 8000cf6:	2f00      	cmp	r7, #0
 8000cf8:	d143      	bne.n	8000d82 <_malloc_r+0xd6>
 8000cfa:	2c00      	cmp	r4, #0
 8000cfc:	d04b      	beq.n	8000d96 <_malloc_r+0xea>
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	4639      	mov	r1, r7
 8000d02:	4630      	mov	r0, r6
 8000d04:	eb04 0903 	add.w	r9, r4, r3
 8000d08:	f000 f988 	bl	800101c <_sbrk_r>
 8000d0c:	4581      	cmp	r9, r0
 8000d0e:	d142      	bne.n	8000d96 <_malloc_r+0xea>
 8000d10:	6821      	ldr	r1, [r4, #0]
 8000d12:	1a6d      	subs	r5, r5, r1
 8000d14:	4629      	mov	r1, r5
 8000d16:	4630      	mov	r0, r6
 8000d18:	f7ff ffa6 	bl	8000c68 <sbrk_aligned>
 8000d1c:	3001      	adds	r0, #1
 8000d1e:	d03a      	beq.n	8000d96 <_malloc_r+0xea>
 8000d20:	6823      	ldr	r3, [r4, #0]
 8000d22:	442b      	add	r3, r5
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	f8d8 3000 	ldr.w	r3, [r8]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	bb62      	cbnz	r2, 8000d88 <_malloc_r+0xdc>
 8000d2e:	f8c8 7000 	str.w	r7, [r8]
 8000d32:	e00f      	b.n	8000d54 <_malloc_r+0xa8>
 8000d34:	6822      	ldr	r2, [r4, #0]
 8000d36:	1b52      	subs	r2, r2, r5
 8000d38:	d420      	bmi.n	8000d7c <_malloc_r+0xd0>
 8000d3a:	2a0b      	cmp	r2, #11
 8000d3c:	d917      	bls.n	8000d6e <_malloc_r+0xc2>
 8000d3e:	1961      	adds	r1, r4, r5
 8000d40:	42a3      	cmp	r3, r4
 8000d42:	6025      	str	r5, [r4, #0]
 8000d44:	bf18      	it	ne
 8000d46:	6059      	strne	r1, [r3, #4]
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	bf08      	it	eq
 8000d4c:	f8c8 1000 	streq.w	r1, [r8]
 8000d50:	5162      	str	r2, [r4, r5]
 8000d52:	604b      	str	r3, [r1, #4]
 8000d54:	4630      	mov	r0, r6
 8000d56:	f000 f82f 	bl	8000db8 <__malloc_unlock>
 8000d5a:	f104 000b 	add.w	r0, r4, #11
 8000d5e:	1d23      	adds	r3, r4, #4
 8000d60:	f020 0007 	bic.w	r0, r0, #7
 8000d64:	1ac2      	subs	r2, r0, r3
 8000d66:	bf1c      	itt	ne
 8000d68:	1a1b      	subne	r3, r3, r0
 8000d6a:	50a3      	strne	r3, [r4, r2]
 8000d6c:	e7af      	b.n	8000cce <_malloc_r+0x22>
 8000d6e:	6862      	ldr	r2, [r4, #4]
 8000d70:	42a3      	cmp	r3, r4
 8000d72:	bf0c      	ite	eq
 8000d74:	f8c8 2000 	streq.w	r2, [r8]
 8000d78:	605a      	strne	r2, [r3, #4]
 8000d7a:	e7eb      	b.n	8000d54 <_malloc_r+0xa8>
 8000d7c:	4623      	mov	r3, r4
 8000d7e:	6864      	ldr	r4, [r4, #4]
 8000d80:	e7ae      	b.n	8000ce0 <_malloc_r+0x34>
 8000d82:	463c      	mov	r4, r7
 8000d84:	687f      	ldr	r7, [r7, #4]
 8000d86:	e7b6      	b.n	8000cf6 <_malloc_r+0x4a>
 8000d88:	461a      	mov	r2, r3
 8000d8a:	685b      	ldr	r3, [r3, #4]
 8000d8c:	42a3      	cmp	r3, r4
 8000d8e:	d1fb      	bne.n	8000d88 <_malloc_r+0xdc>
 8000d90:	2300      	movs	r3, #0
 8000d92:	6053      	str	r3, [r2, #4]
 8000d94:	e7de      	b.n	8000d54 <_malloc_r+0xa8>
 8000d96:	230c      	movs	r3, #12
 8000d98:	6033      	str	r3, [r6, #0]
 8000d9a:	4630      	mov	r0, r6
 8000d9c:	f000 f80c 	bl	8000db8 <__malloc_unlock>
 8000da0:	e794      	b.n	8000ccc <_malloc_r+0x20>
 8000da2:	6005      	str	r5, [r0, #0]
 8000da4:	e7d6      	b.n	8000d54 <_malloc_r+0xa8>
 8000da6:	bf00      	nop
 8000da8:	200001c8 	.word	0x200001c8

08000dac <__malloc_lock>:
 8000dac:	4801      	ldr	r0, [pc, #4]	@ (8000db4 <__malloc_lock+0x8>)
 8000dae:	f7ff bf0e 	b.w	8000bce <__retarget_lock_acquire_recursive>
 8000db2:	bf00      	nop
 8000db4:	200001c0 	.word	0x200001c0

08000db8 <__malloc_unlock>:
 8000db8:	4801      	ldr	r0, [pc, #4]	@ (8000dc0 <__malloc_unlock+0x8>)
 8000dba:	f7ff bf09 	b.w	8000bd0 <__retarget_lock_release_recursive>
 8000dbe:	bf00      	nop
 8000dc0:	200001c0 	.word	0x200001c0

08000dc4 <__sflush_r>:
 8000dc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dca:	0716      	lsls	r6, r2, #28
 8000dcc:	4605      	mov	r5, r0
 8000dce:	460c      	mov	r4, r1
 8000dd0:	d454      	bmi.n	8000e7c <__sflush_r+0xb8>
 8000dd2:	684b      	ldr	r3, [r1, #4]
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	dc02      	bgt.n	8000dde <__sflush_r+0x1a>
 8000dd8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	dd48      	ble.n	8000e70 <__sflush_r+0xac>
 8000dde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000de0:	2e00      	cmp	r6, #0
 8000de2:	d045      	beq.n	8000e70 <__sflush_r+0xac>
 8000de4:	2300      	movs	r3, #0
 8000de6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000dea:	682f      	ldr	r7, [r5, #0]
 8000dec:	6a21      	ldr	r1, [r4, #32]
 8000dee:	602b      	str	r3, [r5, #0]
 8000df0:	d030      	beq.n	8000e54 <__sflush_r+0x90>
 8000df2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	0759      	lsls	r1, r3, #29
 8000df8:	d505      	bpl.n	8000e06 <__sflush_r+0x42>
 8000dfa:	6863      	ldr	r3, [r4, #4]
 8000dfc:	1ad2      	subs	r2, r2, r3
 8000dfe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000e00:	b10b      	cbz	r3, 8000e06 <__sflush_r+0x42>
 8000e02:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000e04:	1ad2      	subs	r2, r2, r3
 8000e06:	2300      	movs	r3, #0
 8000e08:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000e0a:	6a21      	ldr	r1, [r4, #32]
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	47b0      	blx	r6
 8000e10:	1c43      	adds	r3, r0, #1
 8000e12:	89a3      	ldrh	r3, [r4, #12]
 8000e14:	d106      	bne.n	8000e24 <__sflush_r+0x60>
 8000e16:	6829      	ldr	r1, [r5, #0]
 8000e18:	291d      	cmp	r1, #29
 8000e1a:	d82b      	bhi.n	8000e74 <__sflush_r+0xb0>
 8000e1c:	4a28      	ldr	r2, [pc, #160]	@ (8000ec0 <__sflush_r+0xfc>)
 8000e1e:	410a      	asrs	r2, r1
 8000e20:	07d6      	lsls	r6, r2, #31
 8000e22:	d427      	bmi.n	8000e74 <__sflush_r+0xb0>
 8000e24:	2200      	movs	r2, #0
 8000e26:	6062      	str	r2, [r4, #4]
 8000e28:	04d9      	lsls	r1, r3, #19
 8000e2a:	6922      	ldr	r2, [r4, #16]
 8000e2c:	6022      	str	r2, [r4, #0]
 8000e2e:	d504      	bpl.n	8000e3a <__sflush_r+0x76>
 8000e30:	1c42      	adds	r2, r0, #1
 8000e32:	d101      	bne.n	8000e38 <__sflush_r+0x74>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	b903      	cbnz	r3, 8000e3a <__sflush_r+0x76>
 8000e38:	6560      	str	r0, [r4, #84]	@ 0x54
 8000e3a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000e3c:	602f      	str	r7, [r5, #0]
 8000e3e:	b1b9      	cbz	r1, 8000e70 <__sflush_r+0xac>
 8000e40:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000e44:	4299      	cmp	r1, r3
 8000e46:	d002      	beq.n	8000e4e <__sflush_r+0x8a>
 8000e48:	4628      	mov	r0, r5
 8000e4a:	f7ff fec3 	bl	8000bd4 <_free_r>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	6363      	str	r3, [r4, #52]	@ 0x34
 8000e52:	e00d      	b.n	8000e70 <__sflush_r+0xac>
 8000e54:	2301      	movs	r3, #1
 8000e56:	4628      	mov	r0, r5
 8000e58:	47b0      	blx	r6
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	1c50      	adds	r0, r2, #1
 8000e5e:	d1c9      	bne.n	8000df4 <__sflush_r+0x30>
 8000e60:	682b      	ldr	r3, [r5, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0c6      	beq.n	8000df4 <__sflush_r+0x30>
 8000e66:	2b1d      	cmp	r3, #29
 8000e68:	d001      	beq.n	8000e6e <__sflush_r+0xaa>
 8000e6a:	2b16      	cmp	r3, #22
 8000e6c:	d11d      	bne.n	8000eaa <__sflush_r+0xe6>
 8000e6e:	602f      	str	r7, [r5, #0]
 8000e70:	2000      	movs	r0, #0
 8000e72:	e021      	b.n	8000eb8 <__sflush_r+0xf4>
 8000e74:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e78:	b21b      	sxth	r3, r3
 8000e7a:	e01a      	b.n	8000eb2 <__sflush_r+0xee>
 8000e7c:	690f      	ldr	r7, [r1, #16]
 8000e7e:	2f00      	cmp	r7, #0
 8000e80:	d0f6      	beq.n	8000e70 <__sflush_r+0xac>
 8000e82:	0793      	lsls	r3, r2, #30
 8000e84:	680e      	ldr	r6, [r1, #0]
 8000e86:	bf08      	it	eq
 8000e88:	694b      	ldreq	r3, [r1, #20]
 8000e8a:	600f      	str	r7, [r1, #0]
 8000e8c:	bf18      	it	ne
 8000e8e:	2300      	movne	r3, #0
 8000e90:	1bf6      	subs	r6, r6, r7
 8000e92:	608b      	str	r3, [r1, #8]
 8000e94:	2e00      	cmp	r6, #0
 8000e96:	ddeb      	ble.n	8000e70 <__sflush_r+0xac>
 8000e98:	6a21      	ldr	r1, [r4, #32]
 8000e9a:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000e9e:	4633      	mov	r3, r6
 8000ea0:	463a      	mov	r2, r7
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	47e0      	blx	ip
 8000ea6:	2800      	cmp	r0, #0
 8000ea8:	dc07      	bgt.n	8000eba <__sflush_r+0xf6>
 8000eaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000eae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000eb2:	81a3      	strh	r3, [r4, #12]
 8000eb4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000eba:	4407      	add	r7, r0
 8000ebc:	1a36      	subs	r6, r6, r0
 8000ebe:	e7e9      	b.n	8000e94 <__sflush_r+0xd0>
 8000ec0:	dfbffffe 	.word	0xdfbffffe

08000ec4 <_fflush_r>:
 8000ec4:	b538      	push	{r3, r4, r5, lr}
 8000ec6:	690b      	ldr	r3, [r1, #16]
 8000ec8:	4605      	mov	r5, r0
 8000eca:	460c      	mov	r4, r1
 8000ecc:	b913      	cbnz	r3, 8000ed4 <_fflush_r+0x10>
 8000ece:	2500      	movs	r5, #0
 8000ed0:	4628      	mov	r0, r5
 8000ed2:	bd38      	pop	{r3, r4, r5, pc}
 8000ed4:	b118      	cbz	r0, 8000ede <_fflush_r+0x1a>
 8000ed6:	6a03      	ldr	r3, [r0, #32]
 8000ed8:	b90b      	cbnz	r3, 8000ede <_fflush_r+0x1a>
 8000eda:	f7ff fc93 	bl	8000804 <__sinit>
 8000ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0f3      	beq.n	8000ece <_fflush_r+0xa>
 8000ee6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000ee8:	07d0      	lsls	r0, r2, #31
 8000eea:	d404      	bmi.n	8000ef6 <_fflush_r+0x32>
 8000eec:	0599      	lsls	r1, r3, #22
 8000eee:	d402      	bmi.n	8000ef6 <_fflush_r+0x32>
 8000ef0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000ef2:	f7ff fe6c 	bl	8000bce <__retarget_lock_acquire_recursive>
 8000ef6:	4628      	mov	r0, r5
 8000ef8:	4621      	mov	r1, r4
 8000efa:	f7ff ff63 	bl	8000dc4 <__sflush_r>
 8000efe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000f00:	07da      	lsls	r2, r3, #31
 8000f02:	4605      	mov	r5, r0
 8000f04:	d4e4      	bmi.n	8000ed0 <_fflush_r+0xc>
 8000f06:	89a3      	ldrh	r3, [r4, #12]
 8000f08:	059b      	lsls	r3, r3, #22
 8000f0a:	d4e1      	bmi.n	8000ed0 <_fflush_r+0xc>
 8000f0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000f0e:	f7ff fe5f 	bl	8000bd0 <__retarget_lock_release_recursive>
 8000f12:	e7dd      	b.n	8000ed0 <_fflush_r+0xc>

08000f14 <__swhatbuf_r>:
 8000f14:	b570      	push	{r4, r5, r6, lr}
 8000f16:	460c      	mov	r4, r1
 8000f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	b096      	sub	sp, #88	@ 0x58
 8000f20:	4615      	mov	r5, r2
 8000f22:	461e      	mov	r6, r3
 8000f24:	da0d      	bge.n	8000f42 <__swhatbuf_r+0x2e>
 8000f26:	89a3      	ldrh	r3, [r4, #12]
 8000f28:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000f2c:	f04f 0100 	mov.w	r1, #0
 8000f30:	bf14      	ite	ne
 8000f32:	2340      	movne	r3, #64	@ 0x40
 8000f34:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000f38:	2000      	movs	r0, #0
 8000f3a:	6031      	str	r1, [r6, #0]
 8000f3c:	602b      	str	r3, [r5, #0]
 8000f3e:	b016      	add	sp, #88	@ 0x58
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
 8000f42:	466a      	mov	r2, sp
 8000f44:	f000 f848 	bl	8000fd8 <_fstat_r>
 8000f48:	2800      	cmp	r0, #0
 8000f4a:	dbec      	blt.n	8000f26 <__swhatbuf_r+0x12>
 8000f4c:	9901      	ldr	r1, [sp, #4]
 8000f4e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000f52:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f56:	4259      	negs	r1, r3
 8000f58:	4159      	adcs	r1, r3
 8000f5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f5e:	e7eb      	b.n	8000f38 <__swhatbuf_r+0x24>

08000f60 <__smakebuf_r>:
 8000f60:	898b      	ldrh	r3, [r1, #12]
 8000f62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f64:	079d      	lsls	r5, r3, #30
 8000f66:	4606      	mov	r6, r0
 8000f68:	460c      	mov	r4, r1
 8000f6a:	d507      	bpl.n	8000f7c <__smakebuf_r+0x1c>
 8000f6c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f70:	6023      	str	r3, [r4, #0]
 8000f72:	6123      	str	r3, [r4, #16]
 8000f74:	2301      	movs	r3, #1
 8000f76:	6163      	str	r3, [r4, #20]
 8000f78:	b003      	add	sp, #12
 8000f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f7c:	ab01      	add	r3, sp, #4
 8000f7e:	466a      	mov	r2, sp
 8000f80:	f7ff ffc8 	bl	8000f14 <__swhatbuf_r>
 8000f84:	9f00      	ldr	r7, [sp, #0]
 8000f86:	4605      	mov	r5, r0
 8000f88:	4639      	mov	r1, r7
 8000f8a:	4630      	mov	r0, r6
 8000f8c:	f7ff fe8e 	bl	8000cac <_malloc_r>
 8000f90:	b948      	cbnz	r0, 8000fa6 <__smakebuf_r+0x46>
 8000f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f96:	059a      	lsls	r2, r3, #22
 8000f98:	d4ee      	bmi.n	8000f78 <__smakebuf_r+0x18>
 8000f9a:	f023 0303 	bic.w	r3, r3, #3
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	81a3      	strh	r3, [r4, #12]
 8000fa4:	e7e2      	b.n	8000f6c <__smakebuf_r+0xc>
 8000fa6:	89a3      	ldrh	r3, [r4, #12]
 8000fa8:	6020      	str	r0, [r4, #0]
 8000faa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fae:	81a3      	strh	r3, [r4, #12]
 8000fb0:	9b01      	ldr	r3, [sp, #4]
 8000fb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000fb6:	b15b      	cbz	r3, 8000fd0 <__smakebuf_r+0x70>
 8000fb8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000fbc:	4630      	mov	r0, r6
 8000fbe:	f000 f81d 	bl	8000ffc <_isatty_r>
 8000fc2:	b128      	cbz	r0, 8000fd0 <__smakebuf_r+0x70>
 8000fc4:	89a3      	ldrh	r3, [r4, #12]
 8000fc6:	f023 0303 	bic.w	r3, r3, #3
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	81a3      	strh	r3, [r4, #12]
 8000fd0:	89a3      	ldrh	r3, [r4, #12]
 8000fd2:	431d      	orrs	r5, r3
 8000fd4:	81a5      	strh	r5, [r4, #12]
 8000fd6:	e7cf      	b.n	8000f78 <__smakebuf_r+0x18>

08000fd8 <_fstat_r>:
 8000fd8:	b538      	push	{r3, r4, r5, lr}
 8000fda:	4d07      	ldr	r5, [pc, #28]	@ (8000ff8 <_fstat_r+0x20>)
 8000fdc:	2300      	movs	r3, #0
 8000fde:	4604      	mov	r4, r0
 8000fe0:	4608      	mov	r0, r1
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	602b      	str	r3, [r5, #0]
 8000fe6:	f7ff fac5 	bl	8000574 <_fstat>
 8000fea:	1c43      	adds	r3, r0, #1
 8000fec:	d102      	bne.n	8000ff4 <_fstat_r+0x1c>
 8000fee:	682b      	ldr	r3, [r5, #0]
 8000ff0:	b103      	cbz	r3, 8000ff4 <_fstat_r+0x1c>
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	bd38      	pop	{r3, r4, r5, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200001bc 	.word	0x200001bc

08000ffc <_isatty_r>:
 8000ffc:	b538      	push	{r3, r4, r5, lr}
 8000ffe:	4d06      	ldr	r5, [pc, #24]	@ (8001018 <_isatty_r+0x1c>)
 8001000:	2300      	movs	r3, #0
 8001002:	4604      	mov	r4, r0
 8001004:	4608      	mov	r0, r1
 8001006:	602b      	str	r3, [r5, #0]
 8001008:	f7ff fac3 	bl	8000592 <_isatty>
 800100c:	1c43      	adds	r3, r0, #1
 800100e:	d102      	bne.n	8001016 <_isatty_r+0x1a>
 8001010:	682b      	ldr	r3, [r5, #0]
 8001012:	b103      	cbz	r3, 8001016 <_isatty_r+0x1a>
 8001014:	6023      	str	r3, [r4, #0]
 8001016:	bd38      	pop	{r3, r4, r5, pc}
 8001018:	200001bc 	.word	0x200001bc

0800101c <_sbrk_r>:
 800101c:	b538      	push	{r3, r4, r5, lr}
 800101e:	4d06      	ldr	r5, [pc, #24]	@ (8001038 <_sbrk_r+0x1c>)
 8001020:	2300      	movs	r3, #0
 8001022:	4604      	mov	r4, r0
 8001024:	4608      	mov	r0, r1
 8001026:	602b      	str	r3, [r5, #0]
 8001028:	f7ff faca 	bl	80005c0 <_sbrk>
 800102c:	1c43      	adds	r3, r0, #1
 800102e:	d102      	bne.n	8001036 <_sbrk_r+0x1a>
 8001030:	682b      	ldr	r3, [r5, #0]
 8001032:	b103      	cbz	r3, 8001036 <_sbrk_r+0x1a>
 8001034:	6023      	str	r3, [r4, #0]
 8001036:	bd38      	pop	{r3, r4, r5, pc}
 8001038:	200001bc 	.word	0x200001bc

0800103c <_init>:
 800103c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800103e:	bf00      	nop
 8001040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001042:	bc08      	pop	{r3}
 8001044:	469e      	mov	lr, r3
 8001046:	4770      	bx	lr

08001048 <_fini>:
 8001048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800104a:	bf00      	nop
 800104c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800104e:	bc08      	pop	{r3}
 8001050:	469e      	mov	lr, r3
 8001052:	4770      	bx	lr
