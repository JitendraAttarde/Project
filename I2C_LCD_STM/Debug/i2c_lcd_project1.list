
i2c_lcd_project1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000944  08000944  00001944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800095c  0800095c  00002004  2**0
                  CONTENTS
  4 .ARM          00000000  0800095c  0800095c  00002004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800095c  0800095c  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800095c  0800095c  0000195c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000960  08000960  00001960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000964  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002004  2**0
                  CONTENTS
 10 .bss          0000001c  20000004  20000004  00002004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000020  20000020  00002004  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001765  00000000  00000000  0000202e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000071f  00000000  00000000  00003793  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  00003eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fb  00000000  00000000  00004028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000191ae  00000000  00000000  00004123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001bec  00000000  00000000  0001d2d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b96f  00000000  00000000  0001eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000aa82c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000041c  00000000  00000000  000aa870  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000aac8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000058  00000000  00000000  000aacab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800092c 	.word	0x0800092c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800092c 	.word	0x0800092c

080001c8 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80001d0:	4b0e      	ldr	r3, [pc, #56]	@ (800020c <DelayMs+0x44>)
 80001d2:	685b      	ldr	r3, [r3, #4]
 80001d4:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80001d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000210 <DelayMs+0x48>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a0e      	ldr	r2, [pc, #56]	@ (8000214 <DelayMs+0x4c>)
 80001dc:	fba2 2303 	umull	r2, r3, r2, r3
 80001e0:	099b      	lsrs	r3, r3, #6
 80001e2:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	68ba      	ldr	r2, [r7, #8]
 80001e8:	fb02 f303 	mul.w	r3, r2, r3
 80001ec:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 80001ee:	bf00      	nop
 80001f0:	4b06      	ldr	r3, [pc, #24]	@ (800020c <DelayMs+0x44>)
 80001f2:	685a      	ldr	r2, [r3, #4]
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	1ad2      	subs	r2, r2, r3
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	429a      	cmp	r2, r3
 80001fc:	d3f8      	bcc.n	80001f0 <DelayMs+0x28>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	bc80      	pop	{r7}
 8000208:	4770      	bx	lr
 800020a:	bf00      	nop
 800020c:	e0001000 	.word	0xe0001000
 8000210:	20000000 	.word	0x20000000
 8000214:	10624dd3 	.word	0x10624dd3

08000218 <I2CStart>:
 *      Author: Nilesh
 */

#include "i2c.h"

void I2CStart() {
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 800021c:	4b08      	ldr	r3, [pc, #32]	@ (8000240 <I2CStart+0x28>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a07      	ldr	r2, [pc, #28]	@ (8000240 <I2CStart+0x28>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000226:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000228:	bf00      	nop
 800022a:	4b05      	ldr	r3, [pc, #20]	@ (8000240 <I2CStart+0x28>)
 800022c:	695b      	ldr	r3, [r3, #20]
 800022e:	f003 0301 	and.w	r3, r3, #1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d0f9      	beq.n	800022a <I2CStart+0x12>
}
 8000236:	bf00      	nop
 8000238:	bf00      	nop
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	40005400 	.word	0x40005400

08000244 <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000248:	4b08      	ldr	r3, [pc, #32]	@ (800026c <I2CStop+0x28>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a07      	ldr	r2, [pc, #28]	@ (800026c <I2CStop+0x28>)
 800024e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000252:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000254:	bf00      	nop
 8000256:	4b05      	ldr	r3, [pc, #20]	@ (800026c <I2CStop+0x28>)
 8000258:	699b      	ldr	r3, [r3, #24]
 800025a:	f003 0302 	and.w	r3, r3, #2
 800025e:	2b00      	cmp	r3, #0
 8000260:	d0f9      	beq.n	8000256 <I2CStop+0x12>
}
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	40005400 	.word	0x40005400

08000270 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800027a:	4a09      	ldr	r2, [pc, #36]	@ (80002a0 <I2CSendSlaveAddress+0x30>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000280:	bf00      	nop
 8000282:	4b07      	ldr	r3, [pc, #28]	@ (80002a0 <I2CSendSlaveAddress+0x30>)
 8000284:	695b      	ldr	r3, [r3, #20]
 8000286:	f003 0302 	and.w	r3, r3, #2
 800028a:	2b00      	cmp	r3, #0
 800028c:	d0f9      	beq.n	8000282 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 800028e:	4b04      	ldr	r3, [pc, #16]	@ (80002a0 <I2CSendSlaveAddress+0x30>)
 8000290:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 8000292:	4b03      	ldr	r3, [pc, #12]	@ (80002a0 <I2CSendSlaveAddress+0x30>)
 8000294:	699b      	ldr	r3, [r3, #24]
}
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	bc80      	pop	{r7}
 800029e:	4770      	bx	lr
 80002a0:	40005400 	.word	0x40005400

080002a4 <I2CSendData>:

void I2CSendData(uint8_t val) {
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80002ae:	bf00      	nop
 80002b0:	4b0a      	ldr	r3, [pc, #40]	@ (80002dc <I2CSendData+0x38>)
 80002b2:	695b      	ldr	r3, [r3, #20]
 80002b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d0f9      	beq.n	80002b0 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 80002bc:	4a07      	ldr	r2, [pc, #28]	@ (80002dc <I2CSendData+0x38>)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80002c2:	bf00      	nop
 80002c4:	4b05      	ldr	r3, [pc, #20]	@ (80002dc <I2CSendData+0x38>)
 80002c6:	695b      	ldr	r3, [r3, #20]
 80002c8:	f003 0304 	and.w	r3, r3, #4
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d0f9      	beq.n	80002c4 <I2CSendData+0x20>
}
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	370c      	adds	r7, #12
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bc80      	pop	{r7}
 80002da:	4770      	bx	lr
 80002dc:	40005400 	.word	0x40005400

080002e0 <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 80002e0:	b480      	push	{r7}
 80002e2:	b083      	sub	sp, #12
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	4603      	mov	r3, r0
 80002e8:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 80002ea:	79fb      	ldrb	r3, [r7, #7]
 80002ec:	f023 0301 	bic.w	r3, r3, #1
 80002f0:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 80002f2:	4a09      	ldr	r2, [pc, #36]	@ (8000318 <I2CIsDeviceReady+0x38>)
 80002f4:	79fb      	ldrb	r3, [r7, #7]
 80002f6:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80002f8:	bf00      	nop
 80002fa:	4b07      	ldr	r3, [pc, #28]	@ (8000318 <I2CIsDeviceReady+0x38>)
 80002fc:	695b      	ldr	r3, [r3, #20]
 80002fe:	f003 0302 	and.w	r3, r3, #2
 8000302:	2b00      	cmp	r3, #0
 8000304:	d0f9      	beq.n	80002fa <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000306:	4b04      	ldr	r3, [pc, #16]	@ (8000318 <I2CIsDeviceReady+0x38>)
 8000308:	699b      	ldr	r3, [r3, #24]
	return 1;
 800030a:	2301      	movs	r3, #1
}
 800030c:	4618      	mov	r0, r3
 800030e:	370c      	adds	r7, #12
 8000310:	46bd      	mov	sp, r7
 8000312:	bc80      	pop	{r7}
 8000314:	4770      	bx	lr
 8000316:	bf00      	nop
 8000318:	40005400 	.word	0x40005400

0800031c <I2CInit>:

void I2CInit() {
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000320:	4b43      	ldr	r3, [pc, #268]	@ (8000430 <I2CInit+0x114>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a42      	ldr	r2, [pc, #264]	@ (8000430 <I2CInit+0x114>)
 8000326:	f043 0302 	orr.w	r3, r3, #2
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 800032c:	2032      	movs	r0, #50	@ 0x32
 800032e:	f7ff ff4b 	bl	80001c8 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000332:	4b3f      	ldr	r3, [pc, #252]	@ (8000430 <I2CInit+0x114>)
 8000334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000336:	4a3e      	ldr	r2, [pc, #248]	@ (8000430 <I2CInit+0x114>)
 8000338:	f043 0302 	orr.w	r3, r3, #2
 800033c:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 800033e:	4b3d      	ldr	r3, [pc, #244]	@ (8000434 <I2CInit+0x118>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a3c      	ldr	r2, [pc, #240]	@ (8000434 <I2CInit+0x118>)
 8000344:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000348:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 800034a:	4b3a      	ldr	r3, [pc, #232]	@ (8000434 <I2CInit+0x118>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a39      	ldr	r2, [pc, #228]	@ (8000434 <I2CInit+0x118>)
 8000350:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000354:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 8000356:	4b37      	ldr	r3, [pc, #220]	@ (8000434 <I2CInit+0x118>)
 8000358:	685b      	ldr	r3, [r3, #4]
 800035a:	4a36      	ldr	r2, [pc, #216]	@ (8000434 <I2CInit+0x118>)
 800035c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000360:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 8000362:	4b34      	ldr	r3, [pc, #208]	@ (8000434 <I2CInit+0x118>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	4a33      	ldr	r2, [pc, #204]	@ (8000434 <I2CInit+0x118>)
 8000368:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800036c:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 800036e:	4b31      	ldr	r3, [pc, #196]	@ (8000434 <I2CInit+0x118>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a30      	ldr	r2, [pc, #192]	@ (8000434 <I2CInit+0x118>)
 8000374:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000378:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 800037a:	4b2e      	ldr	r3, [pc, #184]	@ (8000434 <I2CInit+0x118>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	4a2d      	ldr	r2, [pc, #180]	@ (8000434 <I2CInit+0x118>)
 8000380:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000384:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 8000386:	4b2b      	ldr	r3, [pc, #172]	@ (8000434 <I2CInit+0x118>)
 8000388:	685b      	ldr	r3, [r3, #4]
 800038a:	4a2a      	ldr	r2, [pc, #168]	@ (8000434 <I2CInit+0x118>)
 800038c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000390:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 8000392:	4b28      	ldr	r3, [pc, #160]	@ (8000434 <I2CInit+0x118>)
 8000394:	68db      	ldr	r3, [r3, #12]
 8000396:	4a27      	ldr	r2, [pc, #156]	@ (8000434 <I2CInit+0x118>)
 8000398:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800039c:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 800039e:	4b25      	ldr	r3, [pc, #148]	@ (8000434 <I2CInit+0x118>)
 80003a0:	6a1b      	ldr	r3, [r3, #32]
 80003a2:	4a24      	ldr	r2, [pc, #144]	@ (8000434 <I2CInit+0x118>)
 80003a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80003a8:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 80003aa:	4b22      	ldr	r3, [pc, #136]	@ (8000434 <I2CInit+0x118>)
 80003ac:	6a1b      	ldr	r3, [r3, #32]
 80003ae:	4a21      	ldr	r2, [pc, #132]	@ (8000434 <I2CInit+0x118>)
 80003b0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80003b4:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 80003b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000430 <I2CInit+0x114>)
 80003b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ba:	4a1d      	ldr	r2, [pc, #116]	@ (8000430 <I2CInit+0x114>)
 80003bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003c0:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 80003c2:	2032      	movs	r0, #50	@ 0x32
 80003c4:	f7ff ff00 	bl	80001c8 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 80003c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000438 <I2CInit+0x11c>)
 80003ca:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80003ce:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 80003d0:	4b19      	ldr	r3, [pc, #100]	@ (8000438 <I2CInit+0x11c>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 80003d6:	4b18      	ldr	r3, [pc, #96]	@ (8000438 <I2CInit+0x11c>)
 80003d8:	685b      	ldr	r3, [r3, #4]
 80003da:	4a17      	ldr	r2, [pc, #92]	@ (8000438 <I2CInit+0x11c>)
 80003dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80003e0:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 80003e2:	4b15      	ldr	r3, [pc, #84]	@ (8000438 <I2CInit+0x11c>)
 80003e4:	69db      	ldr	r3, [r3, #28]
 80003e6:	4a14      	ldr	r2, [pc, #80]	@ (8000438 <I2CInit+0x11c>)
 80003e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80003ec:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 80003ee:	4b12      	ldr	r3, [pc, #72]	@ (8000438 <I2CInit+0x11c>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a11      	ldr	r2, [pc, #68]	@ (8000438 <I2CInit+0x11c>)
 80003f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003f8:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 80003fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000438 <I2CInit+0x11c>)
 80003fc:	685b      	ldr	r3, [r3, #4]
 80003fe:	4a0e      	ldr	r2, [pc, #56]	@ (8000438 <I2CInit+0x11c>)
 8000400:	f043 0310 	orr.w	r3, r3, #16
 8000404:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000406:	4b0c      	ldr	r3, [pc, #48]	@ (8000438 <I2CInit+0x11c>)
 8000408:	69db      	ldr	r3, [r3, #28]
 800040a:	4a0b      	ldr	r2, [pc, #44]	@ (8000438 <I2CInit+0x11c>)
 800040c:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000410:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000412:	4b09      	ldr	r3, [pc, #36]	@ (8000438 <I2CInit+0x11c>)
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	4a08      	ldr	r2, [pc, #32]	@ (8000438 <I2CInit+0x11c>)
 8000418:	f043 0311 	orr.w	r3, r3, #17
 800041c:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 800041e:	4b06      	ldr	r3, [pc, #24]	@ (8000438 <I2CInit+0x11c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4a05      	ldr	r2, [pc, #20]	@ (8000438 <I2CInit+0x11c>)
 8000424:	f043 0301 	orr.w	r3, r3, #1
 8000428:	6013      	str	r3, [r2, #0]
}
 800042a:	bf00      	nop
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	40023800 	.word	0x40023800
 8000434:	40020400 	.word	0x40020400
 8000438:	40005400 	.word	0x40005400

0800043c <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 800043c:	b480      	push	{r7}
 800043e:	b085      	sub	sp, #20
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000444:	4b0e      	ldr	r3, [pc, #56]	@ (8000480 <DelayMs+0x44>)
 8000446:	685b      	ldr	r3, [r3, #4]
 8000448:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 800044a:	4b0e      	ldr	r3, [pc, #56]	@ (8000484 <DelayMs+0x48>)
 800044c:	681b      	ldr	r3, [r3, #0]
 800044e:	4a0e      	ldr	r2, [pc, #56]	@ (8000488 <DelayMs+0x4c>)
 8000450:	fba2 2303 	umull	r2, r3, r2, r3
 8000454:	099b      	lsrs	r3, r3, #6
 8000456:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	68ba      	ldr	r2, [r7, #8]
 800045c:	fb02 f303 	mul.w	r3, r2, r3
 8000460:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000462:	bf00      	nop
 8000464:	4b06      	ldr	r3, [pc, #24]	@ (8000480 <DelayMs+0x44>)
 8000466:	685a      	ldr	r2, [r3, #4]
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	1ad2      	subs	r2, r2, r3
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	429a      	cmp	r2, r3
 8000470:	d3f8      	bcc.n	8000464 <DelayMs+0x28>
}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	e0001000 	.word	0xe0001000
 8000484:	20000000 	.word	0x20000000
 8000488:	10624dd3 	.word	0x10624dd3

0800048c <LcdWriteByte>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	4603      	mov	r3, r0
 8000494:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 8000496:	f7ff febf 	bl	8000218 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 800049a:	204e      	movs	r0, #78	@ 0x4e
 800049c:	f7ff fee8 	bl	8000270 <I2CSendSlaveAddress>
	I2CSendData(val);
 80004a0:	79fb      	ldrb	r3, [r7, #7]
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fefe 	bl	80002a4 <I2CSendData>
	I2CStop();
 80004a8:	f7ff fecc 	bl	8000244 <I2CStop>
}
 80004ac:	bf00      	nop
 80004ae:	3708      	adds	r7, #8
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}

080004b4 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	4603      	mov	r3, r0
 80004bc:	460a      	mov	r2, r1
 80004be:	71fb      	strb	r3, [r7, #7]
 80004c0:	4613      	mov	r3, r2
 80004c2:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 80004c4:	79bb      	ldrb	r3, [r7, #6]
 80004c6:	f023 030f 	bic.w	r3, r3, #15
 80004ca:	73fb      	strb	r3, [r7, #15]
 80004cc:	79bb      	ldrb	r3, [r7, #6]
 80004ce:	011b      	lsls	r3, r3, #4
 80004d0:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b80      	cmp	r3, #128	@ 0x80
 80004d6:	bf14      	ite	ne
 80004d8:	2301      	movne	r3, #1
 80004da:	2300      	moveq	r3, #0
 80004dc:	b2db      	uxtb	r3, r3
 80004de:	737b      	strb	r3, [r7, #13]
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 80004e0:	7bfa      	ldrb	r2, [r7, #15]
 80004e2:	7b7b      	ldrb	r3, [r7, #13]
 80004e4:	4313      	orrs	r3, r2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	f043 030c 	orr.w	r3, r3, #12
 80004ec:	b2db      	uxtb	r3, r3
 80004ee:	4618      	mov	r0, r3
 80004f0:	f7ff ffcc 	bl	800048c <LcdWriteByte>
	DelayMs(1);
 80004f4:	2001      	movs	r0, #1
 80004f6:	f7ff ffa1 	bl	800043c <DelayMs>
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 80004fa:	7bfa      	ldrb	r2, [r7, #15]
 80004fc:	7b7b      	ldrb	r3, [r7, #13]
 80004fe:	4313      	orrs	r3, r2
 8000500:	b2db      	uxtb	r3, r3
 8000502:	f043 0308 	orr.w	r3, r3, #8
 8000506:	b2db      	uxtb	r3, r3
 8000508:	4618      	mov	r0, r3
 800050a:	f7ff ffbf 	bl	800048c <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 800050e:	7bba      	ldrb	r2, [r7, #14]
 8000510:	7b7b      	ldrb	r3, [r7, #13]
 8000512:	4313      	orrs	r3, r2
 8000514:	b2db      	uxtb	r3, r3
 8000516:	f043 030c 	orr.w	r3, r3, #12
 800051a:	b2db      	uxtb	r3, r3
 800051c:	4618      	mov	r0, r3
 800051e:	f7ff ffb5 	bl	800048c <LcdWriteByte>
	DelayMs(1);
 8000522:	2001      	movs	r0, #1
 8000524:	f7ff ff8a 	bl	800043c <DelayMs>
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 8000528:	7bba      	ldrb	r2, [r7, #14]
 800052a:	7b7b      	ldrb	r3, [r7, #13]
 800052c:	4313      	orrs	r3, r2
 800052e:	b2db      	uxtb	r3, r3
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	b2db      	uxtb	r3, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f7ff ffa8 	bl	800048c <LcdWriteByte>
}
 800053c:	bf00      	nop
 800053e:	3710      	adds	r7, #16
 8000540:	46bd      	mov	sp, r7
 8000542:	bd80      	pop	{r7, pc}

08000544 <LcdInit>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int LcdInit() {
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 800054a:	2014      	movs	r0, #20
 800054c:	f7ff ff76 	bl	800043c <DelayMs>
	I2CInit();
 8000550:	f7ff fee4 	bl	800031c <I2CInit>
	// check if lcd is ready
	I2CStart();
 8000554:	f7ff fe60 	bl	8000218 <I2CStart>
	int ret = I2CIsDeviceReady(LCD_SLAVE_ADDR_W);
 8000558:	204e      	movs	r0, #78	@ 0x4e
 800055a:	f7ff fec1 	bl	80002e0 <I2CIsDeviceReady>
 800055e:	6078      	str	r0, [r7, #4]
	I2CStop();
 8000560:	f7ff fe70 	bl	8000244 <I2CStop>
	if(!ret)
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d101      	bne.n	800056e <LcdInit+0x2a>
		return 0;
 800056a:	2300      	movs	r3, #0
 800056c:	e04a      	b.n	8000604 <LcdInit+0xc0>

	// attention sequence
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 800056e:	2034      	movs	r0, #52	@ 0x34
 8000570:	f7ff ff8c 	bl	800048c <LcdWriteByte>
	__NOP();
 8000574:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000576:	2030      	movs	r0, #48	@ 0x30
 8000578:	f7ff ff88 	bl	800048c <LcdWriteByte>
	DelayMs(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f7ff ff5d 	bl	800043c <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000582:	2034      	movs	r0, #52	@ 0x34
 8000584:	f7ff ff82 	bl	800048c <LcdWriteByte>
	__NOP();
 8000588:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 800058a:	2030      	movs	r0, #48	@ 0x30
 800058c:	f7ff ff7e 	bl	800048c <LcdWriteByte>
	DelayMs(1);
 8000590:	2001      	movs	r0, #1
 8000592:	f7ff ff53 	bl	800043c <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000596:	2034      	movs	r0, #52	@ 0x34
 8000598:	f7ff ff78 	bl	800048c <LcdWriteByte>
	__NOP();
 800059c:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 800059e:	2030      	movs	r0, #48	@ 0x30
 80005a0:	f7ff ff74 	bl	800048c <LcdWriteByte>
	DelayMs(3);
 80005a4:	2003      	movs	r0, #3
 80005a6:	f7ff ff49 	bl	800043c <DelayMs>

	LcdWriteByte(LCD_FN_SET_4BIT | BV(LCD_EN));
 80005aa:	2024      	movs	r0, #36	@ 0x24
 80005ac:	f7ff ff6e 	bl	800048c <LcdWriteByte>
	__NOP();
 80005b0:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_4BIT);
 80005b2:	2020      	movs	r0, #32
 80005b4:	f7ff ff6a 	bl	800048c <LcdWriteByte>
	DelayMs(3);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f7ff ff3f 	bl	800043c <DelayMs>

	// lcd initialization
	LcdWriteByte(LCD_FN_SET_4BIT_2LINES);
 80005be:	2028      	movs	r0, #40	@ 0x28
 80005c0:	f7ff ff64 	bl	800048c <LcdWriteByte>
	DelayMs(1);
 80005c4:	2001      	movs	r0, #1
 80005c6:	f7ff ff39 	bl	800043c <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_CTRL);
 80005ca:	2108      	movs	r1, #8
 80005cc:	2080      	movs	r0, #128	@ 0x80
 80005ce:	f7ff ff71 	bl	80004b4 <LcdWrite>
	DelayMs(1);
 80005d2:	2001      	movs	r0, #1
 80005d4:	f7ff ff32 	bl	800043c <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80005d8:	2101      	movs	r1, #1
 80005da:	2080      	movs	r0, #128	@ 0x80
 80005dc:	f7ff ff6a 	bl	80004b4 <LcdWrite>
	DelayMs(1);
 80005e0:	2001      	movs	r0, #1
 80005e2:	f7ff ff2b 	bl	800043c <DelayMs>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 80005e6:	2106      	movs	r1, #6
 80005e8:	2080      	movs	r0, #128	@ 0x80
 80005ea:	f7ff ff63 	bl	80004b4 <LcdWrite>
	DelayMs(1);
 80005ee:	2001      	movs	r0, #1
 80005f0:	f7ff ff24 	bl	800043c <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 80005f4:	210c      	movs	r1, #12
 80005f6:	2080      	movs	r0, #128	@ 0x80
 80005f8:	f7ff ff5c 	bl	80004b4 <LcdWrite>
	DelayMs(1);
 80005fc:	2001      	movs	r0, #1
 80005fe:	f7ff ff1d 	bl	800043c <DelayMs>
	return ret;
 8000602:	687b      	ldr	r3, [r7, #4]
}
 8000604:	4618      	mov	r0, r3
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	6039      	str	r1, [r7, #0]
 8000616:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line); // line address
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	4619      	mov	r1, r3
 800061c:	2080      	movs	r0, #128	@ 0x80
 800061e:	f7ff ff49 	bl	80004b4 <LcdWrite>
	DelayMs(1);
 8000622:	2001      	movs	r0, #1
 8000624:	f7ff ff0a 	bl	800043c <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 8000628:	2300      	movs	r3, #0
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	e00a      	b.n	8000644 <LcdPuts+0x38>
		LcdWrite(LCD_DATA, str[i]);
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	4413      	add	r3, r2
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	4619      	mov	r1, r3
 8000638:	2001      	movs	r0, #1
 800063a:	f7ff ff3b 	bl	80004b4 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3301      	adds	r3, #1
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	4413      	add	r3, r2
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d1ee      	bne.n	800062e <LcdPuts+0x22>
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <LedInit>:
 */

#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in A	HB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000664:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <LedInit+0xac>)
 8000666:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000668:	4a27      	ldr	r2, [pc, #156]	@ (8000708 <LedInit+0xac>)
 800066a:	f043 0308 	orr.w	r3, r3, #8
 800066e:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000670:	4b26      	ldr	r3, [pc, #152]	@ (800070c <LedInit+0xb0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	687a      	ldr	r2, [r7, #4]
 8000676:	0052      	lsls	r2, r2, #1
 8000678:	3201      	adds	r2, #1
 800067a:	2101      	movs	r1, #1
 800067c:	fa01 f202 	lsl.w	r2, r1, r2
 8000680:	43d2      	mvns	r2, r2
 8000682:	4611      	mov	r1, r2
 8000684:	4a21      	ldr	r2, [pc, #132]	@ (800070c <LedInit+0xb0>)
 8000686:	400b      	ands	r3, r1
 8000688:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 800068a:	4b20      	ldr	r3, [pc, #128]	@ (800070c <LedInit+0xb0>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	0052      	lsls	r2, r2, #1
 8000692:	2101      	movs	r1, #1
 8000694:	fa01 f202 	lsl.w	r2, r1, r2
 8000698:	4611      	mov	r1, r2
 800069a:	4a1c      	ldr	r2, [pc, #112]	@ (800070c <LedInit+0xb0>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006a0:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <LedInit+0xb0>)
 80006a2:	689b      	ldr	r3, [r3, #8]
 80006a4:	687a      	ldr	r2, [r7, #4]
 80006a6:	0052      	lsls	r2, r2, #1
 80006a8:	3201      	adds	r2, #1
 80006aa:	2101      	movs	r1, #1
 80006ac:	4091      	lsls	r1, r2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	0052      	lsls	r2, r2, #1
 80006b2:	2001      	movs	r0, #1
 80006b4:	fa00 f202 	lsl.w	r2, r0, r2
 80006b8:	430a      	orrs	r2, r1
 80006ba:	43d2      	mvns	r2, r2
 80006bc:	4611      	mov	r1, r2
 80006be:	4a13      	ldr	r2, [pc, #76]	@ (800070c <LedInit+0xb0>)
 80006c0:	400b      	ands	r3, r1
 80006c2:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 80006c4:	4b11      	ldr	r3, [pc, #68]	@ (800070c <LedInit+0xb0>)
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	0052      	lsls	r2, r2, #1
 80006cc:	3201      	adds	r2, #1
 80006ce:	2101      	movs	r1, #1
 80006d0:	4091      	lsls	r1, r2
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	0052      	lsls	r2, r2, #1
 80006d6:	2001      	movs	r0, #1
 80006d8:	fa00 f202 	lsl.w	r2, r0, r2
 80006dc:	430a      	orrs	r2, r1
 80006de:	43d2      	mvns	r2, r2
 80006e0:	4611      	mov	r1, r2
 80006e2:	4a0a      	ldr	r2, [pc, #40]	@ (800070c <LedInit+0xb0>)
 80006e4:	400b      	ands	r3, r1
 80006e6:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 80006e8:	4b08      	ldr	r3, [pc, #32]	@ (800070c <LedInit+0xb0>)
 80006ea:	685b      	ldr	r3, [r3, #4]
 80006ec:	2101      	movs	r1, #1
 80006ee:	687a      	ldr	r2, [r7, #4]
 80006f0:	fa01 f202 	lsl.w	r2, r1, r2
 80006f4:	43d2      	mvns	r2, r2
 80006f6:	4611      	mov	r1, r2
 80006f8:	4a04      	ldr	r2, [pc, #16]	@ (800070c <LedInit+0xb0>)
 80006fa:	400b      	ands	r3, r1
 80006fc:	6053      	str	r3, [r2, #4]
}
 80006fe:	bf00      	nop
 8000700:	370c      	adds	r7, #12
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800
 800070c:	40020c00 	.word	0x40020c00

08000710 <LedOn>:

void LedOn(uint32_t pin) {
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000718:	4b07      	ldr	r3, [pc, #28]	@ (8000738 <LedOn+0x28>)
 800071a:	695b      	ldr	r3, [r3, #20]
 800071c:	2101      	movs	r1, #1
 800071e:	687a      	ldr	r2, [r7, #4]
 8000720:	fa01 f202 	lsl.w	r2, r1, r2
 8000724:	4611      	mov	r1, r2
 8000726:	4a04      	ldr	r2, [pc, #16]	@ (8000738 <LedOn+0x28>)
 8000728:	430b      	orrs	r3, r1
 800072a:	6153      	str	r3, [r2, #20]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	bc80      	pop	{r7}
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	40020c00 	.word	0x40020c00

0800073c <LedOff>:

void LedOff(uint32_t pin) {
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 8000744:	4b07      	ldr	r3, [pc, #28]	@ (8000764 <LedOff+0x28>)
 8000746:	695b      	ldr	r3, [r3, #20]
 8000748:	2101      	movs	r1, #1
 800074a:	687a      	ldr	r2, [r7, #4]
 800074c:	fa01 f202 	lsl.w	r2, r1, r2
 8000750:	43d2      	mvns	r2, r2
 8000752:	4611      	mov	r1, r2
 8000754:	4a03      	ldr	r2, [pc, #12]	@ (8000764 <LedOff+0x28>)
 8000756:	400b      	ands	r3, r1
 8000758:	6153      	str	r3, [r2, #20]
}
 800075a:	bf00      	nop
 800075c:	370c      	adds	r7, #12
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	40020c00 	.word	0x40020c00

08000768 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000770:	4b0e      	ldr	r3, [pc, #56]	@ (80007ac <DelayMs+0x44>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000776:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <DelayMs+0x48>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a0e      	ldr	r2, [pc, #56]	@ (80007b4 <DelayMs+0x4c>)
 800077c:	fba2 2303 	umull	r2, r3, r2, r3
 8000780:	099b      	lsrs	r3, r3, #6
 8000782:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	68ba      	ldr	r2, [r7, #8]
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800078e:	bf00      	nop
 8000790:	4b06      	ldr	r3, [pc, #24]	@ (80007ac <DelayMs+0x44>)
 8000792:	685a      	ldr	r2, [r3, #4]
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	1ad2      	subs	r2, r2, r3
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	429a      	cmp	r2, r3
 800079c:	d3f8      	bcc.n	8000790 <DelayMs+0x28>
}
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
 80007aa:	bf00      	nop
 80007ac:	e0001000 	.word	0xe0001000
 80007b0:	20000000 	.word	0x20000000
 80007b4:	10624dd3 	.word	0x10624dd3

080007b8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
	int ret;
	SystemInit();
 80007be:	f000 f831 	bl	8000824 <SystemInit>
	LedInit(LED_GREEN);
 80007c2:	200c      	movs	r0, #12
 80007c4:	f7ff ff4a 	bl	800065c <LedInit>
	LedInit(LED_ORANGE);
 80007c8:	200d      	movs	r0, #13
 80007ca:	f7ff ff47 	bl	800065c <LedInit>
	LedInit(LED_RED);
 80007ce:	200e      	movs	r0, #14
 80007d0:	f7ff ff44 	bl	800065c <LedInit>
	LedInit(LED_BLUE);
 80007d4:	200f      	movs	r0, #15
 80007d6:	f7ff ff41 	bl	800065c <LedInit>
	ret = LcdInit();
 80007da:	f7ff feb3 	bl	8000544 <LcdInit>
 80007de:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(ret)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d0fc      	beq.n	80007e0 <main+0x28>
		{
			LedOn(LED_RED);
 80007e6:	200e      	movs	r0, #14
 80007e8:	f7ff ff92 	bl	8000710 <LedOn>
			LcdPuts(LCD_LINE1, "RED_LED_ON");
 80007ec:	490b      	ldr	r1, [pc, #44]	@ (800081c <main+0x64>)
 80007ee:	2080      	movs	r0, #128	@ 0x80
 80007f0:	f7ff ff0c 	bl	800060c <LcdPuts>
			LcdWrite(LCD_CMD,LCD_CLEAR);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2080      	movs	r0, #128	@ 0x80
 80007f8:	f7ff fe5c 	bl	80004b4 <LcdWrite>
			DelayMs(500);
 80007fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000800:	f7ff ffb2 	bl	8000768 <DelayMs>
			LedOff(LED_RED);
 8000804:	200e      	movs	r0, #14
 8000806:	f7ff ff99 	bl	800073c <LedOff>
			LcdPuts(LCD_LINE1, "RED_LED_OFF");
 800080a:	4905      	ldr	r1, [pc, #20]	@ (8000820 <main+0x68>)
 800080c:	2080      	movs	r0, #128	@ 0x80
 800080e:	f7ff fefd 	bl	800060c <LcdPuts>
			DelayMs(500);
 8000812:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000816:	f7ff ffa7 	bl	8000768 <DelayMs>
		if(ret)
 800081a:	e7e1      	b.n	80007e0 <main+0x28>
 800081c:	08000944 	.word	0x08000944
 8000820:	08000950 	.word	0x08000950

08000824 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  DWT_Init();
 8000828:	f000 f802 	bl	8000830 <DWT_Init>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}

08000830 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <DWT_Init+0x58>)
 8000836:	68db      	ldr	r3, [r3, #12]
 8000838:	4a13      	ldr	r2, [pc, #76]	@ (8000888 <DWT_Init+0x58>)
 800083a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800083e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <DWT_Init+0x58>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	4a10      	ldr	r2, [pc, #64]	@ (8000888 <DWT_Init+0x58>)
 8000846:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800084a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800084c:	4b0f      	ldr	r3, [pc, #60]	@ (800088c <DWT_Init+0x5c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a0e      	ldr	r2, [pc, #56]	@ (800088c <DWT_Init+0x5c>)
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000858:	4b0c      	ldr	r3, [pc, #48]	@ (800088c <DWT_Init+0x5c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a0b      	ldr	r2, [pc, #44]	@ (800088c <DWT_Init+0x5c>)
 800085e:	f043 0301 	orr.w	r3, r3, #1
 8000862:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000864:	4b09      	ldr	r3, [pc, #36]	@ (800088c <DWT_Init+0x5c>)
 8000866:	2200      	movs	r2, #0
 8000868:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800086a:	bf00      	nop
    __ASM volatile ("NOP");
 800086c:	bf00      	nop
    __ASM volatile ("NOP");
 800086e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000870:	4b06      	ldr	r3, [pc, #24]	@ (800088c <DWT_Init+0x5c>)
 8000872:	685b      	ldr	r3, [r3, #4]
 8000874:	2b00      	cmp	r3, #0
 8000876:	bf0c      	ite	eq
 8000878:	2301      	moveq	r3, #1
 800087a:	2300      	movne	r3, #0
 800087c:	b2db      	uxtb	r3, r3
}
 800087e:	4618      	mov	r0, r3
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000edf0 	.word	0xe000edf0
 800088c:	e0001000 	.word	0xe0001000

08000890 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000890:	480d      	ldr	r0, [pc, #52]	@ (80008c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000892:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000894:	f7ff ffc6 	bl	8000824 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000898:	480c      	ldr	r0, [pc, #48]	@ (80008cc <LoopForever+0x6>)
  ldr r1, =_edata
 800089a:	490d      	ldr	r1, [pc, #52]	@ (80008d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800089c:	4a0d      	ldr	r2, [pc, #52]	@ (80008d4 <LoopForever+0xe>)
  movs r3, #0
 800089e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008a0:	e002      	b.n	80008a8 <LoopCopyDataInit>

080008a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008a6:	3304      	adds	r3, #4

080008a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ac:	d3f9      	bcc.n	80008a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ae:	4a0a      	ldr	r2, [pc, #40]	@ (80008d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008b0:	4c0a      	ldr	r4, [pc, #40]	@ (80008dc <LoopForever+0x16>)
  movs r3, #0
 80008b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008b4:	e001      	b.n	80008ba <LoopFillZerobss>

080008b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008b8:	3204      	adds	r2, #4

080008ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008bc:	d3fb      	bcc.n	80008b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008be:	f000 f811 	bl	80008e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008c2:	f7ff ff79 	bl	80007b8 <main>

080008c6 <LoopForever>:

LoopForever:
  b LoopForever
 80008c6:	e7fe      	b.n	80008c6 <LoopForever>
  ldr   r0, =_estack
 80008c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008d0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80008d4:	08000964 	.word	0x08000964
  ldr r2, =_sbss
 80008d8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80008dc:	20000020 	.word	0x20000020

080008e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008e0:	e7fe      	b.n	80008e0 <ADC_IRQHandler>
	...

080008e4 <__libc_init_array>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	4d0d      	ldr	r5, [pc, #52]	@ (800091c <__libc_init_array+0x38>)
 80008e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000920 <__libc_init_array+0x3c>)
 80008ea:	1b64      	subs	r4, r4, r5
 80008ec:	10a4      	asrs	r4, r4, #2
 80008ee:	2600      	movs	r6, #0
 80008f0:	42a6      	cmp	r6, r4
 80008f2:	d109      	bne.n	8000908 <__libc_init_array+0x24>
 80008f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000924 <__libc_init_array+0x40>)
 80008f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000928 <__libc_init_array+0x44>)
 80008f8:	f000 f818 	bl	800092c <_init>
 80008fc:	1b64      	subs	r4, r4, r5
 80008fe:	10a4      	asrs	r4, r4, #2
 8000900:	2600      	movs	r6, #0
 8000902:	42a6      	cmp	r6, r4
 8000904:	d105      	bne.n	8000912 <__libc_init_array+0x2e>
 8000906:	bd70      	pop	{r4, r5, r6, pc}
 8000908:	f855 3b04 	ldr.w	r3, [r5], #4
 800090c:	4798      	blx	r3
 800090e:	3601      	adds	r6, #1
 8000910:	e7ee      	b.n	80008f0 <__libc_init_array+0xc>
 8000912:	f855 3b04 	ldr.w	r3, [r5], #4
 8000916:	4798      	blx	r3
 8000918:	3601      	adds	r6, #1
 800091a:	e7f2      	b.n	8000902 <__libc_init_array+0x1e>
 800091c:	0800095c 	.word	0x0800095c
 8000920:	0800095c 	.word	0x0800095c
 8000924:	0800095c 	.word	0x0800095c
 8000928:	08000960 	.word	0x08000960

0800092c <_init>:
 800092c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092e:	bf00      	nop
 8000930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000932:	bc08      	pop	{r3}
 8000934:	469e      	mov	lr, r3
 8000936:	4770      	bx	lr

08000938 <_fini>:
 8000938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800093a:	bf00      	nop
 800093c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093e:	bc08      	pop	{r3}
 8000940:	469e      	mov	lr, r3
 8000942:	4770      	bx	lr
