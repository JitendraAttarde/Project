
Harsh_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  080026a0  080026a0  000036a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027a8  080027a8  00004060  2**0
                  CONTENTS
  4 .ARM          00000008  080027a8  080027a8  000037a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080027b0  080027b0  00004060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b0  080027b0  000037b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080027b4  080027b4  000037b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080027b8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004060  2**0
                  CONTENTS
 10 .bss          00000178  20000060  20000060  00004060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00004060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000398d  00000000  00000000  00004090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001147  00000000  00000000  00007a1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c0  00000000  00000000  00008b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000295  00000000  00000000  00008f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ad03  00000000  00000000  000091bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004a35  00000000  00000000  00023ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008e978  00000000  00000000  000288f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000b726d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000139c  00000000  00000000  000b72b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  000b864c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004c  00000000  00000000  000b866b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002688 	.word	0x08002688

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08002688 	.word	0x08002688

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <spi_cs_rfid_write>:
bool rc522_request(uint8_t reqMode, uint8_t *tagType);

bool rc522_antiColl(uint8_t* serNum);

void spi_cs_rfid_write(bool state)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	if(state)
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d006      	beq.n	800028e <spi_cs_rfid_write+0x1e>
	  {
	    GPIOB->ODR |= (1UL << 0);
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <spi_cs_rfid_write+0x38>)
 8000282:	695b      	ldr	r3, [r3, #20]
 8000284:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <spi_cs_rfid_write+0x38>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	6153      	str	r3, [r2, #20]
	  }
	  else
	  {
	    GPIOB->ODR &= ~(1UL << 0);
	  }
}
 800028c:	e005      	b.n	800029a <spi_cs_rfid_write+0x2a>
	    GPIOB->ODR &= ~(1UL << 0);
 800028e:	4b06      	ldr	r3, [pc, #24]	@ (80002a8 <spi_cs_rfid_write+0x38>)
 8000290:	695b      	ldr	r3, [r3, #20]
 8000292:	4a05      	ldr	r2, [pc, #20]	@ (80002a8 <spi_cs_rfid_write+0x38>)
 8000294:	f023 0301 	bic.w	r3, r3, #1
 8000298:	6153      	str	r3, [r2, #20]
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40020400 	.word	0x40020400

080002ac <rc522_regRead8>:

uint8_t rc522_regRead8(uint8_t reg)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	71fb      	strb	r3, [r7, #7]
  spi_cs_rfid_write(0);
 80002b6:	2000      	movs	r0, #0
 80002b8:	f7ff ffda 	bl	8000270 <spi_cs_rfid_write>
  reg = ((reg << 1) & 0x7E) | 0x80;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	005b      	lsls	r3, r3, #1
 80002c0:	b25b      	sxtb	r3, r3
 80002c2:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80002c6:	b25b      	sxtb	r3, r3
 80002c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002cc:	b25b      	sxtb	r3, r3
 80002ce:	b2db      	uxtb	r3, r3
 80002d0:	71fb      	strb	r3, [r7, #7]
  SPI_Transmit(&reg, 1);
 80002d2:	1dfb      	adds	r3, r7, #7
 80002d4:	2101      	movs	r1, #1
 80002d6:	4618      	mov	r0, r3
 80002d8:	f001 f88a 	bl	80013f0 <SPI_Transmit>
  uint8_t dataRd=0;
 80002dc:	2300      	movs	r3, #0
 80002de:	73fb      	strb	r3, [r7, #15]
  SPI_Receive(&dataRd, 1);
 80002e0:	f107 030f 	add.w	r3, r7, #15
 80002e4:	2101      	movs	r1, #1
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 f90a 	bl	8001500 <SPI_Receive>
  spi_cs_rfid_write(1);
 80002ec:	2001      	movs	r0, #1
 80002ee:	f7ff ffbf 	bl	8000270 <spi_cs_rfid_write>
  return dataRd;
 80002f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80002f4:	4618      	mov	r0, r3
 80002f6:	3710      	adds	r7, #16
 80002f8:	46bd      	mov	sp, r7
 80002fa:	bd80      	pop	{r7, pc}

080002fc <rc522_regWrite8>:

/**
 * @brief write register
 */
void rc522_regWrite8(uint8_t reg, uint8_t data8)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b084      	sub	sp, #16
 8000300:	af00      	add	r7, sp, #0
 8000302:	4603      	mov	r3, r0
 8000304:	460a      	mov	r2, r1
 8000306:	71fb      	strb	r3, [r7, #7]
 8000308:	4613      	mov	r3, r2
 800030a:	71bb      	strb	r3, [r7, #6]
  spi_cs_rfid_write(0);
 800030c:	2000      	movs	r0, #0
 800030e:	f7ff ffaf 	bl	8000270 <spi_cs_rfid_write>
  uint8_t txData[2] = {0x7E&(reg << 1), data8};
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	005b      	lsls	r3, r3, #1
 8000316:	b2db      	uxtb	r3, r3
 8000318:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 800031c:	b2db      	uxtb	r3, r3
 800031e:	733b      	strb	r3, [r7, #12]
 8000320:	79bb      	ldrb	r3, [r7, #6]
 8000322:	737b      	strb	r3, [r7, #13]
  SPI_Transmit(txData, 2);
 8000324:	f107 030c 	add.w	r3, r7, #12
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f001 f860 	bl	80013f0 <SPI_Transmit>
  spi_cs_rfid_write(1);
 8000330:	2001      	movs	r0, #1
 8000332:	f7ff ff9d 	bl	8000270 <spi_cs_rfid_write>
}
 8000336:	bf00      	nop
 8000338:	3710      	adds	r7, #16
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}

0800033e <rc522_setBit>:

/**
 * @brief set bit
 */
void rc522_setBit(uint8_t reg, uint8_t mask)
{
 800033e:	b580      	push	{r7, lr}
 8000340:	b082      	sub	sp, #8
 8000342:	af00      	add	r7, sp, #0
 8000344:	4603      	mov	r3, r0
 8000346:	460a      	mov	r2, r1
 8000348:	71fb      	strb	r3, [r7, #7]
 800034a:	4613      	mov	r3, r2
 800034c:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)|mask);
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	4618      	mov	r0, r3
 8000352:	f7ff ffab 	bl	80002ac <rc522_regRead8>
 8000356:	4603      	mov	r3, r0
 8000358:	461a      	mov	r2, r3
 800035a:	79bb      	ldrb	r3, [r7, #6]
 800035c:	4313      	orrs	r3, r2
 800035e:	b2da      	uxtb	r2, r3
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	4611      	mov	r1, r2
 8000364:	4618      	mov	r0, r3
 8000366:	f7ff ffc9 	bl	80002fc <rc522_regWrite8>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}

08000372 <rc522_clearBit>:

/**
 * @brief clear bit
 */
void rc522_clearBit(uint8_t reg, uint8_t mask)
{
 8000372:	b580      	push	{r7, lr}
 8000374:	b082      	sub	sp, #8
 8000376:	af00      	add	r7, sp, #0
 8000378:	4603      	mov	r3, r0
 800037a:	460a      	mov	r2, r1
 800037c:	71fb      	strb	r3, [r7, #7]
 800037e:	4613      	mov	r3, r2
 8000380:	71bb      	strb	r3, [r7, #6]
  rc522_regWrite8(reg, rc522_regRead8(reg)&(~mask));
 8000382:	79fb      	ldrb	r3, [r7, #7]
 8000384:	4618      	mov	r0, r3
 8000386:	f7ff ff91 	bl	80002ac <rc522_regRead8>
 800038a:	4603      	mov	r3, r0
 800038c:	b25a      	sxtb	r2, r3
 800038e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000392:	43db      	mvns	r3, r3
 8000394:	b25b      	sxtb	r3, r3
 8000396:	4013      	ands	r3, r2
 8000398:	b25b      	sxtb	r3, r3
 800039a:	b2da      	uxtb	r2, r3
 800039c:	79fb      	ldrb	r3, [r7, #7]
 800039e:	4611      	mov	r1, r2
 80003a0:	4618      	mov	r0, r3
 80003a2:	f7ff ffab 	bl	80002fc <rc522_regWrite8>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}

080003ae <rc522_reset>:

/**
 * @brief reset function
 */
void rc522_reset(void)
{
 80003ae:	b580      	push	{r7, lr}
 80003b0:	af00      	add	r7, sp, #0
  rc522_regWrite8(0x01, 0x0F);
 80003b2:	210f      	movs	r1, #15
 80003b4:	2001      	movs	r0, #1
 80003b6:	f7ff ffa1 	bl	80002fc <rc522_regWrite8>
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}

080003be <rc522_antennaON>:

/**
 * @brief Antenna ON
 */
void rc522_antennaON(void)
{
 80003be:	b580      	push	{r7, lr}
 80003c0:	b082      	sub	sp, #8
 80003c2:	af00      	add	r7, sp, #0
  uint8_t temp;

  temp = rc522_regRead8(MFRC522_REG_TX_CONTROL);
 80003c4:	2014      	movs	r0, #20
 80003c6:	f7ff ff71 	bl	80002ac <rc522_regRead8>
 80003ca:	4603      	mov	r3, r0
 80003cc:	71fb      	strb	r3, [r7, #7]
  if (!(temp & 0x03)) {
 80003ce:	79fb      	ldrb	r3, [r7, #7]
 80003d0:	f003 0303 	and.w	r3, r3, #3
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d103      	bne.n	80003e0 <rc522_antennaON+0x22>
    rc522_setBit(MFRC522_REG_TX_CONTROL, 0x03);
 80003d8:	2103      	movs	r1, #3
 80003da:	2014      	movs	r0, #20
 80003dc:	f7ff ffaf 	bl	800033e <rc522_setBit>
  }
}
 80003e0:	bf00      	nop
 80003e2:	3708      	adds	r7, #8
 80003e4:	46bd      	mov	sp, r7
 80003e6:	bd80      	pop	{r7, pc}

080003e8 <rc522_checkCard>:

/**
 * @brief Check card
 */
bool rc522_checkCard(uint8_t *id)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b084      	sub	sp, #16
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  bool status=false;
 80003f0:	2300      	movs	r3, #0
 80003f2:	73fb      	strb	r3, [r7, #15]
  //Find cards, return card type
    status = rc522_request(PICC_REQIDL, id);
 80003f4:	6879      	ldr	r1, [r7, #4]
 80003f6:	2026      	movs	r0, #38	@ 0x26
 80003f8:	f000 f811 	bl	800041e <rc522_request>
 80003fc:	4603      	mov	r3, r0
 80003fe:	73fb      	strb	r3, [r7, #15]
    if (status == true) {
 8000400:	7bfb      	ldrb	r3, [r7, #15]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d004      	beq.n	8000410 <rc522_checkCard+0x28>
      //Card detected
      //Anti-collision, return card serial number 4 bytes
      status = rc522_antiColl(id);
 8000406:	6878      	ldr	r0, [r7, #4]
 8000408:	f000 f91e 	bl	8000648 <rc522_antiColl>
 800040c:	4603      	mov	r3, r0
 800040e:	73fb      	strb	r3, [r7, #15]
    }
    rc522_halt();      //Command card into hibernation
 8000410:	f000 f957 	bl	80006c2 <rc522_halt>

    return status;
 8000414:	7bfb      	ldrb	r3, [r7, #15]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3710      	adds	r7, #16
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <rc522_request>:

/**
 * @brief Request function
 */
bool rc522_request(uint8_t reqMode, uint8_t *tagType)
{
 800041e:	b580      	push	{r7, lr}
 8000420:	b086      	sub	sp, #24
 8000422:	af02      	add	r7, sp, #8
 8000424:	4603      	mov	r3, r0
 8000426:	6039      	str	r1, [r7, #0]
 8000428:	71fb      	strb	r3, [r7, #7]
  bool status=false;
 800042a:	2300      	movs	r3, #0
 800042c:	73fb      	strb	r3, [r7, #15]
  uint16_t backBits;
  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x07);
 800042e:	2107      	movs	r1, #7
 8000430:	200d      	movs	r0, #13
 8000432:	f7ff ff63 	bl	80002fc <rc522_regWrite8>
  tagType[0] = reqMode;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, tagType, 1, tagType, &backBits);
 800043c:	f107 030c 	add.w	r3, r7, #12
 8000440:	9300      	str	r3, [sp, #0]
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2201      	movs	r2, #1
 8000446:	6839      	ldr	r1, [r7, #0]
 8000448:	200c      	movs	r0, #12
 800044a:	f000 f813 	bl	8000474 <rc522_toCard>
 800044e:	4603      	mov	r3, r0
 8000450:	73fb      	strb	r3, [r7, #15]
  if ((status != true) || (backBits != 0x10)) {
 8000452:	7bfb      	ldrb	r3, [r7, #15]
 8000454:	f083 0301 	eor.w	r3, r3, #1
 8000458:	b2db      	uxtb	r3, r3
 800045a:	2b00      	cmp	r3, #0
 800045c:	d102      	bne.n	8000464 <rc522_request+0x46>
 800045e:	89bb      	ldrh	r3, [r7, #12]
 8000460:	2b10      	cmp	r3, #16
 8000462:	d001      	beq.n	8000468 <rc522_request+0x4a>
    status = false;
 8000464:	2300      	movs	r3, #0
 8000466:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8000468:	7bfb      	ldrb	r3, [r7, #15]
}
 800046a:	4618      	mov	r0, r3
 800046c:	3710      	adds	r7, #16
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
	...

08000474 <rc522_toCard>:
    uint8_t command,
    uint8_t* sendData,
    uint8_t sendLen,
    uint8_t* backData,
    uint16_t* backLen)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b088      	sub	sp, #32
 8000478:	af00      	add	r7, sp, #0
 800047a:	60b9      	str	r1, [r7, #8]
 800047c:	607b      	str	r3, [r7, #4]
 800047e:	4603      	mov	r3, r0
 8000480:	73fb      	strb	r3, [r7, #15]
 8000482:	4613      	mov	r3, r2
 8000484:	73bb      	strb	r3, [r7, #14]
  bool status = false;
 8000486:	2300      	movs	r3, #0
 8000488:	77fb      	strb	r3, [r7, #31]
  uint8_t irqEn = 0x00;
 800048a:	2300      	movs	r3, #0
 800048c:	77bb      	strb	r3, [r7, #30]
  uint8_t waitIRq = 0x00;
 800048e:	2300      	movs	r3, #0
 8000490:	777b      	strb	r3, [r7, #29]
  uint8_t lastBits;
  uint8_t n;
  uint16_t i;

  switch (command) {
 8000492:	7bfb      	ldrb	r3, [r7, #15]
 8000494:	2b0c      	cmp	r3, #12
 8000496:	d006      	beq.n	80004a6 <rc522_toCard+0x32>
 8000498:	2b0e      	cmp	r3, #14
 800049a:	d109      	bne.n	80004b0 <rc522_toCard+0x3c>
    case PCD_AUTHENT: {
      irqEn = 0x12;
 800049c:	2312      	movs	r3, #18
 800049e:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x10;
 80004a0:	2310      	movs	r3, #16
 80004a2:	777b      	strb	r3, [r7, #29]
      break;
 80004a4:	e005      	b.n	80004b2 <rc522_toCard+0x3e>
    }
    case PCD_TRANSCEIVE: {
      irqEn = 0x77;
 80004a6:	2377      	movs	r3, #119	@ 0x77
 80004a8:	77bb      	strb	r3, [r7, #30]
      waitIRq = 0x30;
 80004aa:	2330      	movs	r3, #48	@ 0x30
 80004ac:	777b      	strb	r3, [r7, #29]
      break;
 80004ae:	e000      	b.n	80004b2 <rc522_toCard+0x3e>
    }
    default:
      break;
 80004b0:	bf00      	nop
  }

  rc522_regWrite8(MFRC522_REG_COMM_IE_N, irqEn | 0x80);
 80004b2:	7fbb      	ldrb	r3, [r7, #30]
 80004b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80004b8:	b2db      	uxtb	r3, r3
 80004ba:	4619      	mov	r1, r3
 80004bc:	2002      	movs	r0, #2
 80004be:	f7ff ff1d 	bl	80002fc <rc522_regWrite8>
  rc522_clearBit(MFRC522_REG_COMM_IRQ, 0x80);
 80004c2:	2180      	movs	r1, #128	@ 0x80
 80004c4:	2004      	movs	r0, #4
 80004c6:	f7ff ff54 	bl	8000372 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);
 80004ca:	2180      	movs	r1, #128	@ 0x80
 80004cc:	200a      	movs	r0, #10
 80004ce:	f7ff ff36 	bl	800033e <rc522_setBit>

  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_IDLE);
 80004d2:	2100      	movs	r1, #0
 80004d4:	2001      	movs	r0, #1
 80004d6:	f7ff ff11 	bl	80002fc <rc522_regWrite8>

  //Writing data to the FIFO
  for (i = 0; i < sendLen; i++) {
 80004da:	2300      	movs	r3, #0
 80004dc:	837b      	strh	r3, [r7, #26]
 80004de:	e00a      	b.n	80004f6 <rc522_toCard+0x82>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, sendData[i]);
 80004e0:	8b7b      	ldrh	r3, [r7, #26]
 80004e2:	68ba      	ldr	r2, [r7, #8]
 80004e4:	4413      	add	r3, r2
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2009      	movs	r0, #9
 80004ec:	f7ff ff06 	bl	80002fc <rc522_regWrite8>
  for (i = 0; i < sendLen; i++) {
 80004f0:	8b7b      	ldrh	r3, [r7, #26]
 80004f2:	3301      	adds	r3, #1
 80004f4:	837b      	strh	r3, [r7, #26]
 80004f6:	7bbb      	ldrb	r3, [r7, #14]
 80004f8:	b29b      	uxth	r3, r3
 80004fa:	8b7a      	ldrh	r2, [r7, #26]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d3ef      	bcc.n	80004e0 <rc522_toCard+0x6c>
  }

  //Execute the command
  rc522_regWrite8(MFRC522_REG_COMMAND, command);
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4619      	mov	r1, r3
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff fef9 	bl	80002fc <rc522_regWrite8>
  if (command == PCD_TRANSCEIVE) {
 800050a:	7bfb      	ldrb	r3, [r7, #15]
 800050c:	2b0c      	cmp	r3, #12
 800050e:	d103      	bne.n	8000518 <rc522_toCard+0xa4>
    rc522_setBit(MFRC522_REG_BIT_FRAMING, 0x80);   //StartSend=1,transmission of data starts
 8000510:	2180      	movs	r1, #128	@ 0x80
 8000512:	200d      	movs	r0, #13
 8000514:	f7ff ff13 	bl	800033e <rc522_setBit>
  }

  //Waiting to receive data to complete
  i = 100;  //i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
 8000518:	2364      	movs	r3, #100	@ 0x64
 800051a:	837b      	strh	r3, [r7, #26]
  do {
    //CommIrqReg[7..0]
    //Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = rc522_regRead8(MFRC522_REG_COMM_IRQ);
 800051c:	2004      	movs	r0, #4
 800051e:	f7ff fec5 	bl	80002ac <rc522_regRead8>
 8000522:	4603      	mov	r3, r0
 8000524:	773b      	strb	r3, [r7, #28]
    i--;
 8000526:	8b7b      	ldrh	r3, [r7, #26]
 8000528:	3b01      	subs	r3, #1
 800052a:	837b      	strh	r3, [r7, #26]
  } while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 800052c:	8b7b      	ldrh	r3, [r7, #26]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d00a      	beq.n	8000548 <rc522_toCard+0xd4>
 8000532:	7f3b      	ldrb	r3, [r7, #28]
 8000534:	f003 0301 	and.w	r3, r3, #1
 8000538:	2b00      	cmp	r3, #0
 800053a:	d105      	bne.n	8000548 <rc522_toCard+0xd4>
 800053c:	7f3a      	ldrb	r2, [r7, #28]
 800053e:	7f7b      	ldrb	r3, [r7, #29]
 8000540:	4013      	ands	r3, r2
 8000542:	b2db      	uxtb	r3, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d0e9      	beq.n	800051c <rc522_toCard+0xa8>

  rc522_clearBit(MFRC522_REG_BIT_FRAMING, 0x80);     //StartSend=0
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	200d      	movs	r0, #13
 800054c:	f7ff ff11 	bl	8000372 <rc522_clearBit>

  if (i != 0)  {
 8000550:	8b7b      	ldrh	r3, [r7, #26]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d06d      	beq.n	8000632 <rc522_toCard+0x1be>
    if (!(rc522_regRead8(MFRC522_REG_ERROR) & 0x1B)) {
 8000556:	2006      	movs	r0, #6
 8000558:	f7ff fea8 	bl	80002ac <rc522_regRead8>
 800055c:	4603      	mov	r3, r0
 800055e:	f003 031b 	and.w	r3, r3, #27
 8000562:	2b00      	cmp	r3, #0
 8000564:	d160      	bne.n	8000628 <rc522_toCard+0x1b4>
      status = true;
 8000566:	2301      	movs	r3, #1
 8000568:	77fb      	strb	r3, [r7, #31]
      if (n & irqEn & 0x01) {
 800056a:	7f3a      	ldrb	r2, [r7, #28]
 800056c:	7fbb      	ldrb	r3, [r7, #30]
 800056e:	4013      	ands	r3, r2
 8000570:	b2db      	uxtb	r3, r3
 8000572:	f003 0301 	and.w	r3, r3, #1
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <rc522_toCard+0x10a>
        status = false;
 800057a:	2300      	movs	r3, #0
 800057c:	77fb      	strb	r3, [r7, #31]
      }

      if (command == PCD_TRANSCEIVE) {
 800057e:	7bfb      	ldrb	r3, [r7, #15]
 8000580:	2b0c      	cmp	r3, #12
 8000582:	d156      	bne.n	8000632 <rc522_toCard+0x1be>
        n = rc522_regRead8(MFRC522_REG_FIFO_LEVEL);
 8000584:	200a      	movs	r0, #10
 8000586:	f7ff fe91 	bl	80002ac <rc522_regRead8>
 800058a:	4603      	mov	r3, r0
 800058c:	773b      	strb	r3, [r7, #28]
        uint8_t l = n;
 800058e:	7f3b      	ldrb	r3, [r7, #28]
 8000590:	767b      	strb	r3, [r7, #25]
        lastBits = rc522_regRead8(MFRC522_REG_CONTROL) & 0x07;
 8000592:	200c      	movs	r0, #12
 8000594:	f7ff fe8a 	bl	80002ac <rc522_regRead8>
 8000598:	4603      	mov	r3, r0
 800059a:	f003 0307 	and.w	r3, r3, #7
 800059e:	763b      	strb	r3, [r7, #24]
        if (lastBits) {
 80005a0:	7e3b      	ldrb	r3, [r7, #24]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d00b      	beq.n	80005be <rc522_toCard+0x14a>
          *backLen = (n - 1) * 8 + lastBits;
 80005a6:	7f3b      	ldrb	r3, [r7, #28]
 80005a8:	3b01      	subs	r3, #1
 80005aa:	b29b      	uxth	r3, r3
 80005ac:	00db      	lsls	r3, r3, #3
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	7e3b      	ldrb	r3, [r7, #24]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4413      	add	r3, r2
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005ba:	801a      	strh	r2, [r3, #0]
 80005bc:	e005      	b.n	80005ca <rc522_toCard+0x156>
        } else {
          *backLen = n * 8;
 80005be:	7f3b      	ldrb	r3, [r7, #28]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	00db      	lsls	r3, r3, #3
 80005c4:	b29a      	uxth	r2, r3
 80005c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80005c8:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0) {
 80005ca:	7f3b      	ldrb	r3, [r7, #28]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <rc522_toCard+0x160>
          n = 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	773b      	strb	r3, [r7, #28]
        }
        if (n > MFRC522_MAX_LEN) {
 80005d4:	7f3b      	ldrb	r3, [r7, #28]
 80005d6:	2b10      	cmp	r3, #16
 80005d8:	d901      	bls.n	80005de <rc522_toCard+0x16a>
          n = MFRC522_MAX_LEN;
 80005da:	2310      	movs	r3, #16
 80005dc:	773b      	strb	r3, [r7, #28]
        }

        //Reading the received data in FIFO
        for (i = 0; i < n; i++) {
 80005de:	2300      	movs	r3, #0
 80005e0:	837b      	strh	r3, [r7, #26]
 80005e2:	e014      	b.n	800060e <rc522_toCard+0x19a>
          uint8_t d = rc522_regRead8(MFRC522_REG_FIFO_DATA);
 80005e4:	2009      	movs	r0, #9
 80005e6:	f7ff fe61 	bl	80002ac <rc522_regRead8>
 80005ea:	4603      	mov	r3, r0
 80005ec:	75fb      	strb	r3, [r7, #23]
          if (l == 4)
 80005ee:	7e7b      	ldrb	r3, [r7, #25]
 80005f0:	2b04      	cmp	r3, #4
 80005f2:	d104      	bne.n	80005fe <rc522_toCard+0x18a>
            printf("%02x ", d);
 80005f4:	7dfb      	ldrb	r3, [r7, #23]
 80005f6:	4619      	mov	r1, r3
 80005f8:	4810      	ldr	r0, [pc, #64]	@ (800063c <rc522_toCard+0x1c8>)
 80005fa:	f001 f979 	bl	80018f0 <iprintf>
          backData[i] = d;
 80005fe:	8b7b      	ldrh	r3, [r7, #26]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	4413      	add	r3, r2
 8000604:	7dfa      	ldrb	r2, [r7, #23]
 8000606:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < n; i++) {
 8000608:	8b7b      	ldrh	r3, [r7, #26]
 800060a:	3301      	adds	r3, #1
 800060c:	837b      	strh	r3, [r7, #26]
 800060e:	7f3b      	ldrb	r3, [r7, #28]
 8000610:	b29b      	uxth	r3, r3
 8000612:	8b7a      	ldrh	r2, [r7, #26]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3e5      	bcc.n	80005e4 <rc522_toCard+0x170>
        }
        if (l==4)
 8000618:	7e7b      	ldrb	r3, [r7, #25]
 800061a:	2b04      	cmp	r3, #4
 800061c:	d102      	bne.n	8000624 <rc522_toCard+0x1b0>
          printf("\r\n");
 800061e:	4808      	ldr	r0, [pc, #32]	@ (8000640 <rc522_toCard+0x1cc>)
 8000620:	f001 f9ce 	bl	80019c0 <puts>
        return status;
 8000624:	7ffb      	ldrb	r3, [r7, #31]
 8000626:	e005      	b.n	8000634 <rc522_toCard+0x1c0>
      }
    } else {
      printf("error\r\n");
 8000628:	4806      	ldr	r0, [pc, #24]	@ (8000644 <rc522_toCard+0x1d0>)
 800062a:	f001 f9c9 	bl	80019c0 <puts>
      status = false;
 800062e:	2300      	movs	r3, #0
 8000630:	77fb      	strb	r3, [r7, #31]
    }
  }

  return status;
 8000632:	7ffb      	ldrb	r3, [r7, #31]
}
 8000634:	4618      	mov	r0, r3
 8000636:	3720      	adds	r7, #32
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	080026a0 	.word	0x080026a0
 8000640:	080026a8 	.word	0x080026a8
 8000644:	080026ac 	.word	0x080026ac

08000648 <rc522_antiColl>:

bool rc522_antiColl(uint8_t* serNum)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af02      	add	r7, sp, #8
 800064e:	6078      	str	r0, [r7, #4]
  bool status;
  uint8_t i;
  uint8_t serNumCheck = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	737b      	strb	r3, [r7, #13]
  uint16_t unLen;
  //for (i = 0; i < 4; i++)
//    printf("Anticoll In %d: 0x%02x\r\n", i, serNum[i]);


  rc522_regWrite8(MFRC522_REG_BIT_FRAMING, 0x00);    //TxLastBists = BitFramingReg[2..0]
 8000654:	2100      	movs	r1, #0
 8000656:	200d      	movs	r0, #13
 8000658:	f7ff fe50 	bl	80002fc <rc522_regWrite8>

  serNum[0] = PICC_ANTICOLL;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	2293      	movs	r2, #147	@ 0x93
 8000660:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	3301      	adds	r3, #1
 8000666:	2220      	movs	r2, #32
 8000668:	701a      	strb	r2, [r3, #0]
  status = rc522_toCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 800066a:	f107 030a 	add.w	r3, r7, #10
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	2202      	movs	r2, #2
 8000674:	6879      	ldr	r1, [r7, #4]
 8000676:	200c      	movs	r0, #12
 8000678:	f7ff fefc 	bl	8000474 <rc522_toCard>
 800067c:	4603      	mov	r3, r0
 800067e:	73fb      	strb	r3, [r7, #15]

  //for (i = 0; i < 4; i++)
//      printf("Anticoll ToCard %d: 0x%02x\r\n", i, serNum[i]);

  if (status == true) {
 8000680:	7bfb      	ldrb	r3, [r7, #15]
 8000682:	2b00      	cmp	r3, #0
 8000684:	d018      	beq.n	80006b8 <rc522_antiColl+0x70>
    //Check card serial number
    for (i = 0; i < 4; i++) {
 8000686:	2300      	movs	r3, #0
 8000688:	73bb      	strb	r3, [r7, #14]
 800068a:	e009      	b.n	80006a0 <rc522_antiColl+0x58>
      serNumCheck ^= serNum[i];
 800068c:	7bbb      	ldrb	r3, [r7, #14]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4413      	add	r3, r2
 8000692:	781a      	ldrb	r2, [r3, #0]
 8000694:	7b7b      	ldrb	r3, [r7, #13]
 8000696:	4053      	eors	r3, r2
 8000698:	737b      	strb	r3, [r7, #13]
    for (i = 0; i < 4; i++) {
 800069a:	7bbb      	ldrb	r3, [r7, #14]
 800069c:	3301      	adds	r3, #1
 800069e:	73bb      	strb	r3, [r7, #14]
 80006a0:	7bbb      	ldrb	r3, [r7, #14]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d9f2      	bls.n	800068c <rc522_antiColl+0x44>
    }
    if (serNumCheck != serNum[i]) {
 80006a6:	7bbb      	ldrb	r3, [r7, #14]
 80006a8:	687a      	ldr	r2, [r7, #4]
 80006aa:	4413      	add	r3, r2
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	7b7a      	ldrb	r2, [r7, #13]
 80006b0:	429a      	cmp	r2, r3
 80006b2:	d001      	beq.n	80006b8 <rc522_antiColl+0x70>
      status = false;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3710      	adds	r7, #16
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <rc522_halt>:

void rc522_halt(void)
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	b084      	sub	sp, #16
 80006c6:	af02      	add	r7, sp, #8
  uint16_t unLen;
  uint8_t buff[4];

  buff[0] = PICC_HALT;
 80006c8:	2350      	movs	r3, #80	@ 0x50
 80006ca:	703b      	strb	r3, [r7, #0]
  buff[1] = 0;
 80006cc:	2300      	movs	r3, #0
 80006ce:	707b      	strb	r3, [r7, #1]
  rc522_calculateCRC(buff, 2, &buff[2]);
 80006d0:	463b      	mov	r3, r7
 80006d2:	1c9a      	adds	r2, r3, #2
 80006d4:	463b      	mov	r3, r7
 80006d6:	2102      	movs	r1, #2
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 f80d 	bl	80006f8 <rc522_calculateCRC>

  rc522_toCard(PCD_TRANSCEIVE, buff, 4, buff, &unLen);
 80006de:	463a      	mov	r2, r7
 80006e0:	4639      	mov	r1, r7
 80006e2:	1dbb      	adds	r3, r7, #6
 80006e4:	9300      	str	r3, [sp, #0]
 80006e6:	4613      	mov	r3, r2
 80006e8:	2204      	movs	r2, #4
 80006ea:	200c      	movs	r0, #12
 80006ec:	f7ff fec2 	bl	8000474 <rc522_toCard>
}
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <rc522_calculateCRC>:

void rc522_calculateCRC(uint8_t*  pIndata, uint8_t len, uint8_t* pOutData)
{
 80006f8:	b590      	push	{r4, r7, lr}
 80006fa:	b087      	sub	sp, #28
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	60f8      	str	r0, [r7, #12]
 8000700:	460b      	mov	r3, r1
 8000702:	607a      	str	r2, [r7, #4]
 8000704:	72fb      	strb	r3, [r7, #11]
  uint8_t i, n;

  rc522_clearBit(MFRC522_REG_DIV_IRQ, 0x04);     //CRCIrq = 0
 8000706:	2104      	movs	r1, #4
 8000708:	2005      	movs	r0, #5
 800070a:	f7ff fe32 	bl	8000372 <rc522_clearBit>
  rc522_setBit(MFRC522_REG_FIFO_LEVEL, 0x80);      //Clear the FIFO pointer
 800070e:	2180      	movs	r1, #128	@ 0x80
 8000710:	200a      	movs	r0, #10
 8000712:	f7ff fe14 	bl	800033e <rc522_setBit>
  //Write_MFRC522(CommandReg, PCD_IDLE);

  //Writing data to the FIFO
  for (i = 0; i < len; i++) {
 8000716:	2300      	movs	r3, #0
 8000718:	75fb      	strb	r3, [r7, #23]
 800071a:	e00a      	b.n	8000732 <rc522_calculateCRC+0x3a>
    rc522_regWrite8(MFRC522_REG_FIFO_DATA, *(pIndata+i));
 800071c:	7dfb      	ldrb	r3, [r7, #23]
 800071e:	68fa      	ldr	r2, [r7, #12]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4619      	mov	r1, r3
 8000726:	2009      	movs	r0, #9
 8000728:	f7ff fde8 	bl	80002fc <rc522_regWrite8>
  for (i = 0; i < len; i++) {
 800072c:	7dfb      	ldrb	r3, [r7, #23]
 800072e:	3301      	adds	r3, #1
 8000730:	75fb      	strb	r3, [r7, #23]
 8000732:	7dfa      	ldrb	r2, [r7, #23]
 8000734:	7afb      	ldrb	r3, [r7, #11]
 8000736:	429a      	cmp	r2, r3
 8000738:	d3f0      	bcc.n	800071c <rc522_calculateCRC+0x24>
  }
  rc522_regWrite8(MFRC522_REG_COMMAND, PCD_CALCCRC);
 800073a:	2103      	movs	r1, #3
 800073c:	2001      	movs	r0, #1
 800073e:	f7ff fddd 	bl	80002fc <rc522_regWrite8>

  //Wait CRC calculation is complete
  i = 0xFF;
 8000742:	23ff      	movs	r3, #255	@ 0xff
 8000744:	75fb      	strb	r3, [r7, #23]
  do {
    n = rc522_regRead8(MFRC522_REG_DIV_IRQ);
 8000746:	2005      	movs	r0, #5
 8000748:	f7ff fdb0 	bl	80002ac <rc522_regRead8>
 800074c:	4603      	mov	r3, r0
 800074e:	75bb      	strb	r3, [r7, #22]
    i--;
 8000750:	7dfb      	ldrb	r3, [r7, #23]
 8000752:	3b01      	subs	r3, #1
 8000754:	75fb      	strb	r3, [r7, #23]
  } while ((i!=0) && !(n&0x04));      //CRCIrq = 1
 8000756:	7dfb      	ldrb	r3, [r7, #23]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d004      	beq.n	8000766 <rc522_calculateCRC+0x6e>
 800075c:	7dbb      	ldrb	r3, [r7, #22]
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	2b00      	cmp	r3, #0
 8000764:	d0ef      	beq.n	8000746 <rc522_calculateCRC+0x4e>

  //Read CRC calculation result
  pOutData[0] = rc522_regRead8(MFRC522_REG_CRC_RESULT_L);
 8000766:	2022      	movs	r0, #34	@ 0x22
 8000768:	f7ff fda0 	bl	80002ac <rc522_regRead8>
 800076c:	4603      	mov	r3, r0
 800076e:	461a      	mov	r2, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	701a      	strb	r2, [r3, #0]
  pOutData[1] = rc522_regRead8(MFRC522_REG_CRC_RESULT_M);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	1c5c      	adds	r4, r3, #1
 8000778:	2021      	movs	r0, #33	@ 0x21
 800077a:	f7ff fd97 	bl	80002ac <rc522_regRead8>
 800077e:	4603      	mov	r3, r0
 8000780:	7023      	strb	r3, [r4, #0]
}
 8000782:	bf00      	nop
 8000784:	371c      	adds	r7, #28
 8000786:	46bd      	mov	sp, r7
 8000788:	bd90      	pop	{r4, r7, pc}
	...

0800078c <rc522_init>:
  }
  return true;
}

void rc522_init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
	 * STM32 ->RFID
	 * SPI  -> SPI
	 * PA8  ->RST
	 * PB0  ->CS
	 * */
  SPI_Init();
 8000792:	f000 fdf3 	bl	800137c <SPI_Init>
  GPIOA->MODER|=GPIO_MODER_MODE8_0;
 8000796:	4b2d      	ldr	r3, [pc, #180]	@ (800084c <rc522_init+0xc0>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a2c      	ldr	r2, [pc, #176]	@ (800084c <rc522_init+0xc0>)
 800079c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80007a0:	6013      	str	r3, [r2, #0]
  GPIOA->MODER&=~GPIO_MODER_MODE8_1;
 80007a2:	4b2a      	ldr	r3, [pc, #168]	@ (800084c <rc522_init+0xc0>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	4a29      	ldr	r2, [pc, #164]	@ (800084c <rc522_init+0xc0>)
 80007a8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80007ac:	6013      	str	r3, [r2, #0]

  RCC->AHB1ENR|=RCC_AHB1ENR_GPIOBEN;
 80007ae:	4b28      	ldr	r3, [pc, #160]	@ (8000850 <rc522_init+0xc4>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b2:	4a27      	ldr	r2, [pc, #156]	@ (8000850 <rc522_init+0xc4>)
 80007b4:	f043 0302 	orr.w	r3, r3, #2
 80007b8:	6313      	str	r3, [r2, #48]	@ 0x30

  GPIOB->MODER|=GPIO_MODER_MODE0_0;
 80007ba:	4b26      	ldr	r3, [pc, #152]	@ (8000854 <rc522_init+0xc8>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <rc522_init+0xc8>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6013      	str	r3, [r2, #0]
  GPIOB->MODER&=~GPIO_MODER_MODE0_1;
 80007c6:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <rc522_init+0xc8>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	4a22      	ldr	r2, [pc, #136]	@ (8000854 <rc522_init+0xc8>)
 80007cc:	f023 0302 	bic.w	r3, r3, #2
 80007d0:	6013      	str	r3, [r2, #0]
  GPIOA->BSRR=GPIO_BSRR_BR8;
 80007d2:	4b1e      	ldr	r3, [pc, #120]	@ (800084c <rc522_init+0xc0>)
 80007d4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80007d8:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 80007da:	2300      	movs	r3, #0
 80007dc:	607b      	str	r3, [r7, #4]
 80007de:	e002      	b.n	80007e6 <rc522_init+0x5a>
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3301      	adds	r3, #1
 80007e4:	607b      	str	r3, [r7, #4]
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a1b      	ldr	r2, [pc, #108]	@ (8000858 <rc522_init+0xcc>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	ddf8      	ble.n	80007e0 <rc522_init+0x54>
  GPIOA->BSRR=GPIO_BSRR_BS8;
 80007ee:	4b17      	ldr	r3, [pc, #92]	@ (800084c <rc522_init+0xc0>)
 80007f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80007f4:	619a      	str	r2, [r3, #24]
  for(volatile int i=0;i<100000;i++);
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	e002      	b.n	8000802 <rc522_init+0x76>
 80007fc:	683b      	ldr	r3, [r7, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	603b      	str	r3, [r7, #0]
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	4a14      	ldr	r2, [pc, #80]	@ (8000858 <rc522_init+0xcc>)
 8000806:	4293      	cmp	r3, r2
 8000808:	ddf8      	ble.n	80007fc <rc522_init+0x70>
  rc522_reset();
 800080a:	f7ff fdd0 	bl	80003ae <rc522_reset>

  rc522_regWrite8(MFRC522_REG_T_MODE, 0x80);
 800080e:	2180      	movs	r1, #128	@ 0x80
 8000810:	202a      	movs	r0, #42	@ 0x2a
 8000812:	f7ff fd73 	bl	80002fc <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_PRESCALER, 0xA9);
 8000816:	21a9      	movs	r1, #169	@ 0xa9
 8000818:	202b      	movs	r0, #43	@ 0x2b
 800081a:	f7ff fd6f 	bl	80002fc <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_L, 0xE8);
 800081e:	21e8      	movs	r1, #232	@ 0xe8
 8000820:	202d      	movs	r0, #45	@ 0x2d
 8000822:	f7ff fd6b 	bl	80002fc <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_T_RELOAD_H, 0x03);
 8000826:	2103      	movs	r1, #3
 8000828:	202c      	movs	r0, #44	@ 0x2c
 800082a:	f7ff fd67 	bl	80002fc <rc522_regWrite8>


  rc522_regWrite8(MFRC522_REG_TX_AUTO, 0x40);
 800082e:	2140      	movs	r1, #64	@ 0x40
 8000830:	2015      	movs	r0, #21
 8000832:	f7ff fd63 	bl	80002fc <rc522_regWrite8>
  rc522_regWrite8(MFRC522_REG_MODE, 0x3D);
 8000836:	213d      	movs	r1, #61	@ 0x3d
 8000838:	2011      	movs	r0, #17
 800083a:	f7ff fd5f 	bl	80002fc <rc522_regWrite8>

  rc522_antennaON();   //Open the antenna
 800083e:	f7ff fdbe 	bl	80003be <rc522_antennaON>
}
 8000842:	bf00      	nop
 8000844:	3708      	adds	r7, #8
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40020000 	.word	0x40020000
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400
 8000858:	0001869f 	.word	0x0001869f

0800085c <systick_init_ms>:
#include "stm32f4xx.h"                  // Device header


volatile uint32_t ms,rms;
void systick_init_ms(uint32_t freq)
	{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000864:	b672      	cpsid	i
}
 8000866:	bf00      	nop
	__disable_irq();
	SysTick->LOAD=(freq/1000)-1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	4a0a      	ldr	r2, [pc, #40]	@ (8000894 <systick_init_ms+0x38>)
 800086c:	fba2 2303 	umull	r2, r3, r2, r3
 8000870:	099b      	lsrs	r3, r3, #6
 8000872:	4a09      	ldr	r2, [pc, #36]	@ (8000898 <systick_init_ms+0x3c>)
 8000874:	3b01      	subs	r3, #1
 8000876:	6053      	str	r3, [r2, #4]
	SysTick->VAL=0;
 8000878:	4b07      	ldr	r3, [pc, #28]	@ (8000898 <systick_init_ms+0x3c>)
 800087a:	2200      	movs	r2, #0
 800087c:	609a      	str	r2, [r3, #8]
	SysTick->CTRL=7; //0b00000111;
 800087e:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <systick_init_ms+0x3c>)
 8000880:	2207      	movs	r2, #7
 8000882:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000884:	b662      	cpsie	i
}
 8000886:	bf00      	nop
	__enable_irq();	
}
 8000888:	bf00      	nop
 800088a:	370c      	adds	r7, #12
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	10624dd3 	.word	0x10624dd3
 8000898:	e000e010 	.word	0xe000e010

0800089c <millis>:

uint32_t millis(void)
	{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
	__disable_irq();
	rms=ms; //store current ms in rms
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <millis+0x24>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a06      	ldr	r2, [pc, #24]	@ (80008c4 <millis+0x28>)
 80008aa:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80008ac:	b662      	cpsie	i
}
 80008ae:	bf00      	nop
	__enable_irq();
	return rms;
 80008b0:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <millis+0x28>)
 80008b2:	681b      	ldr	r3, [r3, #0]
	}
 80008b4:	4618      	mov	r0, r3
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	2000007c 	.word	0x2000007c
 80008c4:	20000080 	.word	0x20000080

080008c8 <SysTick_Handler>:

void SysTick_Handler(void){
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
//GPIOA->ODR^=GPIO_ODR_OD5;
ms++;
 80008cc:	4b04      	ldr	r3, [pc, #16]	@ (80008e0 <SysTick_Handler+0x18>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	3301      	adds	r3, #1
 80008d2:	4a03      	ldr	r2, [pc, #12]	@ (80008e0 <SysTick_Handler+0x18>)
 80008d4:	6013      	str	r3, [r2, #0]
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr
 80008e0:	2000007c 	.word	0x2000007c

080008e4 <DelayMs>:
uint32_t DWT_Init(void);

#ifndef DELAY_MS
#define DELAY_MS

static inline void DelayMs(volatile uint32_t ms) {
 80008e4:	b480      	push	{r7}
 80008e6:	b085      	sub	sp, #20
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 80008ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000928 <DelayMs+0x44>)
 80008ee:	685b      	ldr	r3, [r3, #4]
 80008f0:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 80008f2:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <DelayMs+0x48>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	4a0e      	ldr	r2, [pc, #56]	@ (8000930 <DelayMs+0x4c>)
 80008f8:	fba2 2303 	umull	r2, r3, r2, r3
 80008fc:	099b      	lsrs	r3, r3, #6
 80008fe:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	fb02 f303 	mul.w	r3, r2, r3
 8000908:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800090a:	bf00      	nop
 800090c:	4b06      	ldr	r3, [pc, #24]	@ (8000928 <DelayMs+0x44>)
 800090e:	685a      	ldr	r2, [r3, #4]
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	1ad2      	subs	r2, r2, r3
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	429a      	cmp	r2, r3
 8000918:	d3f8      	bcc.n	800090c <DelayMs+0x28>
}
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e0001000 	.word	0xe0001000
 800092c:	20000000 	.word	0x20000000
 8000930:	10624dd3 	.word	0x10624dd3

08000934 <I2CStart>:
 *      Author: Nilesh
 */

#include "i2c.h"

void I2CStart() {
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_START;
 8000938:	4b09      	ldr	r3, [pc, #36]	@ (8000960 <I2CStart+0x2c>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a08      	ldr	r2, [pc, #32]	@ (8000960 <I2CStart+0x2c>)
 800093e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000942:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR1 & I2C_SR1_SB));
 8000944:	bf00      	nop
 8000946:	4b06      	ldr	r3, [pc, #24]	@ (8000960 <I2CStart+0x2c>)
 8000948:	695b      	ldr	r3, [r3, #20]
 800094a:	f003 0301 	and.w	r3, r3, #1
 800094e:	2b00      	cmp	r3, #0
 8000950:	d0f9      	beq.n	8000946 <I2CStart+0x12>
}
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40005400 	.word	0x40005400

08000964 <I2CStop>:

void I2CRepeatStart() {
	I2CStart();
}

void I2CStop() {
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
    I2C1->CR1 |= I2C_CR1_STOP;
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <I2CStop+0x2c>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a08      	ldr	r2, [pc, #32]	@ (8000990 <I2CStop+0x2c>)
 800096e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000972:	6013      	str	r3, [r2, #0]
    while(!(I2C1->SR2 & I2C_SR2_BUSY));
 8000974:	bf00      	nop
 8000976:	4b06      	ldr	r3, [pc, #24]	@ (8000990 <I2CStop+0x2c>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	2b00      	cmp	r3, #0
 8000980:	d0f9      	beq.n	8000976 <I2CStop+0x12>
}
 8000982:	bf00      	nop
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	40005400 	.word	0x40005400

08000994 <I2CSendSlaveAddress>:

void I2CSendSlaveAddress(uint8_t slaveaddr) {
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr
    // wait until address is sent
    I2C1->DR = slaveaddr;
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <I2CSendSlaveAddress+0x34>)
 80009a0:	79fb      	ldrb	r3, [r7, #7]
 80009a2:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 80009a4:	bf00      	nop
 80009a6:	4b08      	ldr	r3, [pc, #32]	@ (80009c8 <I2CSendSlaveAddress+0x34>)
 80009a8:	695b      	ldr	r3, [r3, #20]
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d0f9      	beq.n	80009a6 <I2CSendSlaveAddress+0x12>
    // dummy read to clear flags
    (void)I2C1->SR1;
 80009b2:	4b05      	ldr	r3, [pc, #20]	@ (80009c8 <I2CSendSlaveAddress+0x34>)
 80009b4:	695b      	ldr	r3, [r3, #20]
    (void)I2C1->SR2; // clear addr condition
 80009b6:	4b04      	ldr	r3, [pc, #16]	@ (80009c8 <I2CSendSlaveAddress+0x34>)
 80009b8:	699b      	ldr	r3, [r3, #24]
}
 80009ba:	bf00      	nop
 80009bc:	370c      	adds	r7, #12
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop
 80009c8:	40005400 	.word	0x40005400

080009cc <I2CSendData>:

void I2CSendData(uint8_t val) {
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	4603      	mov	r3, r0
 80009d4:	71fb      	strb	r3, [r7, #7]
    // send data in write mode
    // wait until address is sent
    while (!(I2C1->SR1 & I2C_SR1_TXE));
 80009d6:	bf00      	nop
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <I2CSendData+0x3c>)
 80009da:	695b      	ldr	r3, [r3, #20]
 80009dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d0f9      	beq.n	80009d8 <I2CSendData+0xc>
    // write dr and clear flags
    I2C1->DR = val;
 80009e4:	4a08      	ldr	r2, [pc, #32]	@ (8000a08 <I2CSendData+0x3c>)
 80009e6:	79fb      	ldrb	r3, [r7, #7]
 80009e8:	6113      	str	r3, [r2, #16]
    // wait until data byte is transferred
    while (!(I2C1->SR1 & I2C_SR1_BTF));
 80009ea:	bf00      	nop
 80009ec:	4b06      	ldr	r3, [pc, #24]	@ (8000a08 <I2CSendData+0x3c>)
 80009ee:	695b      	ldr	r3, [r3, #20]
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0f9      	beq.n	80009ec <I2CSendData+0x20>
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	370c      	adds	r7, #12
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	40005400 	.word	0x40005400

08000a0c <I2CIsDeviceReady>:
	// read content and clear flags
	val = I2C1->DR;
	return val;
}

int I2CIsDeviceReady(uint8_t slaveaddr) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]
    // send slaveaddr of write
	slaveaddr &= ~BV(0);
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	f023 0301 	bic.w	r3, r3, #1
 8000a1c:	71fb      	strb	r3, [r7, #7]
    // wait until address is sent
    I2C1->DR = slaveaddr;
 8000a1e:	4a09      	ldr	r2, [pc, #36]	@ (8000a44 <I2CIsDeviceReady+0x38>)
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	6113      	str	r3, [r2, #16]
    while (!(I2C1->SR1 & I2C_SR1_ADDR));
 8000a24:	bf00      	nop
 8000a26:	4b07      	ldr	r3, [pc, #28]	@ (8000a44 <I2CIsDeviceReady+0x38>)
 8000a28:	695b      	ldr	r3, [r3, #20]
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d0f9      	beq.n	8000a26 <I2CIsDeviceReady+0x1a>
    // dummy read to clear flags
    (void)I2C1->SR2; // clear addr condition
 8000a32:	4b04      	ldr	r3, [pc, #16]	@ (8000a44 <I2CIsDeviceReady+0x38>)
 8000a34:	699b      	ldr	r3, [r3, #24]
	return 1;
 8000a36:	2301      	movs	r3, #1
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	370c      	adds	r7, #12
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr
 8000a44:	40005400 	.word	0x40005400

08000a48 <I2CInit>:

void I2CInit() {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
    // enable GPIOB clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000a4c:	4b43      	ldr	r3, [pc, #268]	@ (8000b5c <I2CInit+0x114>)
 8000a4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a50:	4a42      	ldr	r2, [pc, #264]	@ (8000b5c <I2CInit+0x114>)
 8000a52:	f043 0302 	orr.w	r3, r3, #2
 8000a56:	6313      	str	r3, [r2, #48]	@ 0x30
	DelayMs(50);
 8000a58:	2032      	movs	r0, #50	@ 0x32
 8000a5a:	f7ff ff43 	bl	80008e4 <DelayMs>

    // setup I2C pins
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN;
 8000a5e:	4b3f      	ldr	r3, [pc, #252]	@ (8000b5c <I2CInit+0x114>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a62:	4a3e      	ldr	r2, [pc, #248]	@ (8000b5c <I2CInit+0x114>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	6313      	str	r3, [r2, #48]	@ 0x30
    GPIOB->MODER &= ~(3U << I2C1_SCL*2); // PB6
 8000a6a:	4b3d      	ldr	r3, [pc, #244]	@ (8000b60 <I2CInit+0x118>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4a3c      	ldr	r2, [pc, #240]	@ (8000b60 <I2CInit+0x118>)
 8000a70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a74:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SCL*2); // AF
 8000a76:	4b3a      	ldr	r3, [pc, #232]	@ (8000b60 <I2CInit+0x118>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4a39      	ldr	r2, [pc, #228]	@ (8000b60 <I2CInit+0x118>)
 8000a7c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000a80:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SCL);   // open-drain
 8000a82:	4b37      	ldr	r3, [pc, #220]	@ (8000b60 <I2CInit+0x118>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	4a36      	ldr	r2, [pc, #216]	@ (8000b60 <I2CInit+0x118>)
 8000a88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a8c:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SCL*2); // no pull-up/down
 8000a8e:	4b34      	ldr	r3, [pc, #208]	@ (8000b60 <I2CInit+0x118>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	4a33      	ldr	r2, [pc, #204]	@ (8000b60 <I2CInit+0x118>)
 8000a94:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000a98:	60d3      	str	r3, [r2, #12]
    GPIOB->MODER &= ~(3U << I2C1_SDA*2); // PB7
 8000a9a:	4b31      	ldr	r3, [pc, #196]	@ (8000b60 <I2CInit+0x118>)
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a30      	ldr	r2, [pc, #192]	@ (8000b60 <I2CInit+0x118>)
 8000aa0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa4:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |=  (2 << I2C1_SDA*2); // AF
 8000aa6:	4b2e      	ldr	r3, [pc, #184]	@ (8000b60 <I2CInit+0x118>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a2d      	ldr	r2, [pc, #180]	@ (8000b60 <I2CInit+0x118>)
 8000aac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ab0:	6013      	str	r3, [r2, #0]
    GPIOB->OTYPER |= (1 << I2C1_SDA);   // open-drain
 8000ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b60 <I2CInit+0x118>)
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b60 <I2CInit+0x118>)
 8000ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000abc:	6053      	str	r3, [r2, #4]
    GPIOB->PUPDR &= ~(3U << I2C1_SDA*2); // no pull-up/down
 8000abe:	4b28      	ldr	r3, [pc, #160]	@ (8000b60 <I2CInit+0x118>)
 8000ac0:	68db      	ldr	r3, [r3, #12]
 8000ac2:	4a27      	ldr	r2, [pc, #156]	@ (8000b60 <I2CInit+0x118>)
 8000ac4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ac8:	60d3      	str	r3, [r2, #12]

    // choose AF4 for I2C1 in Alternate Function registers
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL6_Pos); // for pin 6
 8000aca:	4b25      	ldr	r3, [pc, #148]	@ (8000b60 <I2CInit+0x118>)
 8000acc:	6a1b      	ldr	r3, [r3, #32]
 8000ace:	4a24      	ldr	r2, [pc, #144]	@ (8000b60 <I2CInit+0x118>)
 8000ad0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000ad4:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[0] |= (4 << GPIO_AFRL_AFSEL7_Pos); // for pin 7
 8000ad6:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <I2CInit+0x118>)
 8000ad8:	6a1b      	ldr	r3, [r3, #32]
 8000ada:	4a21      	ldr	r2, [pc, #132]	@ (8000b60 <I2CInit+0x118>)
 8000adc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000ae0:	6213      	str	r3, [r2, #32]

    // enable I2C clock
	RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8000b5c <I2CInit+0x114>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	4a1d      	ldr	r2, [pc, #116]	@ (8000b5c <I2CInit+0x114>)
 8000ae8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000aec:	6413      	str	r3, [r2, #64]	@ 0x40
	DelayMs(50);
 8000aee:	2032      	movs	r0, #50	@ 0x32
 8000af0:	f7ff fef8 	bl	80008e4 <DelayMs>
    // reset and clear reg
    I2C1->CR1 = I2C_CR1_SWRST;
 8000af4:	4b1b      	ldr	r3, [pc, #108]	@ (8000b64 <I2CInit+0x11c>)
 8000af6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000afa:	601a      	str	r2, [r3, #0]
    I2C1->CR1 = 0;
 8000afc:	4b19      	ldr	r3, [pc, #100]	@ (8000b64 <I2CInit+0x11c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	601a      	str	r2, [r3, #0]

    I2C1->CR2 &= ~(I2C_CR2_ITERREN); // disable error interrupt
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <I2CInit+0x11c>)
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	4a17      	ldr	r2, [pc, #92]	@ (8000b64 <I2CInit+0x11c>)
 8000b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000b0c:	6053      	str	r3, [r2, #4]
    I2C1->CCR &= ~(1 << I2C_CCR_FS_Pos); // standard mode (100 khz)
 8000b0e:	4b15      	ldr	r3, [pc, #84]	@ (8000b64 <I2CInit+0x11c>)
 8000b10:	69db      	ldr	r3, [r3, #28]
 8000b12:	4a14      	ldr	r2, [pc, #80]	@ (8000b64 <I2CInit+0x11c>)
 8000b14:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000b18:	61d3      	str	r3, [r2, #28]
    // Enable Ack
    I2C1->CR1 |= (1<<I2C_CR1_ACK_Pos);
 8000b1a:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <I2CInit+0x11c>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a11      	ldr	r2, [pc, #68]	@ (8000b64 <I2CInit+0x11c>)
 8000b20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b24:	6013      	str	r3, [r2, #0]
    // Thigh and Tlow needs to be 5us each

    // Let's pick fPCLK1 = 16Mhz, TPCLK1 = 1/16Mhz = 62.5ns
    // Thigh = CCR * TPCLK1 => 5us = CCR * 62.5ns
    // CCR = 80
    I2C1->CR2 |= (16 << I2C_CR2_FREQ_Pos); // 16Mhz PCLK
 8000b26:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <I2CInit+0x11c>)
 8000b28:	685b      	ldr	r3, [r3, #4]
 8000b2a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b64 <I2CInit+0x11c>)
 8000b2c:	f043 0310 	orr.w	r3, r3, #16
 8000b30:	6053      	str	r3, [r2, #4]
    I2C1->CCR |= (80 << I2C_CCR_CCR_Pos);
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <I2CInit+0x11c>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	4a0b      	ldr	r2, [pc, #44]	@ (8000b64 <I2CInit+0x11c>)
 8000b38:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8000b3c:	61d3      	str	r3, [r2, #28]
    // Maximum rise time.
    // Calculation is (maximum_rise_time / Tpclk) + 1
    // In SM mode maximum allowed SCL rise time is 1000ns
    // For TPCLK1 = 62.5ns => (1000ns / 62.5ns) + 1 = 16 + 1 = 17
    I2C1->TRISE |= (17 << I2C_TRISE_TRISE_Pos); // program Trise to 17 for 100khz
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <I2CInit+0x11c>)
 8000b40:	6a1b      	ldr	r3, [r3, #32]
 8000b42:	4a08      	ldr	r2, [pc, #32]	@ (8000b64 <I2CInit+0x11c>)
 8000b44:	f043 0311 	orr.w	r3, r3, #17
 8000b48:	6213      	str	r3, [r2, #32]
    // Enable I2C
    I2C1->CR1 |= I2C_CR1_PE;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <I2CInit+0x11c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	4a05      	ldr	r2, [pc, #20]	@ (8000b64 <I2CInit+0x11c>)
 8000b50:	f043 0301 	orr.w	r3, r3, #1
 8000b54:	6013      	str	r3, [r2, #0]
}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40020400 	.word	0x40020400
 8000b64:	40005400 	.word	0x40005400

08000b68 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8000b70:	4b0e      	ldr	r3, [pc, #56]	@ (8000bac <DelayMs+0x44>)
 8000b72:	685b      	ldr	r3, [r3, #4]
 8000b74:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8000b76:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb0 <DelayMs+0x48>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <DelayMs+0x4c>)
 8000b7c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b80:	099b      	lsrs	r3, r3, #6
 8000b82:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	68ba      	ldr	r2, [r7, #8]
 8000b88:	fb02 f303 	mul.w	r3, r2, r3
 8000b8c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 8000b8e:	bf00      	nop
 8000b90:	4b06      	ldr	r3, [pc, #24]	@ (8000bac <DelayMs+0x44>)
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	1ad2      	subs	r2, r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d3f8      	bcc.n	8000b90 <DelayMs+0x28>
}
 8000b9e:	bf00      	nop
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e0001000 	.word	0xe0001000
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	10624dd3 	.word	0x10624dd3

08000bb8 <LcdWriteByte>:
 *      Author: Nilesh
 */

#include "i2c_lcd.h"

void LcdWriteByte(uint8_t val) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
	I2CStart();
 8000bc2:	f7ff feb7 	bl	8000934 <I2CStart>
	I2CSendSlaveAddress(LCD_SLAVE_ADDR_W);
 8000bc6:	204e      	movs	r0, #78	@ 0x4e
 8000bc8:	f7ff fee4 	bl	8000994 <I2CSendSlaveAddress>
	I2CSendData(val);
 8000bcc:	79fb      	ldrb	r3, [r7, #7]
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f7ff fefc 	bl	80009cc <I2CSendData>
	I2CStop();
 8000bd4:	f7ff fec6 	bl	8000964 <I2CStop>
}
 8000bd8:	bf00      	nop
 8000bda:	3708      	adds	r7, #8
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <LcdWrite>:

void LcdWrite(uint8_t rs, uint8_t val) {
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	460a      	mov	r2, r1
 8000bea:	71fb      	strb	r3, [r7, #7]
 8000bec:	4613      	mov	r3, r2
 8000bee:	71bb      	strb	r3, [r7, #6]
	uint8_t high = val & 0xF0, low = (val << 4) & 0xF0;
 8000bf0:	79bb      	ldrb	r3, [r7, #6]
 8000bf2:	f023 030f 	bic.w	r3, r3, #15
 8000bf6:	73fb      	strb	r3, [r7, #15]
 8000bf8:	79bb      	ldrb	r3, [r7, #6]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	73bb      	strb	r3, [r7, #14]
	uint8_t bvrs = (rs == LCD_CMD) ? 0 : BV(LCD_RS);
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	2b80      	cmp	r3, #128	@ 0x80
 8000c02:	bf14      	ite	ne
 8000c04:	2301      	movne	r3, #1
 8000c06:	2300      	moveq	r3, #0
 8000c08:	b2db      	uxtb	r3, r3
 8000c0a:	737b      	strb	r3, [r7, #13]
	LcdWriteByte(high | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000c0c:	7bfa      	ldrb	r2, [r7, #15]
 8000c0e:	7b7b      	ldrb	r3, [r7, #13]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	f043 030c 	orr.w	r3, r3, #12
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f7ff ffcc 	bl	8000bb8 <LcdWriteByte>
	DelayMs(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff ffa1 	bl	8000b68 <DelayMs>
	LcdWriteByte(high | bvrs | BV(LCD_BL));
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	7b7b      	ldrb	r3, [r7, #13]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	f043 0308 	orr.w	r3, r3, #8
 8000c32:	b2db      	uxtb	r3, r3
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffbf 	bl	8000bb8 <LcdWriteByte>

	LcdWriteByte(low | bvrs | BV(LCD_EN) | BV(LCD_BL));
 8000c3a:	7bba      	ldrb	r2, [r7, #14]
 8000c3c:	7b7b      	ldrb	r3, [r7, #13]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	f043 030c 	orr.w	r3, r3, #12
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f7ff ffb5 	bl	8000bb8 <LcdWriteByte>
	DelayMs(1);
 8000c4e:	2001      	movs	r0, #1
 8000c50:	f7ff ff8a 	bl	8000b68 <DelayMs>
	LcdWriteByte(low | bvrs | BV(LCD_BL));
 8000c54:	7bba      	ldrb	r2, [r7, #14]
 8000c56:	7b7b      	ldrb	r3, [r7, #13]
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	b2db      	uxtb	r3, r3
 8000c5c:	f043 0308 	orr.w	r3, r3, #8
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	4618      	mov	r0, r3
 8000c64:	f7ff ffa8 	bl	8000bb8 <LcdWriteByte>
}
 8000c68:	bf00      	nop
 8000c6a:	3710      	adds	r7, #16
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <LcdInit>:

// As per 4-bit initialization sequence mentioned HD44780 datasheet fig 24 (page 46)
int LcdInit() {
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
	// wait for min 15 ms (for 5V)
	DelayMs(20);
 8000c76:	2014      	movs	r0, #20
 8000c78:	f7ff ff76 	bl	8000b68 <DelayMs>
	I2CInit();
 8000c7c:	f7ff fee4 	bl	8000a48 <I2CInit>
	// check if lcd is ready
	I2CStart();
 8000c80:	f7ff fe58 	bl	8000934 <I2CStart>
	int ret = I2CIsDeviceReady(LCD_SLAVE_ADDR_W);
 8000c84:	204e      	movs	r0, #78	@ 0x4e
 8000c86:	f7ff fec1 	bl	8000a0c <I2CIsDeviceReady>
 8000c8a:	6078      	str	r0, [r7, #4]
	I2CStop();
 8000c8c:	f7ff fe6a 	bl	8000964 <I2CStop>
	if(!ret)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d101      	bne.n	8000c9a <LcdInit+0x2a>
		return 0;
 8000c96:	2300      	movs	r3, #0
 8000c98:	e04a      	b.n	8000d30 <LcdInit+0xc0>

	// attention sequence
	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000c9a:	2034      	movs	r0, #52	@ 0x34
 8000c9c:	f7ff ff8c 	bl	8000bb8 <LcdWriteByte>
	__NOP();
 8000ca0:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000ca2:	2030      	movs	r0, #48	@ 0x30
 8000ca4:	f7ff ff88 	bl	8000bb8 <LcdWriteByte>
	DelayMs(5);
 8000ca8:	2005      	movs	r0, #5
 8000caa:	f7ff ff5d 	bl	8000b68 <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000cae:	2034      	movs	r0, #52	@ 0x34
 8000cb0:	f7ff ff82 	bl	8000bb8 <LcdWriteByte>
	__NOP();
 8000cb4:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000cb6:	2030      	movs	r0, #48	@ 0x30
 8000cb8:	f7ff ff7e 	bl	8000bb8 <LcdWriteByte>
	DelayMs(1);
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff ff53 	bl	8000b68 <DelayMs>

	LcdWriteByte(LCD_FN_SET_8BIT | BV(LCD_EN));
 8000cc2:	2034      	movs	r0, #52	@ 0x34
 8000cc4:	f7ff ff78 	bl	8000bb8 <LcdWriteByte>
	__NOP();
 8000cc8:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_8BIT);
 8000cca:	2030      	movs	r0, #48	@ 0x30
 8000ccc:	f7ff ff74 	bl	8000bb8 <LcdWriteByte>
	DelayMs(3);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff ff49 	bl	8000b68 <DelayMs>

	LcdWriteByte(LCD_FN_SET_4BIT | BV(LCD_EN));
 8000cd6:	2024      	movs	r0, #36	@ 0x24
 8000cd8:	f7ff ff6e 	bl	8000bb8 <LcdWriteByte>
	__NOP();
 8000cdc:	bf00      	nop
	LcdWriteByte(LCD_FN_SET_4BIT);
 8000cde:	2020      	movs	r0, #32
 8000ce0:	f7ff ff6a 	bl	8000bb8 <LcdWriteByte>
	DelayMs(3);
 8000ce4:	2003      	movs	r0, #3
 8000ce6:	f7ff ff3f 	bl	8000b68 <DelayMs>

	// lcd initialization
	LcdWriteByte(LCD_FN_SET_4BIT_2LINES);
 8000cea:	2028      	movs	r0, #40	@ 0x28
 8000cec:	f7ff ff64 	bl	8000bb8 <LcdWriteByte>
	DelayMs(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f7ff ff39 	bl	8000b68 <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_CTRL);
 8000cf6:	2108      	movs	r1, #8
 8000cf8:	2080      	movs	r0, #128	@ 0x80
 8000cfa:	f7ff ff71 	bl	8000be0 <LcdWrite>
	DelayMs(1);
 8000cfe:	2001      	movs	r0, #1
 8000d00:	f7ff ff32 	bl	8000b68 <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 8000d04:	2101      	movs	r1, #1
 8000d06:	2080      	movs	r0, #128	@ 0x80
 8000d08:	f7ff ff6a 	bl	8000be0 <LcdWrite>
	DelayMs(1);
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff2b 	bl	8000b68 <DelayMs>
	LcdWrite(LCD_CMD, LCD_ENTRY_MODE);
 8000d12:	2106      	movs	r1, #6
 8000d14:	2080      	movs	r0, #128	@ 0x80
 8000d16:	f7ff ff63 	bl	8000be0 <LcdWrite>
	DelayMs(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff ff24 	bl	8000b68 <DelayMs>
	LcdWrite(LCD_CMD, LCD_DISP_ON);
 8000d20:	210c      	movs	r1, #12
 8000d22:	2080      	movs	r0, #128	@ 0x80
 8000d24:	f7ff ff5c 	bl	8000be0 <LcdWrite>
	DelayMs(1);
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f7ff ff1d 	bl	8000b68 <DelayMs>
	return ret;
 8000d2e:	687b      	ldr	r3, [r7, #4]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <LcdPuts>:

void LcdPuts(uint8_t line, char str[]) {
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b084      	sub	sp, #16
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	6039      	str	r1, [r7, #0]
 8000d42:	71fb      	strb	r3, [r7, #7]
	int i;
	LcdWrite(LCD_CMD, line); // line address
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	4619      	mov	r1, r3
 8000d48:	2080      	movs	r0, #128	@ 0x80
 8000d4a:	f7ff ff49 	bl	8000be0 <LcdWrite>
	DelayMs(1);
 8000d4e:	2001      	movs	r0, #1
 8000d50:	f7ff ff0a 	bl	8000b68 <DelayMs>
	for(i=0; str[i]!='\0'; i++)
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	e00a      	b.n	8000d70 <LcdPuts+0x38>
		LcdWrite(LCD_DATA, str[i]);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	4619      	mov	r1, r3
 8000d64:	2001      	movs	r0, #1
 8000d66:	f7ff ff3b 	bl	8000be0 <LcdWrite>
	for(i=0; str[i]!='\0'; i++)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	3301      	adds	r3, #1
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	4413      	add	r3, r2
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d1ee      	bne.n	8000d5a <LcdPuts+0x22>
}
 8000d7c:	bf00      	nop
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
	...

08000d88 <__io_putchar>:
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

//void ITM_SendChar(uint8_t ch)
int __io_putchar(int ch)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	//Enable TRCENA
	DEMCR |= (1 << 24);
 8000d90:	4b0f      	ldr	r3, [pc, #60]	@ (8000dd0 <__io_putchar+0x48>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <__io_putchar+0x48>)
 8000d96:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000d9a:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000d9c:	4b0d      	ldr	r3, [pc, #52]	@ (8000dd4 <__io_putchar+0x4c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a0c      	ldr	r2, [pc, #48]	@ (8000dd4 <__io_putchar+0x4c>)
 8000da2:	f043 0301 	orr.w	r3, r3, #1
 8000da6:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000da8:	bf00      	nop
 8000daa:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0301 	and.w	r3, r3, #1
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d0f8      	beq.n	8000daa <__io_putchar+0x22>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000db8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6013      	str	r3, [r2, #0]

	return 1;
 8000dc0:	2301      	movs	r3, #1
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000edfc 	.word	0xe000edfc
 8000dd4:	e0000e00 	.word	0xe0000e00

08000dd8 <keypad_init>:




void keypad_init(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0

	/*Enable clock access to GPIOC*/
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOCEN;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <keypad_init+0x50>)
 8000dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de0:	4a11      	ldr	r2, [pc, #68]	@ (8000e28 <keypad_init+0x50>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PC0 to PC3 as input*/
	GPIOC->MODER &= ~(GPIO_MODER_MODE0|GPIO_MODER_MODE1|GPIO_MODER_MODE2|GPIO_MODER_MODE3);
 8000de8:	4b10      	ldr	r3, [pc, #64]	@ (8000e2c <keypad_init+0x54>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <keypad_init+0x54>)
 8000dee:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000df2:	6013      	str	r3, [r2, #0]

	/* Activate internal pullup resistor for PC0 to PC3*/
	GPIOC->PUPDR|=GPIO_PUPDR_PUPD0_0|GPIO_PUPDR_PUPD1_0|GPIO_PUPDR_PUPD2_0|GPIO_PUPDR_PUPD3_0;
 8000df4:	4b0d      	ldr	r3, [pc, #52]	@ (8000e2c <keypad_init+0x54>)
 8000df6:	68db      	ldr	r3, [r3, #12]
 8000df8:	4a0c      	ldr	r2, [pc, #48]	@ (8000e2c <keypad_init+0x54>)
 8000dfa:	f043 0355 	orr.w	r3, r3, #85	@ 0x55
 8000dfe:	60d3      	str	r3, [r2, #12]

	/*Set PC4 to PC7 as output*/
	GPIOC->MODER |= GPIO_MODER_MODE4_0|GPIO_MODER_MODE5_0|GPIO_MODER_MODE6_0|GPIO_MODER_MODE7_0;
 8000e00:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <keypad_init+0x54>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <keypad_init+0x54>)
 8000e06:	f443 43aa 	orr.w	r3, r3, #21760	@ 0x5500
 8000e0a:	6013      	str	r3, [r2, #0]

	GPIOC->MODER &=~( GPIO_MODER_MODE4_1|GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1);
 8000e0c:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <keypad_init+0x54>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <keypad_init+0x54>)
 8000e12:	f423 432a 	bic.w	r3, r3, #43520	@ 0xaa00
 8000e16:	6013      	str	r3, [r2, #0]

	/*Set PC4 to PC7 as high*/

	GPIOC->BSRR = GPIO_BSRR_BS4|GPIO_BSRR_BS5|GPIO_BSRR_BS6|GPIO_BSRR_BS7;
 8000e18:	4b04      	ldr	r3, [pc, #16]	@ (8000e2c <keypad_init+0x54>)
 8000e1a:	22f0      	movs	r2, #240	@ 0xf0
 8000e1c:	619a      	str	r2, [r3, #24]
}
 8000e1e:	bf00      	nop
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40020800 	.word	0x40020800

08000e30 <keypad_read>:


char keypad_read(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0

	unsigned char key=0,data=0;
 8000e36:	2300      	movs	r3, #0
 8000e38:	73fb      	strb	r3, [r7, #15]
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	71fb      	strb	r3, [r7, #7]

	for (int i=0;i<4;i++)
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	e01a      	b.n	8000e7a <keypad_read+0x4a>
	{

		GPIOC->BSRR=clo_state[i];
 8000e44:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <keypad_read+0x5c>)
 8000e46:	4912      	ldr	r1, [pc, #72]	@ (8000e90 <keypad_read+0x60>)
 8000e48:	68bb      	ldr	r3, [r7, #8]
 8000e4a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e4e:	6193      	str	r3, [r2, #24]

		data=(GPIOC->IDR)&0xF; /*Get rid of data from bit 5 to bit31*/
 8000e50:	4b0e      	ldr	r3, [pc, #56]	@ (8000e8c <keypad_read+0x5c>)
 8000e52:	691b      	ldr	r3, [r3, #16]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	71fb      	strb	r3, [r7, #7]

		if(data != 0xF)
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	2b0f      	cmp	r3, #15
 8000e60:	d008      	beq.n	8000e74 <keypad_read+0x44>
		{
			key=decode_keypad(i,data);
 8000e62:	68bb      	ldr	r3, [r7, #8]
 8000e64:	b2db      	uxtb	r3, r3
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 f812 	bl	8000e94 <decode_keypad>
 8000e70:	4603      	mov	r3, r0
 8000e72:	73fb      	strb	r3, [r7, #15]
	for (int i=0;i<4;i++)
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	3301      	adds	r3, #1
 8000e78:	60bb      	str	r3, [r7, #8]
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	dde1      	ble.n	8000e44 <keypad_read+0x14>
		}

	}

	return key;
 8000e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3710      	adds	r7, #16
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020800 	.word	0x40020800
 8000e90:	08002764 	.word	0x08002764

08000e94 <decode_keypad>:


static char decode_keypad(uint8_t col, uint8_t row)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	460a      	mov	r2, r1
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	71bb      	strb	r3, [r7, #6]

	if (row == 0xE) return keymap[0][col];
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b0e      	cmp	r3, #14
 8000ea8:	d103      	bne.n	8000eb2 <decode_keypad+0x1e>
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a10      	ldr	r2, [pc, #64]	@ (8000ef0 <decode_keypad+0x5c>)
 8000eae:	5cd3      	ldrb	r3, [r2, r3]
 8000eb0:	e018      	b.n	8000ee4 <decode_keypad+0x50>
	if (row == 0xD) return keymap[1][col];
 8000eb2:	79bb      	ldrb	r3, [r7, #6]
 8000eb4:	2b0d      	cmp	r3, #13
 8000eb6:	d104      	bne.n	8000ec2 <decode_keypad+0x2e>
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ef0 <decode_keypad+0x5c>)
 8000ebc:	4413      	add	r3, r2
 8000ebe:	791b      	ldrb	r3, [r3, #4]
 8000ec0:	e010      	b.n	8000ee4 <decode_keypad+0x50>
	if (row == 0xB) return keymap[2][col];
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	2b0b      	cmp	r3, #11
 8000ec6:	d104      	bne.n	8000ed2 <decode_keypad+0x3e>
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	4a09      	ldr	r2, [pc, #36]	@ (8000ef0 <decode_keypad+0x5c>)
 8000ecc:	4413      	add	r3, r2
 8000ece:	7a1b      	ldrb	r3, [r3, #8]
 8000ed0:	e008      	b.n	8000ee4 <decode_keypad+0x50>
	if (row == 0x7) return keymap[3][col];
 8000ed2:	79bb      	ldrb	r3, [r7, #6]
 8000ed4:	2b07      	cmp	r3, #7
 8000ed6:	d104      	bne.n	8000ee2 <decode_keypad+0x4e>
 8000ed8:	79fb      	ldrb	r3, [r7, #7]
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <decode_keypad+0x5c>)
 8000edc:	4413      	add	r3, r2
 8000ede:	7b1b      	ldrb	r3, [r3, #12]
 8000ee0:	e000      	b.n	8000ee4 <decode_keypad+0x50>
	return 0;
 8000ee2:	2300      	movs	r3, #0
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	08002754 	.word	0x08002754

08000ef4 <LedInit>:
#include "led.h"
#include "stm32f4xx.h"

void LedInit(uint32_t pin) {
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
	// enable gpio clock (in AHB1ENR)
	RCC->AHB1ENR |= BV(LED_GPIO_EN);
 8000efc:	4b29      	ldr	r3, [pc, #164]	@ (8000fa4 <LedInit+0xb0>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a28      	ldr	r2, [pc, #160]	@ (8000fa4 <LedInit+0xb0>)
 8000f02:	f043 0308 	orr.w	r3, r3, #8
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
	// set gpio pin as output (in MODER)
	LED_GPIO->MODER &= ~BV(pin * 2 + 1);
 8000f08:	4b27      	ldr	r3, [pc, #156]	@ (8000fa8 <LedInit+0xb4>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	0052      	lsls	r2, r2, #1
 8000f10:	3201      	adds	r2, #1
 8000f12:	2101      	movs	r1, #1
 8000f14:	fa01 f202 	lsl.w	r2, r1, r2
 8000f18:	43d2      	mvns	r2, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a22      	ldr	r2, [pc, #136]	@ (8000fa8 <LedInit+0xb4>)
 8000f1e:	400b      	ands	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
	LED_GPIO->MODER |= BV(pin * 2);
 8000f22:	4b21      	ldr	r3, [pc, #132]	@ (8000fa8 <LedInit+0xb4>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	0052      	lsls	r2, r2, #1
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f30:	4611      	mov	r1, r2
 8000f32:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <LedInit+0xb4>)
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6013      	str	r3, [r2, #0]
	// set gpio pin speed to low (in OSPEEDR)
	LED_GPIO->OSPEEDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000f38:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa8 <LedInit+0xb4>)
 8000f3a:	689b      	ldr	r3, [r3, #8]
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	0052      	lsls	r2, r2, #1
 8000f40:	3201      	adds	r2, #1
 8000f42:	2101      	movs	r1, #1
 8000f44:	4091      	lsls	r1, r2
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	0052      	lsls	r2, r2, #1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	fa00 f202 	lsl.w	r2, r0, r2
 8000f50:	430a      	orrs	r2, r1
 8000f52:	43d2      	mvns	r2, r2
 8000f54:	4611      	mov	r1, r2
 8000f56:	4a14      	ldr	r2, [pc, #80]	@ (8000fa8 <LedInit+0xb4>)
 8000f58:	400b      	ands	r3, r1
 8000f5a:	6093      	str	r3, [r2, #8]
	// set gpio pin no pull up, no pull down (in PUPDR)
	LED_GPIO->PUPDR &= ~(BV(pin * 2 + 1) | BV(pin * 2));
 8000f5c:	4b12      	ldr	r3, [pc, #72]	@ (8000fa8 <LedInit+0xb4>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	0052      	lsls	r2, r2, #1
 8000f64:	3201      	adds	r2, #1
 8000f66:	2101      	movs	r1, #1
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	0052      	lsls	r2, r2, #1
 8000f6e:	2001      	movs	r0, #1
 8000f70:	fa00 f202 	lsl.w	r2, r0, r2
 8000f74:	430a      	orrs	r2, r1
 8000f76:	43d2      	mvns	r2, r2
 8000f78:	4611      	mov	r1, r2
 8000f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8000fa8 <LedInit+0xb4>)
 8000f7c:	400b      	ands	r3, r1
 8000f7e:	60d3      	str	r3, [r2, #12]
	// set gpio pin type as push-pull (in OTYPER)
	LED_GPIO->OTYPER &= ~BV(pin);
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <LedInit+0xb4>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	2101      	movs	r1, #1
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	fa01 f202 	lsl.w	r2, r1, r2
 8000f8c:	43d2      	mvns	r2, r2
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4a05      	ldr	r2, [pc, #20]	@ (8000fa8 <LedInit+0xb4>)
 8000f92:	400b      	ands	r3, r1
 8000f94:	6053      	str	r3, [r2, #4]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020c00 	.word	0x40020c00

08000fac <LedOn>:

void LedOn(uint32_t pin) {
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
	// set led pin (in ODR)
	LED_GPIO->ODR |= BV(pin);
 8000fb4:	4b07      	ldr	r3, [pc, #28]	@ (8000fd4 <LedOn+0x28>)
 8000fb6:	695b      	ldr	r3, [r3, #20]
 8000fb8:	2101      	movs	r1, #1
 8000fba:	687a      	ldr	r2, [r7, #4]
 8000fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc0:	4611      	mov	r1, r2
 8000fc2:	4a04      	ldr	r2, [pc, #16]	@ (8000fd4 <LedOn+0x28>)
 8000fc4:	430b      	orrs	r3, r1
 8000fc6:	6153      	str	r3, [r2, #20]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40020c00 	.word	0x40020c00

08000fd8 <LedOff>:

void LedOff(uint32_t pin) {
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
	// clear led pin (in ODR)
	LED_GPIO->ODR &= ~BV(pin);
 8000fe0:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <LedOff+0x2c>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	2101      	movs	r1, #1
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fec:	43d2      	mvns	r2, r2
 8000fee:	4611      	mov	r1, r2
 8000ff0:	4a04      	ldr	r2, [pc, #16]	@ (8001004 <LedOff+0x2c>)
 8000ff2:	400b      	ands	r3, r1
 8000ff4:	6153      	str	r3, [r2, #20]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40020c00 	.word	0x40020c00

08001008 <DelayMs>:
static inline void DelayMs(volatile uint32_t ms) {
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	uint32_t init_ticks = DWT->CYCCNT;
 8001010:	4b0e      	ldr	r3, [pc, #56]	@ (800104c <DelayMs+0x44>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	60fb      	str	r3, [r7, #12]
	uint32_t ticks = (SystemCoreClock / 1000);
 8001016:	4b0e      	ldr	r3, [pc, #56]	@ (8001050 <DelayMs+0x48>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a0e      	ldr	r2, [pc, #56]	@ (8001054 <DelayMs+0x4c>)
 800101c:	fba2 2303 	umull	r2, r3, r2, r3
 8001020:	099b      	lsrs	r3, r3, #6
 8001022:	60bb      	str	r3, [r7, #8]
	ms *= ticks;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	fb02 f303 	mul.w	r3, r2, r3
 800102c:	607b      	str	r3, [r7, #4]
	while ((DWT->CYCCNT - init_ticks) < ms);
 800102e:	bf00      	nop
 8001030:	4b06      	ldr	r3, [pc, #24]	@ (800104c <DelayMs+0x44>)
 8001032:	685a      	ldr	r2, [r3, #4]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	1ad2      	subs	r2, r2, r3
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	429a      	cmp	r2, r3
 800103c:	d3f8      	bcc.n	8001030 <DelayMs+0x28>
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3714      	adds	r7, #20
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr
 800104c:	e0001000 	.word	0xe0001000
 8001050:	20000000 	.word	0x20000000
 8001054:	10624dd3 	.word	0x10624dd3

08001058 <lockDoor>:
#include "RFID.h"

uint8_t rfid_id[4];

int lockDoor(int locked)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	LedOff(LED_RED);
 8001060:	200e      	movs	r0, #14
 8001062:	f7ff ffb9 	bl	8000fd8 <LedOff>
	while(TIM2->CCR1 < 2500)
 8001066:	e009      	b.n	800107c <lockDoor+0x24>
	{
		TIM2->CCR1 = TIM2->CCR1 + 50;
 8001068:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800106c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800106e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001072:	3332      	adds	r3, #50	@ 0x32
 8001074:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4_ms_Delay(50);
 8001076:	2032      	movs	r0, #50	@ 0x32
 8001078:	f000 f94e 	bl	8001318 <TIM4_ms_Delay>
	while(TIM2->CCR1 < 2500)
 800107c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001082:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8001086:	4293      	cmp	r3, r2
 8001088:	d9ee      	bls.n	8001068 <lockDoor+0x10>
	}
	LcdWrite(LCD_CMD, LCD_CLEAR);
 800108a:	2101      	movs	r1, #1
 800108c:	2080      	movs	r0, #128	@ 0x80
 800108e:	f7ff fda7 	bl	8000be0 <LcdWrite>
	DelayMs(10);
 8001092:	200a      	movs	r0, #10
 8001094:	f7ff ffb8 	bl	8001008 <DelayMs>
	LcdPuts(LCD_LINE1, "DOOR UNLOCKED");
 8001098:	490c      	ldr	r1, [pc, #48]	@ (80010cc <lockDoor+0x74>)
 800109a:	2080      	movs	r0, #128	@ 0x80
 800109c:	f7ff fe4c 	bl	8000d38 <LcdPuts>
	LcdPuts(LCD_LINE2, "FOR 10 SECOND");
 80010a0:	490b      	ldr	r1, [pc, #44]	@ (80010d0 <lockDoor+0x78>)
 80010a2:	20c0      	movs	r0, #192	@ 0xc0
 80010a4:	f7ff fe48 	bl	8000d38 <LcdPuts>
	LedOff(LED_RED);
 80010a8:	200e      	movs	r0, #14
 80010aa:	f7ff ff95 	bl	8000fd8 <LedOff>
	LedOn(LED_GREEN);
 80010ae:	200c      	movs	r0, #12
 80010b0:	f7ff ff7c 	bl	8000fac <LedOn>
	DelayMs(7000);
 80010b4:	f641 3058 	movw	r0, #7000	@ 0x1b58
 80010b8:	f7ff ffa6 	bl	8001008 <DelayMs>
	locked = 0;
 80010bc:	2300      	movs	r3, #0
 80010be:	607b      	str	r3, [r7, #4]
	return locked;
 80010c0:	687b      	ldr	r3, [r7, #4]
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	080026b4 	.word	0x080026b4
 80010d0:	080026c4 	.word	0x080026c4

080010d4 <unlockDoor>:

int unlockDoor(int locked)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
	LcdWrite(LCD_CMD, LCD_CLEAR);
 80010dc:	2101      	movs	r1, #1
 80010de:	2080      	movs	r0, #128	@ 0x80
 80010e0:	f7ff fd7e 	bl	8000be0 <LcdWrite>
	DelayMs(10);
 80010e4:	200a      	movs	r0, #10
 80010e6:	f7ff ff8f 	bl	8001008 <DelayMs>
	LcdPuts(LCD_LINE1, "DOOR LOCKING");
 80010ea:	491f      	ldr	r1, [pc, #124]	@ (8001168 <unlockDoor+0x94>)
 80010ec:	2080      	movs	r0, #128	@ 0x80
 80010ee:	f7ff fe23 	bl	8000d38 <LcdPuts>
	LcdPuts(LCD_LINE2, "IN 3");
 80010f2:	491e      	ldr	r1, [pc, #120]	@ (800116c <unlockDoor+0x98>)
 80010f4:	20c0      	movs	r0, #192	@ 0xc0
 80010f6:	f7ff fe1f 	bl	8000d38 <LcdPuts>
	DelayMs(1000);
 80010fa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010fe:	f7ff ff83 	bl	8001008 <DelayMs>
	LcdPuts(LCD_LINE2, "IN 2");
 8001102:	491b      	ldr	r1, [pc, #108]	@ (8001170 <unlockDoor+0x9c>)
 8001104:	20c0      	movs	r0, #192	@ 0xc0
 8001106:	f7ff fe17 	bl	8000d38 <LcdPuts>
	DelayMs(1000);
 800110a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800110e:	f7ff ff7b 	bl	8001008 <DelayMs>
	LcdPuts(LCD_LINE2, "IN 1");
 8001112:	4918      	ldr	r1, [pc, #96]	@ (8001174 <unlockDoor+0xa0>)
 8001114:	20c0      	movs	r0, #192	@ 0xc0
 8001116:	f7ff fe0f 	bl	8000d38 <LcdPuts>
	DelayMs(1000);
 800111a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800111e:	f7ff ff73 	bl	8001008 <DelayMs>
	LcdWrite(LCD_CMD, LCD_CLEAR);
 8001122:	2101      	movs	r1, #1
 8001124:	2080      	movs	r0, #128	@ 0x80
 8001126:	f7ff fd5b 	bl	8000be0 <LcdWrite>
	DelayMs(10);
 800112a:	200a      	movs	r0, #10
 800112c:	f7ff ff6c 	bl	8001008 <DelayMs>
	while(TIM2->CCR1 > 500)
 8001130:	e009      	b.n	8001146 <unlockDoor+0x72>
	{
		TIM2->CCR1 = TIM2->CCR1 - 50;
 8001132:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001138:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800113c:	3b32      	subs	r3, #50	@ 0x32
 800113e:	6353      	str	r3, [r2, #52]	@ 0x34
		TIM4_ms_Delay(50);
 8001140:	2032      	movs	r0, #50	@ 0x32
 8001142:	f000 f8e9 	bl	8001318 <TIM4_ms_Delay>
	while(TIM2->CCR1 > 500)
 8001146:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800114a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800114c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8001150:	d8ef      	bhi.n	8001132 <unlockDoor+0x5e>
	}
	LedOff(LED_GREEN);
 8001152:	200c      	movs	r0, #12
 8001154:	f7ff ff40 	bl	8000fd8 <LedOff>
	locked = 1;
 8001158:	2301      	movs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
}
 800115c:	bf00      	nop
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	080026d4 	.word	0x080026d4
 800116c:	080026e4 	.word	0x080026e4
 8001170:	080026ec 	.word	0x080026ec
 8001174:	080026f4 	.word	0x080026f4

08001178 <main>:

int main()
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
	SystemInit();
 800117e:	f000 fa95 	bl	80016ac <SystemInit>
	systick_init_ms(16000000);
 8001182:	483a      	ldr	r0, [pc, #232]	@ (800126c <main+0xf4>)
 8001184:	f7ff fb6a 	bl	800085c <systick_init_ms>

	// Servo-Motor Initialization
	RCC->CFGR |= 0<<10; // set APB1 = 16 MHz
 8001188:	4b39      	ldr	r3, [pc, #228]	@ (8001270 <main+0xf8>)
 800118a:	4a39      	ldr	r2, [pc, #228]	@ (8001270 <main+0xf8>)
 800118c:	689b      	ldr	r3, [r3, #8]
 800118e:	6093      	str	r3, [r2, #8]
	GPIO_Init();
 8001190:	f000 f876 	bl	8001280 <GPIO_Init>
	TIM2_Init();
 8001194:	f000 f892 	bl	80012bc <TIM2_Init>
	TIM2->CR1 |= 1;
 8001198:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80011a2:	f043 0301 	orr.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
	TIM2->CCR1 = 500;
 80011a8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80011ac:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011b0:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM4_ms_Delay(50);
 80011b2:	2032      	movs	r0, #50	@ 0x32
 80011b4:	f000 f8b0 	bl	8001318 <TIM4_ms_Delay>

	// RFID Initialization
	rc522_init();
 80011b8:	f7ff fae8 	bl	800078c <rc522_init>
	DelayMs(10);
 80011bc:	200a      	movs	r0, #10
 80011be:	f7ff ff23 	bl	8001008 <DelayMs>

	// LED Initialization
	LedInit(LED_GREEN);
 80011c2:	200c      	movs	r0, #12
 80011c4:	f7ff fe96 	bl	8000ef4 <LedInit>
	LedInit(LED_ORANGE);
 80011c8:	200d      	movs	r0, #13
 80011ca:	f7ff fe93 	bl	8000ef4 <LedInit>
	LedInit(LED_RED);
 80011ce:	200e      	movs	r0, #14
 80011d0:	f7ff fe90 	bl	8000ef4 <LedInit>
	LedInit(LED_BLUE);
 80011d4:	200f      	movs	r0, #15
 80011d6:	f7ff fe8d 	bl	8000ef4 <LedInit>

	// LCD Initialization
	int ret;
	ret = LcdInit();
 80011da:	f7ff fd49 	bl	8000c70 <LcdInit>
 80011de:	60b8      	str	r0, [r7, #8]

	// Keypad Initialization
	//	KeypadInit();
	keypad_init();
 80011e0:	f7ff fdfa 	bl	8000dd8 <keypad_init>
	char keyVal = 0;
 80011e4:	2300      	movs	r3, #0
 80011e6:	71fb      	strb	r3, [r7, #7]

	//
	int locked = 1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	60fb      	str	r3, [r7, #12]

	if(ret)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d037      	beq.n	8001262 <main+0xea>
	{
		while(1)
		{
			if(locked == 1)
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b01      	cmp	r3, #1
 80011f6:	d12f      	bne.n	8001258 <main+0xe0>
			{
				LedOn(LED_RED);
 80011f8:	200e      	movs	r0, #14
 80011fa:	f7ff fed7 	bl	8000fac <LedOn>
				LcdPuts(LCD_LINE1, "DOOR LOCKED");
 80011fe:	491d      	ldr	r1, [pc, #116]	@ (8001274 <main+0xfc>)
 8001200:	2080      	movs	r0, #128	@ 0x80
 8001202:	f7ff fd99 	bl	8000d38 <LcdPuts>
				LcdPuts(LCD_LINE2, "RFID - PWD");
 8001206:	491c      	ldr	r1, [pc, #112]	@ (8001278 <main+0x100>)
 8001208:	20c0      	movs	r0, #192	@ 0xc0
 800120a:	f7ff fd95 	bl	8000d38 <LcdPuts>
				DelayMs(100);
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	f7ff fefa 	bl	8001008 <DelayMs>

				keyVal=keypad_read();
 8001214:	f7ff fe0c 	bl	8000e30 <keypad_read>
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
				DelayMs(100);
 800121c:	2064      	movs	r0, #100	@ 0x64
 800121e:	f7ff fef3 	bl	8001008 <DelayMs>
				if(keyVal)
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <main+0xca>
				{
					if(keyVal == '7')
 8001228:	79fb      	ldrb	r3, [r7, #7]
 800122a:	2b37      	cmp	r3, #55	@ 0x37
 800122c:	d106      	bne.n	800123c <main+0xc4>
					{
						DelayMs(100);
 800122e:	2064      	movs	r0, #100	@ 0x64
 8001230:	f7ff feea 	bl	8001008 <DelayMs>
						locked = lockDoor(locked);
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff ff0f 	bl	8001058 <lockDoor>
 800123a:	60f8      	str	r0, [r7, #12]
					}
					keyVal = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	e7d7      	b.n	80011f2 <main+0x7a>
				}

				else if(rc522_checkCard(rfid_id))
 8001242:	480e      	ldr	r0, [pc, #56]	@ (800127c <main+0x104>)
 8001244:	f7ff f8d0 	bl	80003e8 <rc522_checkCard>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d0d1      	beq.n	80011f2 <main+0x7a>
				{
					locked = lockDoor(locked);
 800124e:	68f8      	ldr	r0, [r7, #12]
 8001250:	f7ff ff02 	bl	8001058 <lockDoor>
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	e7cc      	b.n	80011f2 <main+0x7a>
				}
			}
			else
			{
				locked = unlockDoor(locked);
 8001258:	68f8      	ldr	r0, [r7, #12]
 800125a:	f7ff ff3b 	bl	80010d4 <unlockDoor>
 800125e:	60f8      	str	r0, [r7, #12]
			if(locked == 1)
 8001260:	e7c7      	b.n	80011f2 <main+0x7a>
 8001262:	2300      	movs	r3, #0
			}
		}
	}
}
 8001264:	4618      	mov	r0, r3
 8001266:	3710      	adds	r7, #16
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}
 800126c:	00f42400 	.word	0x00f42400
 8001270:	40023800 	.word	0x40023800
 8001274:	080026fc 	.word	0x080026fc
 8001278:	08002708 	.word	0x08002708
 800127c:	20000084 	.word	0x20000084

08001280 <GPIO_Init>:
#include "servo.h"


void GPIO_Init()
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1;
 8001284:	4b0b      	ldr	r3, [pc, #44]	@ (80012b4 <GPIO_Init+0x34>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	4a0a      	ldr	r2, [pc, #40]	@ (80012b4 <GPIO_Init+0x34>)
 800128a:	f043 0301 	orr.w	r3, r3, #1
 800128e:	6313      	str	r3, [r2, #48]	@ 0x30

	// Select the PA0 pin in alternate function mode
	GPIOA->AFR[0] |= 0x00000001;
 8001290:	4b09      	ldr	r3, [pc, #36]	@ (80012b8 <GPIO_Init+0x38>)
 8001292:	6a1b      	ldr	r3, [r3, #32]
 8001294:	4a08      	ldr	r2, [pc, #32]	@ (80012b8 <GPIO_Init+0x38>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	6213      	str	r3, [r2, #32]

	// Set the PA0 pin to alternate function mode
	GPIOA->MODER |= 0x00000002;
 800129c:	4b06      	ldr	r3, [pc, #24]	@ (80012b8 <GPIO_Init+0x38>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a05      	ldr	r2, [pc, #20]	@ (80012b8 <GPIO_Init+0x38>)
 80012a2:	f043 0302 	orr.w	r3, r3, #2
 80012a6:	6013      	str	r3, [r2, #0]
}
 80012a8:	bf00      	nop
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40023800 	.word	0x40023800
 80012b8:	40020000 	.word	0x40020000

080012bc <TIM2_Init>:

void TIM2_Init()
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=1;
 80012c0:	4b14      	ldr	r3, [pc, #80]	@ (8001314 <TIM2_Init+0x58>)
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	4a13      	ldr	r2, [pc, #76]	@ (8001314 <TIM2_Init+0x58>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 16-1; //Setting the clock frequency to 1MHz.
 80012cc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d0:	220f      	movs	r2, #15
 80012d2:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 30000; // Total period of the timer
 80012d4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012d8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80012dc:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 80012de:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012e2:	2200      	movs	r2, #0
 80012e4:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CCMR1 = 0x0060; //PWM mode for the timer
 80012e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012ea:	2260      	movs	r2, #96	@ 0x60
 80012ec:	619a      	str	r2, [r3, #24]
	TIM2->CCER |= 1; //Enable channel 1 as output
 80012ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6213      	str	r3, [r2, #32]
	TIM2->CCR1 = 500; // Pulse width for PWM
 80012fe:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001302:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001306:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40023800 	.word	0x40023800

08001318 <TIM4_ms_Delay>:

void TIM4_ms_Delay(uint32_t delay)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1<<2; //Start the clock for the timer peripheral
 8001320:	4b14      	ldr	r3, [pc, #80]	@ (8001374 <TIM4_ms_Delay+0x5c>)
 8001322:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001324:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <TIM4_ms_Delay+0x5c>)
 8001326:	f043 0304 	orr.w	r3, r3, #4
 800132a:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM4->PSC = 16000-1; //Setting the clock frequency to 1kHz.
 800132c:	4b12      	ldr	r3, [pc, #72]	@ (8001378 <TIM4_ms_Delay+0x60>)
 800132e:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 8001332:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = (delay); // Total period of the timer
 8001334:	4a10      	ldr	r2, [pc, #64]	@ (8001378 <TIM4_ms_Delay+0x60>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 800133a:	4b0f      	ldr	r3, [pc, #60]	@ (8001378 <TIM4_ms_Delay+0x60>)
 800133c:	2200      	movs	r2, #0
 800133e:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CR1 |= 1; //Start the Timer
 8001340:	4b0d      	ldr	r3, [pc, #52]	@ (8001378 <TIM4_ms_Delay+0x60>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a0c      	ldr	r2, [pc, #48]	@ (8001378 <TIM4_ms_Delay+0x60>)
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	6013      	str	r3, [r2, #0]
	while(!(TIM4->SR & TIM_SR_UIF)){} //Polling the update interrupt flag
 800134c:	bf00      	nop
 800134e:	4b0a      	ldr	r3, [pc, #40]	@ (8001378 <TIM4_ms_Delay+0x60>)
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	f003 0301 	and.w	r3, r3, #1
 8001356:	2b00      	cmp	r3, #0
 8001358:	d0f9      	beq.n	800134e <TIM4_ms_Delay+0x36>
	TIM4->SR &= ~(0x0001); //Reset the update interrupt flag
 800135a:	4b07      	ldr	r3, [pc, #28]	@ (8001378 <TIM4_ms_Delay+0x60>)
 800135c:	691b      	ldr	r3, [r3, #16]
 800135e:	4a06      	ldr	r2, [pc, #24]	@ (8001378 <TIM4_ms_Delay+0x60>)
 8001360:	f023 0301 	bic.w	r3, r3, #1
 8001364:	6113      	str	r3, [r2, #16]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	40023800 	.word	0x40023800
 8001378:	40000800 	.word	0x40000800

0800137c <SPI_Init>:
#include "stdint.h"
#include "delay.h"
#include "stdio.h"

void SPI_Init(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
	#define AF5 0x05
	RCC->AHB1ENR|=RCC_AHB1ENR_GPIOAEN; //enable clock forn gpio a
 8001380:	4b18      	ldr	r3, [pc, #96]	@ (80013e4 <SPI_Init+0x68>)
 8001382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001384:	4a17      	ldr	r2, [pc, #92]	@ (80013e4 <SPI_Init+0x68>)
 8001386:	f043 0301 	orr.w	r3, r3, #1
 800138a:	6313      	str	r3, [r2, #48]	@ 0x30
	RCC->APB2ENR|=RCC_APB2ENR_SPI1EN; //enable clock for spi1
 800138c:	4b15      	ldr	r3, [pc, #84]	@ (80013e4 <SPI_Init+0x68>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001390:	4a14      	ldr	r2, [pc, #80]	@ (80013e4 <SPI_Init+0x68>)
 8001392:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001396:	6453      	str	r3, [r2, #68]	@ 0x44
	GPIOA->MODER|=GPIO_MODER_MODE5_1|GPIO_MODER_MODE6_1|GPIO_MODER_MODE7_1;
 8001398:	4b13      	ldr	r3, [pc, #76]	@ (80013e8 <SPI_Init+0x6c>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a12      	ldr	r2, [pc, #72]	@ (80013e8 <SPI_Init+0x6c>)
 800139e:	f443 4328 	orr.w	r3, r3, #43008	@ 0xa800
 80013a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER&=~(GPIO_MODER_MODE5_0|GPIO_MODER_MODE6_0|GPIO_MODER_MODE7_0);
 80013a4:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <SPI_Init+0x6c>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <SPI_Init+0x6c>)
 80013aa:	f423 43a8 	bic.w	r3, r3, #21504	@ 0x5400
 80013ae:	6013      	str	r3, [r2, #0]
	GPIOA->OSPEEDR|=GPIO_OSPEEDER_OSPEEDR5|GPIO_OSPEEDER_OSPEEDR6|GPIO_OSPEEDER_OSPEEDR7;
 80013b0:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <SPI_Init+0x6c>)
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	4a0c      	ldr	r2, [pc, #48]	@ (80013e8 <SPI_Init+0x6c>)
 80013b6:	f443 437c 	orr.w	r3, r3, #64512	@ 0xfc00
 80013ba:	6093      	str	r3, [r2, #8]

	GPIOA->AFR[0]|=(AF5<<20)|(AF5<<24)|(AF5<<28);
 80013bc:	4b0a      	ldr	r3, [pc, #40]	@ (80013e8 <SPI_Init+0x6c>)
 80013be:	6a1b      	ldr	r3, [r3, #32]
 80013c0:	4a09      	ldr	r2, [pc, #36]	@ (80013e8 <SPI_Init+0x6c>)
 80013c2:	f043 43aa 	orr.w	r3, r3, #1426063360	@ 0x55000000
 80013c6:	f443 03a0 	orr.w	r3, r3, #5242880	@ 0x500000
 80013ca:	6213      	str	r3, [r2, #32]
	SPI1->CR2=0;
 80013cc:	4b07      	ldr	r3, [pc, #28]	@ (80013ec <SPI_Init+0x70>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
	SPI1->CR1=SPI_CR1_SSM|SPI_CR1_MSTR|SPI_CR1_BR_2|SPI_CR1_SSI|SPI_CR1_SPE;
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <SPI_Init+0x70>)
 80013d4:	f44f 7259 	mov.w	r2, #868	@ 0x364
 80013d8:	601a      	str	r2, [r3, #0]



}
 80013da:	bf00      	nop
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	40023800 	.word	0x40023800
 80013e8:	40020000 	.word	0x40020000
 80013ec:	40013000 	.word	0x40013000

080013f0 <SPI_Transmit>:


int8_t SPI_Transmit(uint8_t *data, uint32_t size)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
 80013f8:	6039      	str	r1, [r7, #0]


	uint32_t i		=0;
 80013fa:	2300      	movs	r3, #0
 80013fc:	617b      	str	r3, [r7, #20]
	uint8_t  temp	=0;
 80013fe:	2300      	movs	r3, #0
 8001400:	74fb      	strb	r3, [r7, #19]
	uint32_t start=millis();
 8001402:	f7ff fa4b 	bl	800089c <millis>
 8001406:	60f8      	str	r0, [r7, #12]
	temp =SPI1->DR;
 8001408:	4b38      	ldr	r3, [pc, #224]	@ (80014ec <SPI_Transmit+0xfc>)
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	74fb      	strb	r3, [r7, #19]
	temp=SPI1->SR;
 800140e:	4b37      	ldr	r3, [pc, #220]	@ (80014ec <SPI_Transmit+0xfc>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	74fb      	strb	r3, [r7, #19]
	while(i<size)
 8001414:	e031      	b.n	800147a <SPI_Transmit+0x8a>
		{
		while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){
 8001416:	f7ff fa41 	bl	800089c <millis>
 800141a:	4602      	mov	r2, r0
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001424:	d905      	bls.n	8001432 <SPI_Transmit+0x42>
			printf("TXE timed out\r\n");
 8001426:	4832      	ldr	r0, [pc, #200]	@ (80014f0 <SPI_Transmit+0x100>)
 8001428:	f000 faca 	bl	80019c0 <puts>
			return -1;}} // wait to transmision buffer to be emplty
 800142c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001430:	e058      	b.n	80014e4 <SPI_Transmit+0xf4>
		while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){
 8001432:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <SPI_Transmit+0xfc>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d0eb      	beq.n	8001416 <SPI_Transmit+0x26>
		SPI1->DR= data[i];
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	4413      	add	r3, r2
 8001444:	781a      	ldrb	r2, [r3, #0]
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <SPI_Transmit+0xfc>)
 8001448:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_BSY)){if(millis()-start>1000){printf("BSY timed out\r\n");return -1;}}
 800144a:	e00d      	b.n	8001468 <SPI_Transmit+0x78>
 800144c:	f7ff fa26 	bl	800089c <millis>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800145a:	d905      	bls.n	8001468 <SPI_Transmit+0x78>
 800145c:	4825      	ldr	r0, [pc, #148]	@ (80014f4 <SPI_Transmit+0x104>)
 800145e:	f000 faaf 	bl	80019c0 <puts>
 8001462:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001466:	e03d      	b.n	80014e4 <SPI_Transmit+0xf4>
 8001468:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <SPI_Transmit+0xfc>)
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0eb      	beq.n	800144c <SPI_Transmit+0x5c>
		i++;
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	3301      	adds	r3, #1
 8001478:	617b      	str	r3, [r7, #20]
	while(i<size)
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d3d7      	bcc.n	8001432 <SPI_Transmit+0x42>
		}
while(!((SPI1->SR)&SPI_SR_TXE)){if(millis()-start>1000){printf("TXE2 time dout\r\n");return -1;}}
 8001482:	e00d      	b.n	80014a0 <SPI_Transmit+0xb0>
 8001484:	f7ff fa0a 	bl	800089c <millis>
 8001488:	4602      	mov	r2, r0
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001492:	d905      	bls.n	80014a0 <SPI_Transmit+0xb0>
 8001494:	4818      	ldr	r0, [pc, #96]	@ (80014f8 <SPI_Transmit+0x108>)
 8001496:	f000 fa93 	bl	80019c0 <puts>
 800149a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800149e:	e021      	b.n	80014e4 <SPI_Transmit+0xf4>
 80014a0:	4b12      	ldr	r3, [pc, #72]	@ (80014ec <SPI_Transmit+0xfc>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 0302 	and.w	r3, r3, #2
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d0eb      	beq.n	8001484 <SPI_Transmit+0x94>
while((SPI1->SR)&SPI_SR_BSY){if(millis()-start>1000){printf("BSY2 timed out\r\n"); return -1;}}
 80014ac:	e00d      	b.n	80014ca <SPI_Transmit+0xda>
 80014ae:	f7ff f9f5 	bl	800089c <millis>
 80014b2:	4602      	mov	r2, r0
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	1ad3      	subs	r3, r2, r3
 80014b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014bc:	d905      	bls.n	80014ca <SPI_Transmit+0xda>
 80014be:	480f      	ldr	r0, [pc, #60]	@ (80014fc <SPI_Transmit+0x10c>)
 80014c0:	f000 fa7e 	bl	80019c0 <puts>
 80014c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014c8:	e00c      	b.n	80014e4 <SPI_Transmit+0xf4>
 80014ca:	4b08      	ldr	r3, [pc, #32]	@ (80014ec <SPI_Transmit+0xfc>)
 80014cc:	689b      	ldr	r3, [r3, #8]
 80014ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1eb      	bne.n	80014ae <SPI_Transmit+0xbe>
temp =SPI1->DR;
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <SPI_Transmit+0xfc>)
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	74fb      	strb	r3, [r7, #19]
temp=SPI1->SR;
 80014dc:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <SPI_Transmit+0xfc>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	74fb      	strb	r3, [r7, #19]
return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	40013000 	.word	0x40013000
 80014f0:	08002714 	.word	0x08002714
 80014f4:	08002724 	.word	0x08002724
 80014f8:	08002734 	.word	0x08002734
 80014fc:	08002744 	.word	0x08002744

08001500 <SPI_Receive>:


int8_t SPI_Receive(uint8_t *data, uint32_t size)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
while(size)
 800150a:	e020      	b.n	800154e <SPI_Receive+0x4e>
		{
	uint32_t start=millis();
 800150c:	f7ff f9c6 	bl	800089c <millis>
 8001510:	60f8      	str	r0, [r7, #12]
		SPI1->DR=0;
 8001512:	4b13      	ldr	r3, [pc, #76]	@ (8001560 <SPI_Receive+0x60>)
 8001514:	2200      	movs	r2, #0
 8001516:	60da      	str	r2, [r3, #12]
		while(!(SPI1->SR&SPI_SR_RXNE)){if(millis()-start>200){return -1;}}
 8001518:	e009      	b.n	800152e <SPI_Receive+0x2e>
 800151a:	f7ff f9bf 	bl	800089c <millis>
 800151e:	4602      	mov	r2, r0
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2bc8      	cmp	r3, #200	@ 0xc8
 8001526:	d902      	bls.n	800152e <SPI_Receive+0x2e>
 8001528:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152c:	e013      	b.n	8001556 <SPI_Receive+0x56>
 800152e:	4b0c      	ldr	r3, [pc, #48]	@ (8001560 <SPI_Receive+0x60>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	2b00      	cmp	r3, #0
 8001538:	d0ef      	beq.n	800151a <SPI_Receive+0x1a>
		*data++=(SPI1->DR);
 800153a:	4b09      	ldr	r3, [pc, #36]	@ (8001560 <SPI_Receive+0x60>)
 800153c:	68d9      	ldr	r1, [r3, #12]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	1c5a      	adds	r2, r3, #1
 8001542:	607a      	str	r2, [r7, #4]
 8001544:	b2ca      	uxtb	r2, r1
 8001546:	701a      	strb	r2, [r3, #0]
			size--;
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	3b01      	subs	r3, #1
 800154c:	603b      	str	r3, [r7, #0]
while(size)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d1db      	bne.n	800150c <SPI_Receive+0xc>
		}
return 0;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40013000 	.word	0x40013000

08001564 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001570:	2300      	movs	r3, #0
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e00a      	b.n	800158c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001576:	f3af 8000 	nop.w
 800157a:	4601      	mov	r1, r0
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	60ba      	str	r2, [r7, #8]
 8001582:	b2ca      	uxtb	r2, r1
 8001584:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	3301      	adds	r3, #1
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	697a      	ldr	r2, [r7, #20]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	429a      	cmp	r2, r3
 8001592:	dbf0      	blt.n	8001576 <_read+0x12>
	}

return len;
 8001594:	687b      	ldr	r3, [r7, #4]
}
 8001596:	4618      	mov	r0, r3
 8001598:	3718      	adds	r7, #24
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b086      	sub	sp, #24
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
 80015ae:	e009      	b.n	80015c4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fbe5 	bl	8000d88 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	3301      	adds	r3, #1
 80015c2:	617b      	str	r3, [r7, #20]
 80015c4:	697a      	ldr	r2, [r7, #20]
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	dbf1      	blt.n	80015b0 <_write+0x12>
	}
	return len;
 80015cc:	687b      	ldr	r3, [r7, #4]
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3718      	adds	r7, #24
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}

080015d6 <_close>:

int _close(int file)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
	return -1;
 80015de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80015fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr

0800160e <_isatty>:

int _isatty(int file)
{
 800160e:	b480      	push	{r7}
 8001610:	b083      	sub	sp, #12
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	return 1;
 8001616:	2301      	movs	r3, #1
}
 8001618:	4618      	mov	r0, r3
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
	return 0;
 8001630:	2300      	movs	r3, #0
}
 8001632:	4618      	mov	r0, r3
 8001634:	3714      	adds	r7, #20
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <_sbrk+0x5c>)
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <_sbrk+0x60>)
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001654:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <_sbrk+0x64>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800165c:	4b11      	ldr	r3, [pc, #68]	@ (80016a4 <_sbrk+0x64>)
 800165e:	4a12      	ldr	r2, [pc, #72]	@ (80016a8 <_sbrk+0x68>)
 8001660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001662:	4b10      	ldr	r3, [pc, #64]	@ (80016a4 <_sbrk+0x64>)
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4413      	add	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	429a      	cmp	r2, r3
 800166e:	d207      	bcs.n	8001680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001670:	f000 fad4 	bl	8001c1c <__errno>
 8001674:	4603      	mov	r3, r0
 8001676:	220c      	movs	r2, #12
 8001678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800167a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800167e:	e009      	b.n	8001694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001680:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001686:	4b07      	ldr	r3, [pc, #28]	@ (80016a4 <_sbrk+0x64>)
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4413      	add	r3, r2
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <_sbrk+0x64>)
 8001690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001692:	68fb      	ldr	r3, [r7, #12]
}
 8001694:	4618      	mov	r0, r3
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}
 800169c:	20020000 	.word	0x20020000
 80016a0:	00000400 	.word	0x00000400
 80016a4:	20000088 	.word	0x20000088
 80016a8:	200001d8 	.word	0x200001d8

080016ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  DWT_Init();
 80016b0:	f000 f802 	bl	80016b8 <DWT_Init>
}
 80016b4:	bf00      	nop
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 80016bc:	4b14      	ldr	r3, [pc, #80]	@ (8001710 <DWT_Init+0x58>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4a13      	ldr	r2, [pc, #76]	@ (8001710 <DWT_Init+0x58>)
 80016c2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80016c6:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 80016c8:	4b11      	ldr	r3, [pc, #68]	@ (8001710 <DWT_Init+0x58>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	4a10      	ldr	r2, [pc, #64]	@ (8001710 <DWT_Init+0x58>)
 80016ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80016d2:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80016d4:	4b0f      	ldr	r3, [pc, #60]	@ (8001714 <DWT_Init+0x5c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a0e      	ldr	r2, [pc, #56]	@ (8001714 <DWT_Init+0x5c>)
 80016da:	f023 0301 	bic.w	r3, r3, #1
 80016de:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80016e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001714 <DWT_Init+0x5c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0b      	ldr	r2, [pc, #44]	@ (8001714 <DWT_Init+0x5c>)
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 80016ec:	4b09      	ldr	r3, [pc, #36]	@ (8001714 <DWT_Init+0x5c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 80016f2:	bf00      	nop
    __ASM volatile ("NOP");
 80016f4:	bf00      	nop
    __ASM volatile ("NOP");
 80016f6:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 80016f8:	4b06      	ldr	r3, [pc, #24]	@ (8001714 <DWT_Init+0x5c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf0c      	ite	eq
 8001700:	2301      	moveq	r3, #1
 8001702:	2300      	movne	r3, #0
 8001704:	b2db      	uxtb	r3, r3
}
 8001706:	4618      	mov	r0, r3
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000edf0 	.word	0xe000edf0
 8001714:	e0001000 	.word	0xe0001000

08001718 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001718:	480d      	ldr	r0, [pc, #52]	@ (8001750 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800171a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800171c:	f7ff ffc6 	bl	80016ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001720:	480c      	ldr	r0, [pc, #48]	@ (8001754 <LoopForever+0x6>)
  ldr r1, =_edata
 8001722:	490d      	ldr	r1, [pc, #52]	@ (8001758 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001724:	4a0d      	ldr	r2, [pc, #52]	@ (800175c <LoopForever+0xe>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001738:	4c0a      	ldr	r4, [pc, #40]	@ (8001764 <LoopForever+0x16>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001746:	f000 fa6f 	bl	8001c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800174a:	f7ff fd15 	bl	8001178 <main>

0800174e <LoopForever>:

LoopForever:
  b LoopForever
 800174e:	e7fe      	b.n	800174e <LoopForever>
  ldr   r0, =_estack
 8001750:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001754:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001758:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800175c:	080027b8 	.word	0x080027b8
  ldr r2, =_sbss
 8001760:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001764:	200001d8 	.word	0x200001d8

08001768 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001768:	e7fe      	b.n	8001768 <ADC_IRQHandler>
	...

0800176c <std>:
 800176c:	2300      	movs	r3, #0
 800176e:	b510      	push	{r4, lr}
 8001770:	4604      	mov	r4, r0
 8001772:	e9c0 3300 	strd	r3, r3, [r0]
 8001776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800177a:	6083      	str	r3, [r0, #8]
 800177c:	8181      	strh	r1, [r0, #12]
 800177e:	6643      	str	r3, [r0, #100]	@ 0x64
 8001780:	81c2      	strh	r2, [r0, #14]
 8001782:	6183      	str	r3, [r0, #24]
 8001784:	4619      	mov	r1, r3
 8001786:	2208      	movs	r2, #8
 8001788:	305c      	adds	r0, #92	@ 0x5c
 800178a:	f000 f9f9 	bl	8001b80 <memset>
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <std+0x58>)
 8001790:	6263      	str	r3, [r4, #36]	@ 0x24
 8001792:	4b0d      	ldr	r3, [pc, #52]	@ (80017c8 <std+0x5c>)
 8001794:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <std+0x60>)
 8001798:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800179a:	4b0d      	ldr	r3, [pc, #52]	@ (80017d0 <std+0x64>)
 800179c:	6323      	str	r3, [r4, #48]	@ 0x30
 800179e:	4b0d      	ldr	r3, [pc, #52]	@ (80017d4 <std+0x68>)
 80017a0:	6224      	str	r4, [r4, #32]
 80017a2:	429c      	cmp	r4, r3
 80017a4:	d006      	beq.n	80017b4 <std+0x48>
 80017a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017aa:	4294      	cmp	r4, r2
 80017ac:	d002      	beq.n	80017b4 <std+0x48>
 80017ae:	33d0      	adds	r3, #208	@ 0xd0
 80017b0:	429c      	cmp	r4, r3
 80017b2:	d105      	bne.n	80017c0 <std+0x54>
 80017b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017bc:	f000 ba58 	b.w	8001c70 <__retarget_lock_init_recursive>
 80017c0:	bd10      	pop	{r4, pc}
 80017c2:	bf00      	nop
 80017c4:	080019d1 	.word	0x080019d1
 80017c8:	080019f3 	.word	0x080019f3
 80017cc:	08001a2b 	.word	0x08001a2b
 80017d0:	08001a4f 	.word	0x08001a4f
 80017d4:	2000008c 	.word	0x2000008c

080017d8 <stdio_exit_handler>:
 80017d8:	4a02      	ldr	r2, [pc, #8]	@ (80017e4 <stdio_exit_handler+0xc>)
 80017da:	4903      	ldr	r1, [pc, #12]	@ (80017e8 <stdio_exit_handler+0x10>)
 80017dc:	4803      	ldr	r0, [pc, #12]	@ (80017ec <stdio_exit_handler+0x14>)
 80017de:	f000 b869 	b.w	80018b4 <_fwalk_sglue>
 80017e2:	bf00      	nop
 80017e4:	20000004 	.word	0x20000004
 80017e8:	08002511 	.word	0x08002511
 80017ec:	20000014 	.word	0x20000014

080017f0 <cleanup_stdio>:
 80017f0:	6841      	ldr	r1, [r0, #4]
 80017f2:	4b0c      	ldr	r3, [pc, #48]	@ (8001824 <cleanup_stdio+0x34>)
 80017f4:	4299      	cmp	r1, r3
 80017f6:	b510      	push	{r4, lr}
 80017f8:	4604      	mov	r4, r0
 80017fa:	d001      	beq.n	8001800 <cleanup_stdio+0x10>
 80017fc:	f000 fe88 	bl	8002510 <_fflush_r>
 8001800:	68a1      	ldr	r1, [r4, #8]
 8001802:	4b09      	ldr	r3, [pc, #36]	@ (8001828 <cleanup_stdio+0x38>)
 8001804:	4299      	cmp	r1, r3
 8001806:	d002      	beq.n	800180e <cleanup_stdio+0x1e>
 8001808:	4620      	mov	r0, r4
 800180a:	f000 fe81 	bl	8002510 <_fflush_r>
 800180e:	68e1      	ldr	r1, [r4, #12]
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <cleanup_stdio+0x3c>)
 8001812:	4299      	cmp	r1, r3
 8001814:	d004      	beq.n	8001820 <cleanup_stdio+0x30>
 8001816:	4620      	mov	r0, r4
 8001818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800181c:	f000 be78 	b.w	8002510 <_fflush_r>
 8001820:	bd10      	pop	{r4, pc}
 8001822:	bf00      	nop
 8001824:	2000008c 	.word	0x2000008c
 8001828:	200000f4 	.word	0x200000f4
 800182c:	2000015c 	.word	0x2000015c

08001830 <global_stdio_init.part.0>:
 8001830:	b510      	push	{r4, lr}
 8001832:	4b0b      	ldr	r3, [pc, #44]	@ (8001860 <global_stdio_init.part.0+0x30>)
 8001834:	4c0b      	ldr	r4, [pc, #44]	@ (8001864 <global_stdio_init.part.0+0x34>)
 8001836:	4a0c      	ldr	r2, [pc, #48]	@ (8001868 <global_stdio_init.part.0+0x38>)
 8001838:	601a      	str	r2, [r3, #0]
 800183a:	4620      	mov	r0, r4
 800183c:	2200      	movs	r2, #0
 800183e:	2104      	movs	r1, #4
 8001840:	f7ff ff94 	bl	800176c <std>
 8001844:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001848:	2201      	movs	r2, #1
 800184a:	2109      	movs	r1, #9
 800184c:	f7ff ff8e 	bl	800176c <std>
 8001850:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001854:	2202      	movs	r2, #2
 8001856:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800185a:	2112      	movs	r1, #18
 800185c:	f7ff bf86 	b.w	800176c <std>
 8001860:	200001c4 	.word	0x200001c4
 8001864:	2000008c 	.word	0x2000008c
 8001868:	080017d9 	.word	0x080017d9

0800186c <__sfp_lock_acquire>:
 800186c:	4801      	ldr	r0, [pc, #4]	@ (8001874 <__sfp_lock_acquire+0x8>)
 800186e:	f000 ba00 	b.w	8001c72 <__retarget_lock_acquire_recursive>
 8001872:	bf00      	nop
 8001874:	200001cd 	.word	0x200001cd

08001878 <__sfp_lock_release>:
 8001878:	4801      	ldr	r0, [pc, #4]	@ (8001880 <__sfp_lock_release+0x8>)
 800187a:	f000 b9fb 	b.w	8001c74 <__retarget_lock_release_recursive>
 800187e:	bf00      	nop
 8001880:	200001cd 	.word	0x200001cd

08001884 <__sinit>:
 8001884:	b510      	push	{r4, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	f7ff fff0 	bl	800186c <__sfp_lock_acquire>
 800188c:	6a23      	ldr	r3, [r4, #32]
 800188e:	b11b      	cbz	r3, 8001898 <__sinit+0x14>
 8001890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001894:	f7ff bff0 	b.w	8001878 <__sfp_lock_release>
 8001898:	4b04      	ldr	r3, [pc, #16]	@ (80018ac <__sinit+0x28>)
 800189a:	6223      	str	r3, [r4, #32]
 800189c:	4b04      	ldr	r3, [pc, #16]	@ (80018b0 <__sinit+0x2c>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d1f5      	bne.n	8001890 <__sinit+0xc>
 80018a4:	f7ff ffc4 	bl	8001830 <global_stdio_init.part.0>
 80018a8:	e7f2      	b.n	8001890 <__sinit+0xc>
 80018aa:	bf00      	nop
 80018ac:	080017f1 	.word	0x080017f1
 80018b0:	200001c4 	.word	0x200001c4

080018b4 <_fwalk_sglue>:
 80018b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018b8:	4607      	mov	r7, r0
 80018ba:	4688      	mov	r8, r1
 80018bc:	4614      	mov	r4, r2
 80018be:	2600      	movs	r6, #0
 80018c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018c4:	f1b9 0901 	subs.w	r9, r9, #1
 80018c8:	d505      	bpl.n	80018d6 <_fwalk_sglue+0x22>
 80018ca:	6824      	ldr	r4, [r4, #0]
 80018cc:	2c00      	cmp	r4, #0
 80018ce:	d1f7      	bne.n	80018c0 <_fwalk_sglue+0xc>
 80018d0:	4630      	mov	r0, r6
 80018d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018d6:	89ab      	ldrh	r3, [r5, #12]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d907      	bls.n	80018ec <_fwalk_sglue+0x38>
 80018dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018e0:	3301      	adds	r3, #1
 80018e2:	d003      	beq.n	80018ec <_fwalk_sglue+0x38>
 80018e4:	4629      	mov	r1, r5
 80018e6:	4638      	mov	r0, r7
 80018e8:	47c0      	blx	r8
 80018ea:	4306      	orrs	r6, r0
 80018ec:	3568      	adds	r5, #104	@ 0x68
 80018ee:	e7e9      	b.n	80018c4 <_fwalk_sglue+0x10>

080018f0 <iprintf>:
 80018f0:	b40f      	push	{r0, r1, r2, r3}
 80018f2:	b507      	push	{r0, r1, r2, lr}
 80018f4:	4906      	ldr	r1, [pc, #24]	@ (8001910 <iprintf+0x20>)
 80018f6:	ab04      	add	r3, sp, #16
 80018f8:	6808      	ldr	r0, [r1, #0]
 80018fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80018fe:	6881      	ldr	r1, [r0, #8]
 8001900:	9301      	str	r3, [sp, #4]
 8001902:	f000 fadb 	bl	8001ebc <_vfiprintf_r>
 8001906:	b003      	add	sp, #12
 8001908:	f85d eb04 	ldr.w	lr, [sp], #4
 800190c:	b004      	add	sp, #16
 800190e:	4770      	bx	lr
 8001910:	20000010 	.word	0x20000010

08001914 <_puts_r>:
 8001914:	6a03      	ldr	r3, [r0, #32]
 8001916:	b570      	push	{r4, r5, r6, lr}
 8001918:	6884      	ldr	r4, [r0, #8]
 800191a:	4605      	mov	r5, r0
 800191c:	460e      	mov	r6, r1
 800191e:	b90b      	cbnz	r3, 8001924 <_puts_r+0x10>
 8001920:	f7ff ffb0 	bl	8001884 <__sinit>
 8001924:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001926:	07db      	lsls	r3, r3, #31
 8001928:	d405      	bmi.n	8001936 <_puts_r+0x22>
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	0598      	lsls	r0, r3, #22
 800192e:	d402      	bmi.n	8001936 <_puts_r+0x22>
 8001930:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001932:	f000 f99e 	bl	8001c72 <__retarget_lock_acquire_recursive>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	0719      	lsls	r1, r3, #28
 800193a:	d502      	bpl.n	8001942 <_puts_r+0x2e>
 800193c:	6923      	ldr	r3, [r4, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d135      	bne.n	80019ae <_puts_r+0x9a>
 8001942:	4621      	mov	r1, r4
 8001944:	4628      	mov	r0, r5
 8001946:	f000 f8c5 	bl	8001ad4 <__swsetup_r>
 800194a:	b380      	cbz	r0, 80019ae <_puts_r+0x9a>
 800194c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8001950:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001952:	07da      	lsls	r2, r3, #31
 8001954:	d405      	bmi.n	8001962 <_puts_r+0x4e>
 8001956:	89a3      	ldrh	r3, [r4, #12]
 8001958:	059b      	lsls	r3, r3, #22
 800195a:	d402      	bmi.n	8001962 <_puts_r+0x4e>
 800195c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800195e:	f000 f989 	bl	8001c74 <__retarget_lock_release_recursive>
 8001962:	4628      	mov	r0, r5
 8001964:	bd70      	pop	{r4, r5, r6, pc}
 8001966:	2b00      	cmp	r3, #0
 8001968:	da04      	bge.n	8001974 <_puts_r+0x60>
 800196a:	69a2      	ldr	r2, [r4, #24]
 800196c:	429a      	cmp	r2, r3
 800196e:	dc17      	bgt.n	80019a0 <_puts_r+0x8c>
 8001970:	290a      	cmp	r1, #10
 8001972:	d015      	beq.n	80019a0 <_puts_r+0x8c>
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	6022      	str	r2, [r4, #0]
 800197a:	7019      	strb	r1, [r3, #0]
 800197c:	68a3      	ldr	r3, [r4, #8]
 800197e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001982:	3b01      	subs	r3, #1
 8001984:	60a3      	str	r3, [r4, #8]
 8001986:	2900      	cmp	r1, #0
 8001988:	d1ed      	bne.n	8001966 <_puts_r+0x52>
 800198a:	2b00      	cmp	r3, #0
 800198c:	da11      	bge.n	80019b2 <_puts_r+0x9e>
 800198e:	4622      	mov	r2, r4
 8001990:	210a      	movs	r1, #10
 8001992:	4628      	mov	r0, r5
 8001994:	f000 f85f 	bl	8001a56 <__swbuf_r>
 8001998:	3001      	adds	r0, #1
 800199a:	d0d7      	beq.n	800194c <_puts_r+0x38>
 800199c:	250a      	movs	r5, #10
 800199e:	e7d7      	b.n	8001950 <_puts_r+0x3c>
 80019a0:	4622      	mov	r2, r4
 80019a2:	4628      	mov	r0, r5
 80019a4:	f000 f857 	bl	8001a56 <__swbuf_r>
 80019a8:	3001      	adds	r0, #1
 80019aa:	d1e7      	bne.n	800197c <_puts_r+0x68>
 80019ac:	e7ce      	b.n	800194c <_puts_r+0x38>
 80019ae:	3e01      	subs	r6, #1
 80019b0:	e7e4      	b.n	800197c <_puts_r+0x68>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	6022      	str	r2, [r4, #0]
 80019b8:	220a      	movs	r2, #10
 80019ba:	701a      	strb	r2, [r3, #0]
 80019bc:	e7ee      	b.n	800199c <_puts_r+0x88>
	...

080019c0 <puts>:
 80019c0:	4b02      	ldr	r3, [pc, #8]	@ (80019cc <puts+0xc>)
 80019c2:	4601      	mov	r1, r0
 80019c4:	6818      	ldr	r0, [r3, #0]
 80019c6:	f7ff bfa5 	b.w	8001914 <_puts_r>
 80019ca:	bf00      	nop
 80019cc:	20000010 	.word	0x20000010

080019d0 <__sread>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	460c      	mov	r4, r1
 80019d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d8:	f000 f8fc 	bl	8001bd4 <_read_r>
 80019dc:	2800      	cmp	r0, #0
 80019de:	bfab      	itete	ge
 80019e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80019e2:	89a3      	ldrhlt	r3, [r4, #12]
 80019e4:	181b      	addge	r3, r3, r0
 80019e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80019ea:	bfac      	ite	ge
 80019ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80019ee:	81a3      	strhlt	r3, [r4, #12]
 80019f0:	bd10      	pop	{r4, pc}

080019f2 <__swrite>:
 80019f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f6:	461f      	mov	r7, r3
 80019f8:	898b      	ldrh	r3, [r1, #12]
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	4605      	mov	r5, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	4616      	mov	r6, r2
 8001a02:	d505      	bpl.n	8001a10 <__swrite+0x1e>
 8001a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f000 f8d0 	bl	8001bb0 <_lseek_r>
 8001a10:	89a3      	ldrh	r3, [r4, #12]
 8001a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a16:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a1a:	81a3      	strh	r3, [r4, #12]
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4628      	mov	r0, r5
 8001a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a26:	f000 b8e7 	b.w	8001bf8 <_write_r>

08001a2a <__sseek>:
 8001a2a:	b510      	push	{r4, lr}
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a32:	f000 f8bd 	bl	8001bb0 <_lseek_r>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	bf15      	itete	ne
 8001a3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8001a3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001a42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001a46:	81a3      	strheq	r3, [r4, #12]
 8001a48:	bf18      	it	ne
 8001a4a:	81a3      	strhne	r3, [r4, #12]
 8001a4c:	bd10      	pop	{r4, pc}

08001a4e <__sclose>:
 8001a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a52:	f000 b89d 	b.w	8001b90 <_close_r>

08001a56 <__swbuf_r>:
 8001a56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a58:	460e      	mov	r6, r1
 8001a5a:	4614      	mov	r4, r2
 8001a5c:	4605      	mov	r5, r0
 8001a5e:	b118      	cbz	r0, 8001a68 <__swbuf_r+0x12>
 8001a60:	6a03      	ldr	r3, [r0, #32]
 8001a62:	b90b      	cbnz	r3, 8001a68 <__swbuf_r+0x12>
 8001a64:	f7ff ff0e 	bl	8001884 <__sinit>
 8001a68:	69a3      	ldr	r3, [r4, #24]
 8001a6a:	60a3      	str	r3, [r4, #8]
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	071a      	lsls	r2, r3, #28
 8001a70:	d501      	bpl.n	8001a76 <__swbuf_r+0x20>
 8001a72:	6923      	ldr	r3, [r4, #16]
 8001a74:	b943      	cbnz	r3, 8001a88 <__swbuf_r+0x32>
 8001a76:	4621      	mov	r1, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 f82b 	bl	8001ad4 <__swsetup_r>
 8001a7e:	b118      	cbz	r0, 8001a88 <__swbuf_r+0x32>
 8001a80:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001a84:	4638      	mov	r0, r7
 8001a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a88:	6823      	ldr	r3, [r4, #0]
 8001a8a:	6922      	ldr	r2, [r4, #16]
 8001a8c:	1a98      	subs	r0, r3, r2
 8001a8e:	6963      	ldr	r3, [r4, #20]
 8001a90:	b2f6      	uxtb	r6, r6
 8001a92:	4283      	cmp	r3, r0
 8001a94:	4637      	mov	r7, r6
 8001a96:	dc05      	bgt.n	8001aa4 <__swbuf_r+0x4e>
 8001a98:	4621      	mov	r1, r4
 8001a9a:	4628      	mov	r0, r5
 8001a9c:	f000 fd38 	bl	8002510 <_fflush_r>
 8001aa0:	2800      	cmp	r0, #0
 8001aa2:	d1ed      	bne.n	8001a80 <__swbuf_r+0x2a>
 8001aa4:	68a3      	ldr	r3, [r4, #8]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	60a3      	str	r3, [r4, #8]
 8001aaa:	6823      	ldr	r3, [r4, #0]
 8001aac:	1c5a      	adds	r2, r3, #1
 8001aae:	6022      	str	r2, [r4, #0]
 8001ab0:	701e      	strb	r6, [r3, #0]
 8001ab2:	6962      	ldr	r2, [r4, #20]
 8001ab4:	1c43      	adds	r3, r0, #1
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d004      	beq.n	8001ac4 <__swbuf_r+0x6e>
 8001aba:	89a3      	ldrh	r3, [r4, #12]
 8001abc:	07db      	lsls	r3, r3, #31
 8001abe:	d5e1      	bpl.n	8001a84 <__swbuf_r+0x2e>
 8001ac0:	2e0a      	cmp	r6, #10
 8001ac2:	d1df      	bne.n	8001a84 <__swbuf_r+0x2e>
 8001ac4:	4621      	mov	r1, r4
 8001ac6:	4628      	mov	r0, r5
 8001ac8:	f000 fd22 	bl	8002510 <_fflush_r>
 8001acc:	2800      	cmp	r0, #0
 8001ace:	d0d9      	beq.n	8001a84 <__swbuf_r+0x2e>
 8001ad0:	e7d6      	b.n	8001a80 <__swbuf_r+0x2a>
	...

08001ad4 <__swsetup_r>:
 8001ad4:	b538      	push	{r3, r4, r5, lr}
 8001ad6:	4b29      	ldr	r3, [pc, #164]	@ (8001b7c <__swsetup_r+0xa8>)
 8001ad8:	4605      	mov	r5, r0
 8001ada:	6818      	ldr	r0, [r3, #0]
 8001adc:	460c      	mov	r4, r1
 8001ade:	b118      	cbz	r0, 8001ae8 <__swsetup_r+0x14>
 8001ae0:	6a03      	ldr	r3, [r0, #32]
 8001ae2:	b90b      	cbnz	r3, 8001ae8 <__swsetup_r+0x14>
 8001ae4:	f7ff fece 	bl	8001884 <__sinit>
 8001ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aec:	0719      	lsls	r1, r3, #28
 8001aee:	d422      	bmi.n	8001b36 <__swsetup_r+0x62>
 8001af0:	06da      	lsls	r2, r3, #27
 8001af2:	d407      	bmi.n	8001b04 <__swsetup_r+0x30>
 8001af4:	2209      	movs	r2, #9
 8001af6:	602a      	str	r2, [r5, #0]
 8001af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001afc:	81a3      	strh	r3, [r4, #12]
 8001afe:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001b02:	e033      	b.n	8001b6c <__swsetup_r+0x98>
 8001b04:	0758      	lsls	r0, r3, #29
 8001b06:	d512      	bpl.n	8001b2e <__swsetup_r+0x5a>
 8001b08:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001b0a:	b141      	cbz	r1, 8001b1e <__swsetup_r+0x4a>
 8001b0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001b10:	4299      	cmp	r1, r3
 8001b12:	d002      	beq.n	8001b1a <__swsetup_r+0x46>
 8001b14:	4628      	mov	r0, r5
 8001b16:	f000 f8af 	bl	8001c78 <_free_r>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001b24:	81a3      	strh	r3, [r4, #12]
 8001b26:	2300      	movs	r3, #0
 8001b28:	6063      	str	r3, [r4, #4]
 8001b2a:	6923      	ldr	r3, [r4, #16]
 8001b2c:	6023      	str	r3, [r4, #0]
 8001b2e:	89a3      	ldrh	r3, [r4, #12]
 8001b30:	f043 0308 	orr.w	r3, r3, #8
 8001b34:	81a3      	strh	r3, [r4, #12]
 8001b36:	6923      	ldr	r3, [r4, #16]
 8001b38:	b94b      	cbnz	r3, 8001b4e <__swsetup_r+0x7a>
 8001b3a:	89a3      	ldrh	r3, [r4, #12]
 8001b3c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001b40:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b44:	d003      	beq.n	8001b4e <__swsetup_r+0x7a>
 8001b46:	4621      	mov	r1, r4
 8001b48:	4628      	mov	r0, r5
 8001b4a:	f000 fd2f 	bl	80025ac <__smakebuf_r>
 8001b4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b52:	f013 0201 	ands.w	r2, r3, #1
 8001b56:	d00a      	beq.n	8001b6e <__swsetup_r+0x9a>
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60a2      	str	r2, [r4, #8]
 8001b5c:	6962      	ldr	r2, [r4, #20]
 8001b5e:	4252      	negs	r2, r2
 8001b60:	61a2      	str	r2, [r4, #24]
 8001b62:	6922      	ldr	r2, [r4, #16]
 8001b64:	b942      	cbnz	r2, 8001b78 <__swsetup_r+0xa4>
 8001b66:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001b6a:	d1c5      	bne.n	8001af8 <__swsetup_r+0x24>
 8001b6c:	bd38      	pop	{r3, r4, r5, pc}
 8001b6e:	0799      	lsls	r1, r3, #30
 8001b70:	bf58      	it	pl
 8001b72:	6962      	ldrpl	r2, [r4, #20]
 8001b74:	60a2      	str	r2, [r4, #8]
 8001b76:	e7f4      	b.n	8001b62 <__swsetup_r+0x8e>
 8001b78:	2000      	movs	r0, #0
 8001b7a:	e7f7      	b.n	8001b6c <__swsetup_r+0x98>
 8001b7c:	20000010 	.word	0x20000010

08001b80 <memset>:
 8001b80:	4402      	add	r2, r0
 8001b82:	4603      	mov	r3, r0
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d100      	bne.n	8001b8a <memset+0xa>
 8001b88:	4770      	bx	lr
 8001b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8001b8e:	e7f9      	b.n	8001b84 <memset+0x4>

08001b90 <_close_r>:
 8001b90:	b538      	push	{r3, r4, r5, lr}
 8001b92:	4d06      	ldr	r5, [pc, #24]	@ (8001bac <_close_r+0x1c>)
 8001b94:	2300      	movs	r3, #0
 8001b96:	4604      	mov	r4, r0
 8001b98:	4608      	mov	r0, r1
 8001b9a:	602b      	str	r3, [r5, #0]
 8001b9c:	f7ff fd1b 	bl	80015d6 <_close>
 8001ba0:	1c43      	adds	r3, r0, #1
 8001ba2:	d102      	bne.n	8001baa <_close_r+0x1a>
 8001ba4:	682b      	ldr	r3, [r5, #0]
 8001ba6:	b103      	cbz	r3, 8001baa <_close_r+0x1a>
 8001ba8:	6023      	str	r3, [r4, #0]
 8001baa:	bd38      	pop	{r3, r4, r5, pc}
 8001bac:	200001c8 	.word	0x200001c8

08001bb0 <_lseek_r>:
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4d07      	ldr	r5, [pc, #28]	@ (8001bd0 <_lseek_r+0x20>)
 8001bb4:	4604      	mov	r4, r0
 8001bb6:	4608      	mov	r0, r1
 8001bb8:	4611      	mov	r1, r2
 8001bba:	2200      	movs	r2, #0
 8001bbc:	602a      	str	r2, [r5, #0]
 8001bbe:	461a      	mov	r2, r3
 8001bc0:	f7ff fd30 	bl	8001624 <_lseek>
 8001bc4:	1c43      	adds	r3, r0, #1
 8001bc6:	d102      	bne.n	8001bce <_lseek_r+0x1e>
 8001bc8:	682b      	ldr	r3, [r5, #0]
 8001bca:	b103      	cbz	r3, 8001bce <_lseek_r+0x1e>
 8001bcc:	6023      	str	r3, [r4, #0]
 8001bce:	bd38      	pop	{r3, r4, r5, pc}
 8001bd0:	200001c8 	.word	0x200001c8

08001bd4 <_read_r>:
 8001bd4:	b538      	push	{r3, r4, r5, lr}
 8001bd6:	4d07      	ldr	r5, [pc, #28]	@ (8001bf4 <_read_r+0x20>)
 8001bd8:	4604      	mov	r4, r0
 8001bda:	4608      	mov	r0, r1
 8001bdc:	4611      	mov	r1, r2
 8001bde:	2200      	movs	r2, #0
 8001be0:	602a      	str	r2, [r5, #0]
 8001be2:	461a      	mov	r2, r3
 8001be4:	f7ff fcbe 	bl	8001564 <_read>
 8001be8:	1c43      	adds	r3, r0, #1
 8001bea:	d102      	bne.n	8001bf2 <_read_r+0x1e>
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	b103      	cbz	r3, 8001bf2 <_read_r+0x1e>
 8001bf0:	6023      	str	r3, [r4, #0]
 8001bf2:	bd38      	pop	{r3, r4, r5, pc}
 8001bf4:	200001c8 	.word	0x200001c8

08001bf8 <_write_r>:
 8001bf8:	b538      	push	{r3, r4, r5, lr}
 8001bfa:	4d07      	ldr	r5, [pc, #28]	@ (8001c18 <_write_r+0x20>)
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	4608      	mov	r0, r1
 8001c00:	4611      	mov	r1, r2
 8001c02:	2200      	movs	r2, #0
 8001c04:	602a      	str	r2, [r5, #0]
 8001c06:	461a      	mov	r2, r3
 8001c08:	f7ff fcc9 	bl	800159e <_write>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_write_r+0x1e>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_write_r+0x1e>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	200001c8 	.word	0x200001c8

08001c1c <__errno>:
 8001c1c:	4b01      	ldr	r3, [pc, #4]	@ (8001c24 <__errno+0x8>)
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000010 	.word	0x20000010

08001c28 <__libc_init_array>:
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	4d0d      	ldr	r5, [pc, #52]	@ (8001c60 <__libc_init_array+0x38>)
 8001c2c:	4c0d      	ldr	r4, [pc, #52]	@ (8001c64 <__libc_init_array+0x3c>)
 8001c2e:	1b64      	subs	r4, r4, r5
 8001c30:	10a4      	asrs	r4, r4, #2
 8001c32:	2600      	movs	r6, #0
 8001c34:	42a6      	cmp	r6, r4
 8001c36:	d109      	bne.n	8001c4c <__libc_init_array+0x24>
 8001c38:	4d0b      	ldr	r5, [pc, #44]	@ (8001c68 <__libc_init_array+0x40>)
 8001c3a:	4c0c      	ldr	r4, [pc, #48]	@ (8001c6c <__libc_init_array+0x44>)
 8001c3c:	f000 fd24 	bl	8002688 <_init>
 8001c40:	1b64      	subs	r4, r4, r5
 8001c42:	10a4      	asrs	r4, r4, #2
 8001c44:	2600      	movs	r6, #0
 8001c46:	42a6      	cmp	r6, r4
 8001c48:	d105      	bne.n	8001c56 <__libc_init_array+0x2e>
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
 8001c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c50:	4798      	blx	r3
 8001c52:	3601      	adds	r6, #1
 8001c54:	e7ee      	b.n	8001c34 <__libc_init_array+0xc>
 8001c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8001c5a:	4798      	blx	r3
 8001c5c:	3601      	adds	r6, #1
 8001c5e:	e7f2      	b.n	8001c46 <__libc_init_array+0x1e>
 8001c60:	080027b0 	.word	0x080027b0
 8001c64:	080027b0 	.word	0x080027b0
 8001c68:	080027b0 	.word	0x080027b0
 8001c6c:	080027b4 	.word	0x080027b4

08001c70 <__retarget_lock_init_recursive>:
 8001c70:	4770      	bx	lr

08001c72 <__retarget_lock_acquire_recursive>:
 8001c72:	4770      	bx	lr

08001c74 <__retarget_lock_release_recursive>:
 8001c74:	4770      	bx	lr
	...

08001c78 <_free_r>:
 8001c78:	b538      	push	{r3, r4, r5, lr}
 8001c7a:	4605      	mov	r5, r0
 8001c7c:	2900      	cmp	r1, #0
 8001c7e:	d041      	beq.n	8001d04 <_free_r+0x8c>
 8001c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c84:	1f0c      	subs	r4, r1, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	bfb8      	it	lt
 8001c8a:	18e4      	addlt	r4, r4, r3
 8001c8c:	f000 f8e0 	bl	8001e50 <__malloc_lock>
 8001c90:	4a1d      	ldr	r2, [pc, #116]	@ (8001d08 <_free_r+0x90>)
 8001c92:	6813      	ldr	r3, [r2, #0]
 8001c94:	b933      	cbnz	r3, 8001ca4 <_free_r+0x2c>
 8001c96:	6063      	str	r3, [r4, #4]
 8001c98:	6014      	str	r4, [r2, #0]
 8001c9a:	4628      	mov	r0, r5
 8001c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ca0:	f000 b8dc 	b.w	8001e5c <__malloc_unlock>
 8001ca4:	42a3      	cmp	r3, r4
 8001ca6:	d908      	bls.n	8001cba <_free_r+0x42>
 8001ca8:	6820      	ldr	r0, [r4, #0]
 8001caa:	1821      	adds	r1, r4, r0
 8001cac:	428b      	cmp	r3, r1
 8001cae:	bf01      	itttt	eq
 8001cb0:	6819      	ldreq	r1, [r3, #0]
 8001cb2:	685b      	ldreq	r3, [r3, #4]
 8001cb4:	1809      	addeq	r1, r1, r0
 8001cb6:	6021      	streq	r1, [r4, #0]
 8001cb8:	e7ed      	b.n	8001c96 <_free_r+0x1e>
 8001cba:	461a      	mov	r2, r3
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	b10b      	cbz	r3, 8001cc4 <_free_r+0x4c>
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	d9fa      	bls.n	8001cba <_free_r+0x42>
 8001cc4:	6811      	ldr	r1, [r2, #0]
 8001cc6:	1850      	adds	r0, r2, r1
 8001cc8:	42a0      	cmp	r0, r4
 8001cca:	d10b      	bne.n	8001ce4 <_free_r+0x6c>
 8001ccc:	6820      	ldr	r0, [r4, #0]
 8001cce:	4401      	add	r1, r0
 8001cd0:	1850      	adds	r0, r2, r1
 8001cd2:	4283      	cmp	r3, r0
 8001cd4:	6011      	str	r1, [r2, #0]
 8001cd6:	d1e0      	bne.n	8001c9a <_free_r+0x22>
 8001cd8:	6818      	ldr	r0, [r3, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	6053      	str	r3, [r2, #4]
 8001cde:	4408      	add	r0, r1
 8001ce0:	6010      	str	r0, [r2, #0]
 8001ce2:	e7da      	b.n	8001c9a <_free_r+0x22>
 8001ce4:	d902      	bls.n	8001cec <_free_r+0x74>
 8001ce6:	230c      	movs	r3, #12
 8001ce8:	602b      	str	r3, [r5, #0]
 8001cea:	e7d6      	b.n	8001c9a <_free_r+0x22>
 8001cec:	6820      	ldr	r0, [r4, #0]
 8001cee:	1821      	adds	r1, r4, r0
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	bf04      	itt	eq
 8001cf4:	6819      	ldreq	r1, [r3, #0]
 8001cf6:	685b      	ldreq	r3, [r3, #4]
 8001cf8:	6063      	str	r3, [r4, #4]
 8001cfa:	bf04      	itt	eq
 8001cfc:	1809      	addeq	r1, r1, r0
 8001cfe:	6021      	streq	r1, [r4, #0]
 8001d00:	6054      	str	r4, [r2, #4]
 8001d02:	e7ca      	b.n	8001c9a <_free_r+0x22>
 8001d04:	bd38      	pop	{r3, r4, r5, pc}
 8001d06:	bf00      	nop
 8001d08:	200001d4 	.word	0x200001d4

08001d0c <sbrk_aligned>:
 8001d0c:	b570      	push	{r4, r5, r6, lr}
 8001d0e:	4e0f      	ldr	r6, [pc, #60]	@ (8001d4c <sbrk_aligned+0x40>)
 8001d10:	460c      	mov	r4, r1
 8001d12:	6831      	ldr	r1, [r6, #0]
 8001d14:	4605      	mov	r5, r0
 8001d16:	b911      	cbnz	r1, 8001d1e <sbrk_aligned+0x12>
 8001d18:	f000 fca6 	bl	8002668 <_sbrk_r>
 8001d1c:	6030      	str	r0, [r6, #0]
 8001d1e:	4621      	mov	r1, r4
 8001d20:	4628      	mov	r0, r5
 8001d22:	f000 fca1 	bl	8002668 <_sbrk_r>
 8001d26:	1c43      	adds	r3, r0, #1
 8001d28:	d103      	bne.n	8001d32 <sbrk_aligned+0x26>
 8001d2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8001d2e:	4620      	mov	r0, r4
 8001d30:	bd70      	pop	{r4, r5, r6, pc}
 8001d32:	1cc4      	adds	r4, r0, #3
 8001d34:	f024 0403 	bic.w	r4, r4, #3
 8001d38:	42a0      	cmp	r0, r4
 8001d3a:	d0f8      	beq.n	8001d2e <sbrk_aligned+0x22>
 8001d3c:	1a21      	subs	r1, r4, r0
 8001d3e:	4628      	mov	r0, r5
 8001d40:	f000 fc92 	bl	8002668 <_sbrk_r>
 8001d44:	3001      	adds	r0, #1
 8001d46:	d1f2      	bne.n	8001d2e <sbrk_aligned+0x22>
 8001d48:	e7ef      	b.n	8001d2a <sbrk_aligned+0x1e>
 8001d4a:	bf00      	nop
 8001d4c:	200001d0 	.word	0x200001d0

08001d50 <_malloc_r>:
 8001d50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001d54:	1ccd      	adds	r5, r1, #3
 8001d56:	f025 0503 	bic.w	r5, r5, #3
 8001d5a:	3508      	adds	r5, #8
 8001d5c:	2d0c      	cmp	r5, #12
 8001d5e:	bf38      	it	cc
 8001d60:	250c      	movcc	r5, #12
 8001d62:	2d00      	cmp	r5, #0
 8001d64:	4606      	mov	r6, r0
 8001d66:	db01      	blt.n	8001d6c <_malloc_r+0x1c>
 8001d68:	42a9      	cmp	r1, r5
 8001d6a:	d904      	bls.n	8001d76 <_malloc_r+0x26>
 8001d6c:	230c      	movs	r3, #12
 8001d6e:	6033      	str	r3, [r6, #0]
 8001d70:	2000      	movs	r0, #0
 8001d72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001d76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001e4c <_malloc_r+0xfc>
 8001d7a:	f000 f869 	bl	8001e50 <__malloc_lock>
 8001d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8001d82:	461c      	mov	r4, r3
 8001d84:	bb44      	cbnz	r4, 8001dd8 <_malloc_r+0x88>
 8001d86:	4629      	mov	r1, r5
 8001d88:	4630      	mov	r0, r6
 8001d8a:	f7ff ffbf 	bl	8001d0c <sbrk_aligned>
 8001d8e:	1c43      	adds	r3, r0, #1
 8001d90:	4604      	mov	r4, r0
 8001d92:	d158      	bne.n	8001e46 <_malloc_r+0xf6>
 8001d94:	f8d8 4000 	ldr.w	r4, [r8]
 8001d98:	4627      	mov	r7, r4
 8001d9a:	2f00      	cmp	r7, #0
 8001d9c:	d143      	bne.n	8001e26 <_malloc_r+0xd6>
 8001d9e:	2c00      	cmp	r4, #0
 8001da0:	d04b      	beq.n	8001e3a <_malloc_r+0xea>
 8001da2:	6823      	ldr	r3, [r4, #0]
 8001da4:	4639      	mov	r1, r7
 8001da6:	4630      	mov	r0, r6
 8001da8:	eb04 0903 	add.w	r9, r4, r3
 8001dac:	f000 fc5c 	bl	8002668 <_sbrk_r>
 8001db0:	4581      	cmp	r9, r0
 8001db2:	d142      	bne.n	8001e3a <_malloc_r+0xea>
 8001db4:	6821      	ldr	r1, [r4, #0]
 8001db6:	1a6d      	subs	r5, r5, r1
 8001db8:	4629      	mov	r1, r5
 8001dba:	4630      	mov	r0, r6
 8001dbc:	f7ff ffa6 	bl	8001d0c <sbrk_aligned>
 8001dc0:	3001      	adds	r0, #1
 8001dc2:	d03a      	beq.n	8001e3a <_malloc_r+0xea>
 8001dc4:	6823      	ldr	r3, [r4, #0]
 8001dc6:	442b      	add	r3, r5
 8001dc8:	6023      	str	r3, [r4, #0]
 8001dca:	f8d8 3000 	ldr.w	r3, [r8]
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	bb62      	cbnz	r2, 8001e2c <_malloc_r+0xdc>
 8001dd2:	f8c8 7000 	str.w	r7, [r8]
 8001dd6:	e00f      	b.n	8001df8 <_malloc_r+0xa8>
 8001dd8:	6822      	ldr	r2, [r4, #0]
 8001dda:	1b52      	subs	r2, r2, r5
 8001ddc:	d420      	bmi.n	8001e20 <_malloc_r+0xd0>
 8001dde:	2a0b      	cmp	r2, #11
 8001de0:	d917      	bls.n	8001e12 <_malloc_r+0xc2>
 8001de2:	1961      	adds	r1, r4, r5
 8001de4:	42a3      	cmp	r3, r4
 8001de6:	6025      	str	r5, [r4, #0]
 8001de8:	bf18      	it	ne
 8001dea:	6059      	strne	r1, [r3, #4]
 8001dec:	6863      	ldr	r3, [r4, #4]
 8001dee:	bf08      	it	eq
 8001df0:	f8c8 1000 	streq.w	r1, [r8]
 8001df4:	5162      	str	r2, [r4, r5]
 8001df6:	604b      	str	r3, [r1, #4]
 8001df8:	4630      	mov	r0, r6
 8001dfa:	f000 f82f 	bl	8001e5c <__malloc_unlock>
 8001dfe:	f104 000b 	add.w	r0, r4, #11
 8001e02:	1d23      	adds	r3, r4, #4
 8001e04:	f020 0007 	bic.w	r0, r0, #7
 8001e08:	1ac2      	subs	r2, r0, r3
 8001e0a:	bf1c      	itt	ne
 8001e0c:	1a1b      	subne	r3, r3, r0
 8001e0e:	50a3      	strne	r3, [r4, r2]
 8001e10:	e7af      	b.n	8001d72 <_malloc_r+0x22>
 8001e12:	6862      	ldr	r2, [r4, #4]
 8001e14:	42a3      	cmp	r3, r4
 8001e16:	bf0c      	ite	eq
 8001e18:	f8c8 2000 	streq.w	r2, [r8]
 8001e1c:	605a      	strne	r2, [r3, #4]
 8001e1e:	e7eb      	b.n	8001df8 <_malloc_r+0xa8>
 8001e20:	4623      	mov	r3, r4
 8001e22:	6864      	ldr	r4, [r4, #4]
 8001e24:	e7ae      	b.n	8001d84 <_malloc_r+0x34>
 8001e26:	463c      	mov	r4, r7
 8001e28:	687f      	ldr	r7, [r7, #4]
 8001e2a:	e7b6      	b.n	8001d9a <_malloc_r+0x4a>
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	42a3      	cmp	r3, r4
 8001e32:	d1fb      	bne.n	8001e2c <_malloc_r+0xdc>
 8001e34:	2300      	movs	r3, #0
 8001e36:	6053      	str	r3, [r2, #4]
 8001e38:	e7de      	b.n	8001df8 <_malloc_r+0xa8>
 8001e3a:	230c      	movs	r3, #12
 8001e3c:	6033      	str	r3, [r6, #0]
 8001e3e:	4630      	mov	r0, r6
 8001e40:	f000 f80c 	bl	8001e5c <__malloc_unlock>
 8001e44:	e794      	b.n	8001d70 <_malloc_r+0x20>
 8001e46:	6005      	str	r5, [r0, #0]
 8001e48:	e7d6      	b.n	8001df8 <_malloc_r+0xa8>
 8001e4a:	bf00      	nop
 8001e4c:	200001d4 	.word	0x200001d4

08001e50 <__malloc_lock>:
 8001e50:	4801      	ldr	r0, [pc, #4]	@ (8001e58 <__malloc_lock+0x8>)
 8001e52:	f7ff bf0e 	b.w	8001c72 <__retarget_lock_acquire_recursive>
 8001e56:	bf00      	nop
 8001e58:	200001cc 	.word	0x200001cc

08001e5c <__malloc_unlock>:
 8001e5c:	4801      	ldr	r0, [pc, #4]	@ (8001e64 <__malloc_unlock+0x8>)
 8001e5e:	f7ff bf09 	b.w	8001c74 <__retarget_lock_release_recursive>
 8001e62:	bf00      	nop
 8001e64:	200001cc 	.word	0x200001cc

08001e68 <__sfputc_r>:
 8001e68:	6893      	ldr	r3, [r2, #8]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	b410      	push	{r4}
 8001e70:	6093      	str	r3, [r2, #8]
 8001e72:	da08      	bge.n	8001e86 <__sfputc_r+0x1e>
 8001e74:	6994      	ldr	r4, [r2, #24]
 8001e76:	42a3      	cmp	r3, r4
 8001e78:	db01      	blt.n	8001e7e <__sfputc_r+0x16>
 8001e7a:	290a      	cmp	r1, #10
 8001e7c:	d103      	bne.n	8001e86 <__sfputc_r+0x1e>
 8001e7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e82:	f7ff bde8 	b.w	8001a56 <__swbuf_r>
 8001e86:	6813      	ldr	r3, [r2, #0]
 8001e88:	1c58      	adds	r0, r3, #1
 8001e8a:	6010      	str	r0, [r2, #0]
 8001e8c:	7019      	strb	r1, [r3, #0]
 8001e8e:	4608      	mov	r0, r1
 8001e90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001e94:	4770      	bx	lr

08001e96 <__sfputs_r>:
 8001e96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e98:	4606      	mov	r6, r0
 8001e9a:	460f      	mov	r7, r1
 8001e9c:	4614      	mov	r4, r2
 8001e9e:	18d5      	adds	r5, r2, r3
 8001ea0:	42ac      	cmp	r4, r5
 8001ea2:	d101      	bne.n	8001ea8 <__sfputs_r+0x12>
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e007      	b.n	8001eb8 <__sfputs_r+0x22>
 8001ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001eac:	463a      	mov	r2, r7
 8001eae:	4630      	mov	r0, r6
 8001eb0:	f7ff ffda 	bl	8001e68 <__sfputc_r>
 8001eb4:	1c43      	adds	r3, r0, #1
 8001eb6:	d1f3      	bne.n	8001ea0 <__sfputs_r+0xa>
 8001eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001ebc <_vfiprintf_r>:
 8001ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	b09d      	sub	sp, #116	@ 0x74
 8001ec4:	4614      	mov	r4, r2
 8001ec6:	4698      	mov	r8, r3
 8001ec8:	4606      	mov	r6, r0
 8001eca:	b118      	cbz	r0, 8001ed4 <_vfiprintf_r+0x18>
 8001ecc:	6a03      	ldr	r3, [r0, #32]
 8001ece:	b90b      	cbnz	r3, 8001ed4 <_vfiprintf_r+0x18>
 8001ed0:	f7ff fcd8 	bl	8001884 <__sinit>
 8001ed4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ed6:	07d9      	lsls	r1, r3, #31
 8001ed8:	d405      	bmi.n	8001ee6 <_vfiprintf_r+0x2a>
 8001eda:	89ab      	ldrh	r3, [r5, #12]
 8001edc:	059a      	lsls	r2, r3, #22
 8001ede:	d402      	bmi.n	8001ee6 <_vfiprintf_r+0x2a>
 8001ee0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001ee2:	f7ff fec6 	bl	8001c72 <__retarget_lock_acquire_recursive>
 8001ee6:	89ab      	ldrh	r3, [r5, #12]
 8001ee8:	071b      	lsls	r3, r3, #28
 8001eea:	d501      	bpl.n	8001ef0 <_vfiprintf_r+0x34>
 8001eec:	692b      	ldr	r3, [r5, #16]
 8001eee:	b99b      	cbnz	r3, 8001f18 <_vfiprintf_r+0x5c>
 8001ef0:	4629      	mov	r1, r5
 8001ef2:	4630      	mov	r0, r6
 8001ef4:	f7ff fdee 	bl	8001ad4 <__swsetup_r>
 8001ef8:	b170      	cbz	r0, 8001f18 <_vfiprintf_r+0x5c>
 8001efa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001efc:	07dc      	lsls	r4, r3, #31
 8001efe:	d504      	bpl.n	8001f0a <_vfiprintf_r+0x4e>
 8001f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001f04:	b01d      	add	sp, #116	@ 0x74
 8001f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f0a:	89ab      	ldrh	r3, [r5, #12]
 8001f0c:	0598      	lsls	r0, r3, #22
 8001f0e:	d4f7      	bmi.n	8001f00 <_vfiprintf_r+0x44>
 8001f10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001f12:	f7ff feaf 	bl	8001c74 <__retarget_lock_release_recursive>
 8001f16:	e7f3      	b.n	8001f00 <_vfiprintf_r+0x44>
 8001f18:	2300      	movs	r3, #0
 8001f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8001f1c:	2320      	movs	r3, #32
 8001f1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001f22:	f8cd 800c 	str.w	r8, [sp, #12]
 8001f26:	2330      	movs	r3, #48	@ 0x30
 8001f28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80020d8 <_vfiprintf_r+0x21c>
 8001f2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001f30:	f04f 0901 	mov.w	r9, #1
 8001f34:	4623      	mov	r3, r4
 8001f36:	469a      	mov	sl, r3
 8001f38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f3c:	b10a      	cbz	r2, 8001f42 <_vfiprintf_r+0x86>
 8001f3e:	2a25      	cmp	r2, #37	@ 0x25
 8001f40:	d1f9      	bne.n	8001f36 <_vfiprintf_r+0x7a>
 8001f42:	ebba 0b04 	subs.w	fp, sl, r4
 8001f46:	d00b      	beq.n	8001f60 <_vfiprintf_r+0xa4>
 8001f48:	465b      	mov	r3, fp
 8001f4a:	4622      	mov	r2, r4
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	4630      	mov	r0, r6
 8001f50:	f7ff ffa1 	bl	8001e96 <__sfputs_r>
 8001f54:	3001      	adds	r0, #1
 8001f56:	f000 80a7 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001f5c:	445a      	add	r2, fp
 8001f5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8001f60:	f89a 3000 	ldrb.w	r3, [sl]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 809f 	beq.w	80020a8 <_vfiprintf_r+0x1ec>
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001f70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001f74:	f10a 0a01 	add.w	sl, sl, #1
 8001f78:	9304      	str	r3, [sp, #16]
 8001f7a:	9307      	str	r3, [sp, #28]
 8001f7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001f80:	931a      	str	r3, [sp, #104]	@ 0x68
 8001f82:	4654      	mov	r4, sl
 8001f84:	2205      	movs	r2, #5
 8001f86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001f8a:	4853      	ldr	r0, [pc, #332]	@ (80020d8 <_vfiprintf_r+0x21c>)
 8001f8c:	f7fe f920 	bl	80001d0 <memchr>
 8001f90:	9a04      	ldr	r2, [sp, #16]
 8001f92:	b9d8      	cbnz	r0, 8001fcc <_vfiprintf_r+0x110>
 8001f94:	06d1      	lsls	r1, r2, #27
 8001f96:	bf44      	itt	mi
 8001f98:	2320      	movmi	r3, #32
 8001f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001f9e:	0713      	lsls	r3, r2, #28
 8001fa0:	bf44      	itt	mi
 8001fa2:	232b      	movmi	r3, #43	@ 0x2b
 8001fa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001fa8:	f89a 3000 	ldrb.w	r3, [sl]
 8001fac:	2b2a      	cmp	r3, #42	@ 0x2a
 8001fae:	d015      	beq.n	8001fdc <_vfiprintf_r+0x120>
 8001fb0:	9a07      	ldr	r2, [sp, #28]
 8001fb2:	4654      	mov	r4, sl
 8001fb4:	2000      	movs	r0, #0
 8001fb6:	f04f 0c0a 	mov.w	ip, #10
 8001fba:	4621      	mov	r1, r4
 8001fbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001fc0:	3b30      	subs	r3, #48	@ 0x30
 8001fc2:	2b09      	cmp	r3, #9
 8001fc4:	d94b      	bls.n	800205e <_vfiprintf_r+0x1a2>
 8001fc6:	b1b0      	cbz	r0, 8001ff6 <_vfiprintf_r+0x13a>
 8001fc8:	9207      	str	r2, [sp, #28]
 8001fca:	e014      	b.n	8001ff6 <_vfiprintf_r+0x13a>
 8001fcc:	eba0 0308 	sub.w	r3, r0, r8
 8001fd0:	fa09 f303 	lsl.w	r3, r9, r3
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	9304      	str	r3, [sp, #16]
 8001fd8:	46a2      	mov	sl, r4
 8001fda:	e7d2      	b.n	8001f82 <_vfiprintf_r+0xc6>
 8001fdc:	9b03      	ldr	r3, [sp, #12]
 8001fde:	1d19      	adds	r1, r3, #4
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	9103      	str	r1, [sp, #12]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	bfbb      	ittet	lt
 8001fe8:	425b      	neglt	r3, r3
 8001fea:	f042 0202 	orrlt.w	r2, r2, #2
 8001fee:	9307      	strge	r3, [sp, #28]
 8001ff0:	9307      	strlt	r3, [sp, #28]
 8001ff2:	bfb8      	it	lt
 8001ff4:	9204      	strlt	r2, [sp, #16]
 8001ff6:	7823      	ldrb	r3, [r4, #0]
 8001ff8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001ffa:	d10a      	bne.n	8002012 <_vfiprintf_r+0x156>
 8001ffc:	7863      	ldrb	r3, [r4, #1]
 8001ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8002000:	d132      	bne.n	8002068 <_vfiprintf_r+0x1ac>
 8002002:	9b03      	ldr	r3, [sp, #12]
 8002004:	1d1a      	adds	r2, r3, #4
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	9203      	str	r2, [sp, #12]
 800200a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800200e:	3402      	adds	r4, #2
 8002010:	9305      	str	r3, [sp, #20]
 8002012:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80020e8 <_vfiprintf_r+0x22c>
 8002016:	7821      	ldrb	r1, [r4, #0]
 8002018:	2203      	movs	r2, #3
 800201a:	4650      	mov	r0, sl
 800201c:	f7fe f8d8 	bl	80001d0 <memchr>
 8002020:	b138      	cbz	r0, 8002032 <_vfiprintf_r+0x176>
 8002022:	9b04      	ldr	r3, [sp, #16]
 8002024:	eba0 000a 	sub.w	r0, r0, sl
 8002028:	2240      	movs	r2, #64	@ 0x40
 800202a:	4082      	lsls	r2, r0
 800202c:	4313      	orrs	r3, r2
 800202e:	3401      	adds	r4, #1
 8002030:	9304      	str	r3, [sp, #16]
 8002032:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002036:	4829      	ldr	r0, [pc, #164]	@ (80020dc <_vfiprintf_r+0x220>)
 8002038:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800203c:	2206      	movs	r2, #6
 800203e:	f7fe f8c7 	bl	80001d0 <memchr>
 8002042:	2800      	cmp	r0, #0
 8002044:	d03f      	beq.n	80020c6 <_vfiprintf_r+0x20a>
 8002046:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <_vfiprintf_r+0x224>)
 8002048:	bb1b      	cbnz	r3, 8002092 <_vfiprintf_r+0x1d6>
 800204a:	9b03      	ldr	r3, [sp, #12]
 800204c:	3307      	adds	r3, #7
 800204e:	f023 0307 	bic.w	r3, r3, #7
 8002052:	3308      	adds	r3, #8
 8002054:	9303      	str	r3, [sp, #12]
 8002056:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002058:	443b      	add	r3, r7
 800205a:	9309      	str	r3, [sp, #36]	@ 0x24
 800205c:	e76a      	b.n	8001f34 <_vfiprintf_r+0x78>
 800205e:	fb0c 3202 	mla	r2, ip, r2, r3
 8002062:	460c      	mov	r4, r1
 8002064:	2001      	movs	r0, #1
 8002066:	e7a8      	b.n	8001fba <_vfiprintf_r+0xfe>
 8002068:	2300      	movs	r3, #0
 800206a:	3401      	adds	r4, #1
 800206c:	9305      	str	r3, [sp, #20]
 800206e:	4619      	mov	r1, r3
 8002070:	f04f 0c0a 	mov.w	ip, #10
 8002074:	4620      	mov	r0, r4
 8002076:	f810 2b01 	ldrb.w	r2, [r0], #1
 800207a:	3a30      	subs	r2, #48	@ 0x30
 800207c:	2a09      	cmp	r2, #9
 800207e:	d903      	bls.n	8002088 <_vfiprintf_r+0x1cc>
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0c6      	beq.n	8002012 <_vfiprintf_r+0x156>
 8002084:	9105      	str	r1, [sp, #20]
 8002086:	e7c4      	b.n	8002012 <_vfiprintf_r+0x156>
 8002088:	fb0c 2101 	mla	r1, ip, r1, r2
 800208c:	4604      	mov	r4, r0
 800208e:	2301      	movs	r3, #1
 8002090:	e7f0      	b.n	8002074 <_vfiprintf_r+0x1b8>
 8002092:	ab03      	add	r3, sp, #12
 8002094:	9300      	str	r3, [sp, #0]
 8002096:	462a      	mov	r2, r5
 8002098:	4b12      	ldr	r3, [pc, #72]	@ (80020e4 <_vfiprintf_r+0x228>)
 800209a:	a904      	add	r1, sp, #16
 800209c:	4630      	mov	r0, r6
 800209e:	f3af 8000 	nop.w
 80020a2:	4607      	mov	r7, r0
 80020a4:	1c78      	adds	r0, r7, #1
 80020a6:	d1d6      	bne.n	8002056 <_vfiprintf_r+0x19a>
 80020a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80020aa:	07d9      	lsls	r1, r3, #31
 80020ac:	d405      	bmi.n	80020ba <_vfiprintf_r+0x1fe>
 80020ae:	89ab      	ldrh	r3, [r5, #12]
 80020b0:	059a      	lsls	r2, r3, #22
 80020b2:	d402      	bmi.n	80020ba <_vfiprintf_r+0x1fe>
 80020b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80020b6:	f7ff fddd 	bl	8001c74 <__retarget_lock_release_recursive>
 80020ba:	89ab      	ldrh	r3, [r5, #12]
 80020bc:	065b      	lsls	r3, r3, #25
 80020be:	f53f af1f 	bmi.w	8001f00 <_vfiprintf_r+0x44>
 80020c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80020c4:	e71e      	b.n	8001f04 <_vfiprintf_r+0x48>
 80020c6:	ab03      	add	r3, sp, #12
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	462a      	mov	r2, r5
 80020cc:	4b05      	ldr	r3, [pc, #20]	@ (80020e4 <_vfiprintf_r+0x228>)
 80020ce:	a904      	add	r1, sp, #16
 80020d0:	4630      	mov	r0, r6
 80020d2:	f000 f879 	bl	80021c8 <_printf_i>
 80020d6:	e7e4      	b.n	80020a2 <_vfiprintf_r+0x1e6>
 80020d8:	08002774 	.word	0x08002774
 80020dc:	0800277e 	.word	0x0800277e
 80020e0:	00000000 	.word	0x00000000
 80020e4:	08001e97 	.word	0x08001e97
 80020e8:	0800277a 	.word	0x0800277a

080020ec <_printf_common>:
 80020ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80020f0:	4616      	mov	r6, r2
 80020f2:	4698      	mov	r8, r3
 80020f4:	688a      	ldr	r2, [r1, #8]
 80020f6:	690b      	ldr	r3, [r1, #16]
 80020f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80020fc:	4293      	cmp	r3, r2
 80020fe:	bfb8      	it	lt
 8002100:	4613      	movlt	r3, r2
 8002102:	6033      	str	r3, [r6, #0]
 8002104:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002108:	4607      	mov	r7, r0
 800210a:	460c      	mov	r4, r1
 800210c:	b10a      	cbz	r2, 8002112 <_printf_common+0x26>
 800210e:	3301      	adds	r3, #1
 8002110:	6033      	str	r3, [r6, #0]
 8002112:	6823      	ldr	r3, [r4, #0]
 8002114:	0699      	lsls	r1, r3, #26
 8002116:	bf42      	ittt	mi
 8002118:	6833      	ldrmi	r3, [r6, #0]
 800211a:	3302      	addmi	r3, #2
 800211c:	6033      	strmi	r3, [r6, #0]
 800211e:	6825      	ldr	r5, [r4, #0]
 8002120:	f015 0506 	ands.w	r5, r5, #6
 8002124:	d106      	bne.n	8002134 <_printf_common+0x48>
 8002126:	f104 0a19 	add.w	sl, r4, #25
 800212a:	68e3      	ldr	r3, [r4, #12]
 800212c:	6832      	ldr	r2, [r6, #0]
 800212e:	1a9b      	subs	r3, r3, r2
 8002130:	42ab      	cmp	r3, r5
 8002132:	dc26      	bgt.n	8002182 <_printf_common+0x96>
 8002134:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002138:	6822      	ldr	r2, [r4, #0]
 800213a:	3b00      	subs	r3, #0
 800213c:	bf18      	it	ne
 800213e:	2301      	movne	r3, #1
 8002140:	0692      	lsls	r2, r2, #26
 8002142:	d42b      	bmi.n	800219c <_printf_common+0xb0>
 8002144:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002148:	4641      	mov	r1, r8
 800214a:	4638      	mov	r0, r7
 800214c:	47c8      	blx	r9
 800214e:	3001      	adds	r0, #1
 8002150:	d01e      	beq.n	8002190 <_printf_common+0xa4>
 8002152:	6823      	ldr	r3, [r4, #0]
 8002154:	6922      	ldr	r2, [r4, #16]
 8002156:	f003 0306 	and.w	r3, r3, #6
 800215a:	2b04      	cmp	r3, #4
 800215c:	bf02      	ittt	eq
 800215e:	68e5      	ldreq	r5, [r4, #12]
 8002160:	6833      	ldreq	r3, [r6, #0]
 8002162:	1aed      	subeq	r5, r5, r3
 8002164:	68a3      	ldr	r3, [r4, #8]
 8002166:	bf0c      	ite	eq
 8002168:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800216c:	2500      	movne	r5, #0
 800216e:	4293      	cmp	r3, r2
 8002170:	bfc4      	itt	gt
 8002172:	1a9b      	subgt	r3, r3, r2
 8002174:	18ed      	addgt	r5, r5, r3
 8002176:	2600      	movs	r6, #0
 8002178:	341a      	adds	r4, #26
 800217a:	42b5      	cmp	r5, r6
 800217c:	d11a      	bne.n	80021b4 <_printf_common+0xc8>
 800217e:	2000      	movs	r0, #0
 8002180:	e008      	b.n	8002194 <_printf_common+0xa8>
 8002182:	2301      	movs	r3, #1
 8002184:	4652      	mov	r2, sl
 8002186:	4641      	mov	r1, r8
 8002188:	4638      	mov	r0, r7
 800218a:	47c8      	blx	r9
 800218c:	3001      	adds	r0, #1
 800218e:	d103      	bne.n	8002198 <_printf_common+0xac>
 8002190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002198:	3501      	adds	r5, #1
 800219a:	e7c6      	b.n	800212a <_printf_common+0x3e>
 800219c:	18e1      	adds	r1, r4, r3
 800219e:	1c5a      	adds	r2, r3, #1
 80021a0:	2030      	movs	r0, #48	@ 0x30
 80021a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80021a6:	4422      	add	r2, r4
 80021a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80021ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80021b0:	3302      	adds	r3, #2
 80021b2:	e7c7      	b.n	8002144 <_printf_common+0x58>
 80021b4:	2301      	movs	r3, #1
 80021b6:	4622      	mov	r2, r4
 80021b8:	4641      	mov	r1, r8
 80021ba:	4638      	mov	r0, r7
 80021bc:	47c8      	blx	r9
 80021be:	3001      	adds	r0, #1
 80021c0:	d0e6      	beq.n	8002190 <_printf_common+0xa4>
 80021c2:	3601      	adds	r6, #1
 80021c4:	e7d9      	b.n	800217a <_printf_common+0x8e>
	...

080021c8 <_printf_i>:
 80021c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80021cc:	7e0f      	ldrb	r7, [r1, #24]
 80021ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80021d0:	2f78      	cmp	r7, #120	@ 0x78
 80021d2:	4691      	mov	r9, r2
 80021d4:	4680      	mov	r8, r0
 80021d6:	460c      	mov	r4, r1
 80021d8:	469a      	mov	sl, r3
 80021da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80021de:	d807      	bhi.n	80021f0 <_printf_i+0x28>
 80021e0:	2f62      	cmp	r7, #98	@ 0x62
 80021e2:	d80a      	bhi.n	80021fa <_printf_i+0x32>
 80021e4:	2f00      	cmp	r7, #0
 80021e6:	f000 80d2 	beq.w	800238e <_printf_i+0x1c6>
 80021ea:	2f58      	cmp	r7, #88	@ 0x58
 80021ec:	f000 80b9 	beq.w	8002362 <_printf_i+0x19a>
 80021f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80021f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80021f8:	e03a      	b.n	8002270 <_printf_i+0xa8>
 80021fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80021fe:	2b15      	cmp	r3, #21
 8002200:	d8f6      	bhi.n	80021f0 <_printf_i+0x28>
 8002202:	a101      	add	r1, pc, #4	@ (adr r1, 8002208 <_printf_i+0x40>)
 8002204:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002208:	08002261 	.word	0x08002261
 800220c:	08002275 	.word	0x08002275
 8002210:	080021f1 	.word	0x080021f1
 8002214:	080021f1 	.word	0x080021f1
 8002218:	080021f1 	.word	0x080021f1
 800221c:	080021f1 	.word	0x080021f1
 8002220:	08002275 	.word	0x08002275
 8002224:	080021f1 	.word	0x080021f1
 8002228:	080021f1 	.word	0x080021f1
 800222c:	080021f1 	.word	0x080021f1
 8002230:	080021f1 	.word	0x080021f1
 8002234:	08002375 	.word	0x08002375
 8002238:	0800229f 	.word	0x0800229f
 800223c:	0800232f 	.word	0x0800232f
 8002240:	080021f1 	.word	0x080021f1
 8002244:	080021f1 	.word	0x080021f1
 8002248:	08002397 	.word	0x08002397
 800224c:	080021f1 	.word	0x080021f1
 8002250:	0800229f 	.word	0x0800229f
 8002254:	080021f1 	.word	0x080021f1
 8002258:	080021f1 	.word	0x080021f1
 800225c:	08002337 	.word	0x08002337
 8002260:	6833      	ldr	r3, [r6, #0]
 8002262:	1d1a      	adds	r2, r3, #4
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	6032      	str	r2, [r6, #0]
 8002268:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800226c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002270:	2301      	movs	r3, #1
 8002272:	e09d      	b.n	80023b0 <_printf_i+0x1e8>
 8002274:	6833      	ldr	r3, [r6, #0]
 8002276:	6820      	ldr	r0, [r4, #0]
 8002278:	1d19      	adds	r1, r3, #4
 800227a:	6031      	str	r1, [r6, #0]
 800227c:	0606      	lsls	r6, r0, #24
 800227e:	d501      	bpl.n	8002284 <_printf_i+0xbc>
 8002280:	681d      	ldr	r5, [r3, #0]
 8002282:	e003      	b.n	800228c <_printf_i+0xc4>
 8002284:	0645      	lsls	r5, r0, #25
 8002286:	d5fb      	bpl.n	8002280 <_printf_i+0xb8>
 8002288:	f9b3 5000 	ldrsh.w	r5, [r3]
 800228c:	2d00      	cmp	r5, #0
 800228e:	da03      	bge.n	8002298 <_printf_i+0xd0>
 8002290:	232d      	movs	r3, #45	@ 0x2d
 8002292:	426d      	negs	r5, r5
 8002294:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002298:	4859      	ldr	r0, [pc, #356]	@ (8002400 <_printf_i+0x238>)
 800229a:	230a      	movs	r3, #10
 800229c:	e011      	b.n	80022c2 <_printf_i+0xfa>
 800229e:	6821      	ldr	r1, [r4, #0]
 80022a0:	6833      	ldr	r3, [r6, #0]
 80022a2:	0608      	lsls	r0, r1, #24
 80022a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80022a8:	d402      	bmi.n	80022b0 <_printf_i+0xe8>
 80022aa:	0649      	lsls	r1, r1, #25
 80022ac:	bf48      	it	mi
 80022ae:	b2ad      	uxthmi	r5, r5
 80022b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80022b2:	4853      	ldr	r0, [pc, #332]	@ (8002400 <_printf_i+0x238>)
 80022b4:	6033      	str	r3, [r6, #0]
 80022b6:	bf14      	ite	ne
 80022b8:	230a      	movne	r3, #10
 80022ba:	2308      	moveq	r3, #8
 80022bc:	2100      	movs	r1, #0
 80022be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80022c2:	6866      	ldr	r6, [r4, #4]
 80022c4:	60a6      	str	r6, [r4, #8]
 80022c6:	2e00      	cmp	r6, #0
 80022c8:	bfa2      	ittt	ge
 80022ca:	6821      	ldrge	r1, [r4, #0]
 80022cc:	f021 0104 	bicge.w	r1, r1, #4
 80022d0:	6021      	strge	r1, [r4, #0]
 80022d2:	b90d      	cbnz	r5, 80022d8 <_printf_i+0x110>
 80022d4:	2e00      	cmp	r6, #0
 80022d6:	d04b      	beq.n	8002370 <_printf_i+0x1a8>
 80022d8:	4616      	mov	r6, r2
 80022da:	fbb5 f1f3 	udiv	r1, r5, r3
 80022de:	fb03 5711 	mls	r7, r3, r1, r5
 80022e2:	5dc7      	ldrb	r7, [r0, r7]
 80022e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80022e8:	462f      	mov	r7, r5
 80022ea:	42bb      	cmp	r3, r7
 80022ec:	460d      	mov	r5, r1
 80022ee:	d9f4      	bls.n	80022da <_printf_i+0x112>
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d10b      	bne.n	800230c <_printf_i+0x144>
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	07df      	lsls	r7, r3, #31
 80022f8:	d508      	bpl.n	800230c <_printf_i+0x144>
 80022fa:	6923      	ldr	r3, [r4, #16]
 80022fc:	6861      	ldr	r1, [r4, #4]
 80022fe:	4299      	cmp	r1, r3
 8002300:	bfde      	ittt	le
 8002302:	2330      	movle	r3, #48	@ 0x30
 8002304:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002308:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800230c:	1b92      	subs	r2, r2, r6
 800230e:	6122      	str	r2, [r4, #16]
 8002310:	f8cd a000 	str.w	sl, [sp]
 8002314:	464b      	mov	r3, r9
 8002316:	aa03      	add	r2, sp, #12
 8002318:	4621      	mov	r1, r4
 800231a:	4640      	mov	r0, r8
 800231c:	f7ff fee6 	bl	80020ec <_printf_common>
 8002320:	3001      	adds	r0, #1
 8002322:	d14a      	bne.n	80023ba <_printf_i+0x1f2>
 8002324:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002328:	b004      	add	sp, #16
 800232a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800232e:	6823      	ldr	r3, [r4, #0]
 8002330:	f043 0320 	orr.w	r3, r3, #32
 8002334:	6023      	str	r3, [r4, #0]
 8002336:	4833      	ldr	r0, [pc, #204]	@ (8002404 <_printf_i+0x23c>)
 8002338:	2778      	movs	r7, #120	@ 0x78
 800233a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800233e:	6823      	ldr	r3, [r4, #0]
 8002340:	6831      	ldr	r1, [r6, #0]
 8002342:	061f      	lsls	r7, r3, #24
 8002344:	f851 5b04 	ldr.w	r5, [r1], #4
 8002348:	d402      	bmi.n	8002350 <_printf_i+0x188>
 800234a:	065f      	lsls	r7, r3, #25
 800234c:	bf48      	it	mi
 800234e:	b2ad      	uxthmi	r5, r5
 8002350:	6031      	str	r1, [r6, #0]
 8002352:	07d9      	lsls	r1, r3, #31
 8002354:	bf44      	itt	mi
 8002356:	f043 0320 	orrmi.w	r3, r3, #32
 800235a:	6023      	strmi	r3, [r4, #0]
 800235c:	b11d      	cbz	r5, 8002366 <_printf_i+0x19e>
 800235e:	2310      	movs	r3, #16
 8002360:	e7ac      	b.n	80022bc <_printf_i+0xf4>
 8002362:	4827      	ldr	r0, [pc, #156]	@ (8002400 <_printf_i+0x238>)
 8002364:	e7e9      	b.n	800233a <_printf_i+0x172>
 8002366:	6823      	ldr	r3, [r4, #0]
 8002368:	f023 0320 	bic.w	r3, r3, #32
 800236c:	6023      	str	r3, [r4, #0]
 800236e:	e7f6      	b.n	800235e <_printf_i+0x196>
 8002370:	4616      	mov	r6, r2
 8002372:	e7bd      	b.n	80022f0 <_printf_i+0x128>
 8002374:	6833      	ldr	r3, [r6, #0]
 8002376:	6825      	ldr	r5, [r4, #0]
 8002378:	6961      	ldr	r1, [r4, #20]
 800237a:	1d18      	adds	r0, r3, #4
 800237c:	6030      	str	r0, [r6, #0]
 800237e:	062e      	lsls	r6, r5, #24
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	d501      	bpl.n	8002388 <_printf_i+0x1c0>
 8002384:	6019      	str	r1, [r3, #0]
 8002386:	e002      	b.n	800238e <_printf_i+0x1c6>
 8002388:	0668      	lsls	r0, r5, #25
 800238a:	d5fb      	bpl.n	8002384 <_printf_i+0x1bc>
 800238c:	8019      	strh	r1, [r3, #0]
 800238e:	2300      	movs	r3, #0
 8002390:	6123      	str	r3, [r4, #16]
 8002392:	4616      	mov	r6, r2
 8002394:	e7bc      	b.n	8002310 <_printf_i+0x148>
 8002396:	6833      	ldr	r3, [r6, #0]
 8002398:	1d1a      	adds	r2, r3, #4
 800239a:	6032      	str	r2, [r6, #0]
 800239c:	681e      	ldr	r6, [r3, #0]
 800239e:	6862      	ldr	r2, [r4, #4]
 80023a0:	2100      	movs	r1, #0
 80023a2:	4630      	mov	r0, r6
 80023a4:	f7fd ff14 	bl	80001d0 <memchr>
 80023a8:	b108      	cbz	r0, 80023ae <_printf_i+0x1e6>
 80023aa:	1b80      	subs	r0, r0, r6
 80023ac:	6060      	str	r0, [r4, #4]
 80023ae:	6863      	ldr	r3, [r4, #4]
 80023b0:	6123      	str	r3, [r4, #16]
 80023b2:	2300      	movs	r3, #0
 80023b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80023b8:	e7aa      	b.n	8002310 <_printf_i+0x148>
 80023ba:	6923      	ldr	r3, [r4, #16]
 80023bc:	4632      	mov	r2, r6
 80023be:	4649      	mov	r1, r9
 80023c0:	4640      	mov	r0, r8
 80023c2:	47d0      	blx	sl
 80023c4:	3001      	adds	r0, #1
 80023c6:	d0ad      	beq.n	8002324 <_printf_i+0x15c>
 80023c8:	6823      	ldr	r3, [r4, #0]
 80023ca:	079b      	lsls	r3, r3, #30
 80023cc:	d413      	bmi.n	80023f6 <_printf_i+0x22e>
 80023ce:	68e0      	ldr	r0, [r4, #12]
 80023d0:	9b03      	ldr	r3, [sp, #12]
 80023d2:	4298      	cmp	r0, r3
 80023d4:	bfb8      	it	lt
 80023d6:	4618      	movlt	r0, r3
 80023d8:	e7a6      	b.n	8002328 <_printf_i+0x160>
 80023da:	2301      	movs	r3, #1
 80023dc:	4632      	mov	r2, r6
 80023de:	4649      	mov	r1, r9
 80023e0:	4640      	mov	r0, r8
 80023e2:	47d0      	blx	sl
 80023e4:	3001      	adds	r0, #1
 80023e6:	d09d      	beq.n	8002324 <_printf_i+0x15c>
 80023e8:	3501      	adds	r5, #1
 80023ea:	68e3      	ldr	r3, [r4, #12]
 80023ec:	9903      	ldr	r1, [sp, #12]
 80023ee:	1a5b      	subs	r3, r3, r1
 80023f0:	42ab      	cmp	r3, r5
 80023f2:	dcf2      	bgt.n	80023da <_printf_i+0x212>
 80023f4:	e7eb      	b.n	80023ce <_printf_i+0x206>
 80023f6:	2500      	movs	r5, #0
 80023f8:	f104 0619 	add.w	r6, r4, #25
 80023fc:	e7f5      	b.n	80023ea <_printf_i+0x222>
 80023fe:	bf00      	nop
 8002400:	08002785 	.word	0x08002785
 8002404:	08002796 	.word	0x08002796

08002408 <__sflush_r>:
 8002408:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800240c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002410:	0716      	lsls	r6, r2, #28
 8002412:	4605      	mov	r5, r0
 8002414:	460c      	mov	r4, r1
 8002416:	d454      	bmi.n	80024c2 <__sflush_r+0xba>
 8002418:	684b      	ldr	r3, [r1, #4]
 800241a:	2b00      	cmp	r3, #0
 800241c:	dc02      	bgt.n	8002424 <__sflush_r+0x1c>
 800241e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002420:	2b00      	cmp	r3, #0
 8002422:	dd48      	ble.n	80024b6 <__sflush_r+0xae>
 8002424:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002426:	2e00      	cmp	r6, #0
 8002428:	d045      	beq.n	80024b6 <__sflush_r+0xae>
 800242a:	2300      	movs	r3, #0
 800242c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002430:	682f      	ldr	r7, [r5, #0]
 8002432:	6a21      	ldr	r1, [r4, #32]
 8002434:	602b      	str	r3, [r5, #0]
 8002436:	d030      	beq.n	800249a <__sflush_r+0x92>
 8002438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800243a:	89a3      	ldrh	r3, [r4, #12]
 800243c:	0759      	lsls	r1, r3, #29
 800243e:	d505      	bpl.n	800244c <__sflush_r+0x44>
 8002440:	6863      	ldr	r3, [r4, #4]
 8002442:	1ad2      	subs	r2, r2, r3
 8002444:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002446:	b10b      	cbz	r3, 800244c <__sflush_r+0x44>
 8002448:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800244a:	1ad2      	subs	r2, r2, r3
 800244c:	2300      	movs	r3, #0
 800244e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002450:	6a21      	ldr	r1, [r4, #32]
 8002452:	4628      	mov	r0, r5
 8002454:	47b0      	blx	r6
 8002456:	1c43      	adds	r3, r0, #1
 8002458:	89a3      	ldrh	r3, [r4, #12]
 800245a:	d106      	bne.n	800246a <__sflush_r+0x62>
 800245c:	6829      	ldr	r1, [r5, #0]
 800245e:	291d      	cmp	r1, #29
 8002460:	d82b      	bhi.n	80024ba <__sflush_r+0xb2>
 8002462:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <__sflush_r+0x104>)
 8002464:	410a      	asrs	r2, r1
 8002466:	07d6      	lsls	r6, r2, #31
 8002468:	d427      	bmi.n	80024ba <__sflush_r+0xb2>
 800246a:	2200      	movs	r2, #0
 800246c:	6062      	str	r2, [r4, #4]
 800246e:	04d9      	lsls	r1, r3, #19
 8002470:	6922      	ldr	r2, [r4, #16]
 8002472:	6022      	str	r2, [r4, #0]
 8002474:	d504      	bpl.n	8002480 <__sflush_r+0x78>
 8002476:	1c42      	adds	r2, r0, #1
 8002478:	d101      	bne.n	800247e <__sflush_r+0x76>
 800247a:	682b      	ldr	r3, [r5, #0]
 800247c:	b903      	cbnz	r3, 8002480 <__sflush_r+0x78>
 800247e:	6560      	str	r0, [r4, #84]	@ 0x54
 8002480:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002482:	602f      	str	r7, [r5, #0]
 8002484:	b1b9      	cbz	r1, 80024b6 <__sflush_r+0xae>
 8002486:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800248a:	4299      	cmp	r1, r3
 800248c:	d002      	beq.n	8002494 <__sflush_r+0x8c>
 800248e:	4628      	mov	r0, r5
 8002490:	f7ff fbf2 	bl	8001c78 <_free_r>
 8002494:	2300      	movs	r3, #0
 8002496:	6363      	str	r3, [r4, #52]	@ 0x34
 8002498:	e00d      	b.n	80024b6 <__sflush_r+0xae>
 800249a:	2301      	movs	r3, #1
 800249c:	4628      	mov	r0, r5
 800249e:	47b0      	blx	r6
 80024a0:	4602      	mov	r2, r0
 80024a2:	1c50      	adds	r0, r2, #1
 80024a4:	d1c9      	bne.n	800243a <__sflush_r+0x32>
 80024a6:	682b      	ldr	r3, [r5, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d0c6      	beq.n	800243a <__sflush_r+0x32>
 80024ac:	2b1d      	cmp	r3, #29
 80024ae:	d001      	beq.n	80024b4 <__sflush_r+0xac>
 80024b0:	2b16      	cmp	r3, #22
 80024b2:	d11e      	bne.n	80024f2 <__sflush_r+0xea>
 80024b4:	602f      	str	r7, [r5, #0]
 80024b6:	2000      	movs	r0, #0
 80024b8:	e022      	b.n	8002500 <__sflush_r+0xf8>
 80024ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024be:	b21b      	sxth	r3, r3
 80024c0:	e01b      	b.n	80024fa <__sflush_r+0xf2>
 80024c2:	690f      	ldr	r7, [r1, #16]
 80024c4:	2f00      	cmp	r7, #0
 80024c6:	d0f6      	beq.n	80024b6 <__sflush_r+0xae>
 80024c8:	0793      	lsls	r3, r2, #30
 80024ca:	680e      	ldr	r6, [r1, #0]
 80024cc:	bf08      	it	eq
 80024ce:	694b      	ldreq	r3, [r1, #20]
 80024d0:	600f      	str	r7, [r1, #0]
 80024d2:	bf18      	it	ne
 80024d4:	2300      	movne	r3, #0
 80024d6:	eba6 0807 	sub.w	r8, r6, r7
 80024da:	608b      	str	r3, [r1, #8]
 80024dc:	f1b8 0f00 	cmp.w	r8, #0
 80024e0:	dde9      	ble.n	80024b6 <__sflush_r+0xae>
 80024e2:	6a21      	ldr	r1, [r4, #32]
 80024e4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80024e6:	4643      	mov	r3, r8
 80024e8:	463a      	mov	r2, r7
 80024ea:	4628      	mov	r0, r5
 80024ec:	47b0      	blx	r6
 80024ee:	2800      	cmp	r0, #0
 80024f0:	dc08      	bgt.n	8002504 <__sflush_r+0xfc>
 80024f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80024f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024fa:	81a3      	strh	r3, [r4, #12]
 80024fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002504:	4407      	add	r7, r0
 8002506:	eba8 0800 	sub.w	r8, r8, r0
 800250a:	e7e7      	b.n	80024dc <__sflush_r+0xd4>
 800250c:	dfbffffe 	.word	0xdfbffffe

08002510 <_fflush_r>:
 8002510:	b538      	push	{r3, r4, r5, lr}
 8002512:	690b      	ldr	r3, [r1, #16]
 8002514:	4605      	mov	r5, r0
 8002516:	460c      	mov	r4, r1
 8002518:	b913      	cbnz	r3, 8002520 <_fflush_r+0x10>
 800251a:	2500      	movs	r5, #0
 800251c:	4628      	mov	r0, r5
 800251e:	bd38      	pop	{r3, r4, r5, pc}
 8002520:	b118      	cbz	r0, 800252a <_fflush_r+0x1a>
 8002522:	6a03      	ldr	r3, [r0, #32]
 8002524:	b90b      	cbnz	r3, 800252a <_fflush_r+0x1a>
 8002526:	f7ff f9ad 	bl	8001884 <__sinit>
 800252a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d0f3      	beq.n	800251a <_fflush_r+0xa>
 8002532:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002534:	07d0      	lsls	r0, r2, #31
 8002536:	d404      	bmi.n	8002542 <_fflush_r+0x32>
 8002538:	0599      	lsls	r1, r3, #22
 800253a:	d402      	bmi.n	8002542 <_fflush_r+0x32>
 800253c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800253e:	f7ff fb98 	bl	8001c72 <__retarget_lock_acquire_recursive>
 8002542:	4628      	mov	r0, r5
 8002544:	4621      	mov	r1, r4
 8002546:	f7ff ff5f 	bl	8002408 <__sflush_r>
 800254a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800254c:	07da      	lsls	r2, r3, #31
 800254e:	4605      	mov	r5, r0
 8002550:	d4e4      	bmi.n	800251c <_fflush_r+0xc>
 8002552:	89a3      	ldrh	r3, [r4, #12]
 8002554:	059b      	lsls	r3, r3, #22
 8002556:	d4e1      	bmi.n	800251c <_fflush_r+0xc>
 8002558:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800255a:	f7ff fb8b 	bl	8001c74 <__retarget_lock_release_recursive>
 800255e:	e7dd      	b.n	800251c <_fflush_r+0xc>

08002560 <__swhatbuf_r>:
 8002560:	b570      	push	{r4, r5, r6, lr}
 8002562:	460c      	mov	r4, r1
 8002564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002568:	2900      	cmp	r1, #0
 800256a:	b096      	sub	sp, #88	@ 0x58
 800256c:	4615      	mov	r5, r2
 800256e:	461e      	mov	r6, r3
 8002570:	da0d      	bge.n	800258e <__swhatbuf_r+0x2e>
 8002572:	89a3      	ldrh	r3, [r4, #12]
 8002574:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002578:	f04f 0100 	mov.w	r1, #0
 800257c:	bf14      	ite	ne
 800257e:	2340      	movne	r3, #64	@ 0x40
 8002580:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002584:	2000      	movs	r0, #0
 8002586:	6031      	str	r1, [r6, #0]
 8002588:	602b      	str	r3, [r5, #0]
 800258a:	b016      	add	sp, #88	@ 0x58
 800258c:	bd70      	pop	{r4, r5, r6, pc}
 800258e:	466a      	mov	r2, sp
 8002590:	f000 f848 	bl	8002624 <_fstat_r>
 8002594:	2800      	cmp	r0, #0
 8002596:	dbec      	blt.n	8002572 <__swhatbuf_r+0x12>
 8002598:	9901      	ldr	r1, [sp, #4]
 800259a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800259e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80025a2:	4259      	negs	r1, r3
 80025a4:	4159      	adcs	r1, r3
 80025a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80025aa:	e7eb      	b.n	8002584 <__swhatbuf_r+0x24>

080025ac <__smakebuf_r>:
 80025ac:	898b      	ldrh	r3, [r1, #12]
 80025ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80025b0:	079d      	lsls	r5, r3, #30
 80025b2:	4606      	mov	r6, r0
 80025b4:	460c      	mov	r4, r1
 80025b6:	d507      	bpl.n	80025c8 <__smakebuf_r+0x1c>
 80025b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80025bc:	6023      	str	r3, [r4, #0]
 80025be:	6123      	str	r3, [r4, #16]
 80025c0:	2301      	movs	r3, #1
 80025c2:	6163      	str	r3, [r4, #20]
 80025c4:	b003      	add	sp, #12
 80025c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025c8:	ab01      	add	r3, sp, #4
 80025ca:	466a      	mov	r2, sp
 80025cc:	f7ff ffc8 	bl	8002560 <__swhatbuf_r>
 80025d0:	9f00      	ldr	r7, [sp, #0]
 80025d2:	4605      	mov	r5, r0
 80025d4:	4639      	mov	r1, r7
 80025d6:	4630      	mov	r0, r6
 80025d8:	f7ff fbba 	bl	8001d50 <_malloc_r>
 80025dc:	b948      	cbnz	r0, 80025f2 <__smakebuf_r+0x46>
 80025de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025e2:	059a      	lsls	r2, r3, #22
 80025e4:	d4ee      	bmi.n	80025c4 <__smakebuf_r+0x18>
 80025e6:	f023 0303 	bic.w	r3, r3, #3
 80025ea:	f043 0302 	orr.w	r3, r3, #2
 80025ee:	81a3      	strh	r3, [r4, #12]
 80025f0:	e7e2      	b.n	80025b8 <__smakebuf_r+0xc>
 80025f2:	89a3      	ldrh	r3, [r4, #12]
 80025f4:	6020      	str	r0, [r4, #0]
 80025f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80025fa:	81a3      	strh	r3, [r4, #12]
 80025fc:	9b01      	ldr	r3, [sp, #4]
 80025fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002602:	b15b      	cbz	r3, 800261c <__smakebuf_r+0x70>
 8002604:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002608:	4630      	mov	r0, r6
 800260a:	f000 f81d 	bl	8002648 <_isatty_r>
 800260e:	b128      	cbz	r0, 800261c <__smakebuf_r+0x70>
 8002610:	89a3      	ldrh	r3, [r4, #12]
 8002612:	f023 0303 	bic.w	r3, r3, #3
 8002616:	f043 0301 	orr.w	r3, r3, #1
 800261a:	81a3      	strh	r3, [r4, #12]
 800261c:	89a3      	ldrh	r3, [r4, #12]
 800261e:	431d      	orrs	r5, r3
 8002620:	81a5      	strh	r5, [r4, #12]
 8002622:	e7cf      	b.n	80025c4 <__smakebuf_r+0x18>

08002624 <_fstat_r>:
 8002624:	b538      	push	{r3, r4, r5, lr}
 8002626:	4d07      	ldr	r5, [pc, #28]	@ (8002644 <_fstat_r+0x20>)
 8002628:	2300      	movs	r3, #0
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	602b      	str	r3, [r5, #0]
 8002632:	f7fe ffdc 	bl	80015ee <_fstat>
 8002636:	1c43      	adds	r3, r0, #1
 8002638:	d102      	bne.n	8002640 <_fstat_r+0x1c>
 800263a:	682b      	ldr	r3, [r5, #0]
 800263c:	b103      	cbz	r3, 8002640 <_fstat_r+0x1c>
 800263e:	6023      	str	r3, [r4, #0]
 8002640:	bd38      	pop	{r3, r4, r5, pc}
 8002642:	bf00      	nop
 8002644:	200001c8 	.word	0x200001c8

08002648 <_isatty_r>:
 8002648:	b538      	push	{r3, r4, r5, lr}
 800264a:	4d06      	ldr	r5, [pc, #24]	@ (8002664 <_isatty_r+0x1c>)
 800264c:	2300      	movs	r3, #0
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	602b      	str	r3, [r5, #0]
 8002654:	f7fe ffdb 	bl	800160e <_isatty>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	d102      	bne.n	8002662 <_isatty_r+0x1a>
 800265c:	682b      	ldr	r3, [r5, #0]
 800265e:	b103      	cbz	r3, 8002662 <_isatty_r+0x1a>
 8002660:	6023      	str	r3, [r4, #0]
 8002662:	bd38      	pop	{r3, r4, r5, pc}
 8002664:	200001c8 	.word	0x200001c8

08002668 <_sbrk_r>:
 8002668:	b538      	push	{r3, r4, r5, lr}
 800266a:	4d06      	ldr	r5, [pc, #24]	@ (8002684 <_sbrk_r+0x1c>)
 800266c:	2300      	movs	r3, #0
 800266e:	4604      	mov	r4, r0
 8002670:	4608      	mov	r0, r1
 8002672:	602b      	str	r3, [r5, #0]
 8002674:	f7fe ffe4 	bl	8001640 <_sbrk>
 8002678:	1c43      	adds	r3, r0, #1
 800267a:	d102      	bne.n	8002682 <_sbrk_r+0x1a>
 800267c:	682b      	ldr	r3, [r5, #0]
 800267e:	b103      	cbz	r3, 8002682 <_sbrk_r+0x1a>
 8002680:	6023      	str	r3, [r4, #0]
 8002682:	bd38      	pop	{r3, r4, r5, pc}
 8002684:	200001c8 	.word	0x200001c8

08002688 <_init>:
 8002688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268a:	bf00      	nop
 800268c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800268e:	bc08      	pop	{r3}
 8002690:	469e      	mov	lr, r3
 8002692:	4770      	bx	lr

08002694 <_fini>:
 8002694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002696:	bf00      	nop
 8002698:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800269a:	bc08      	pop	{r3}
 800269c:	469e      	mov	lr, r3
 800269e:	4770      	bx	lr
