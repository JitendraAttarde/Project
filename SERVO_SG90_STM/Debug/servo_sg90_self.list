
servo_sg90_self.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002bc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  4 .ARM          00000000  08000444  08000444  0000144c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000444  0800044c  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000444  08000444  00001444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000448  08000448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000144c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000144c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000990  00000000  00000000  0000147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000279  00000000  00000000  00001e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000098  00000000  00000000  00002088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000064  00000000  00000000  00002120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e05  00000000  00000000  00002184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000b71  00000000  00000000  00002f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008b7a6  00000000  00000000  00003afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0008f2a0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000144  00000000  00000000  0008f2e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000001f  00000000  00000000  0008f428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000004e  00000000  00000000  0008f447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800042c 	.word	0x0800042c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	0800042c 	.word	0x0800042c

080001c8 <GPIO_Init>:
void GPIO_Init(void);
void TIM2_Init(void);
void TIM4_ms_Delay(uint32_t delay);

void GPIO_Init()
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |= 1; //Enable GPIOA clock
 80001cc:	4b0b      	ldr	r3, [pc, #44]	@ (80001fc <GPIO_Init+0x34>)
 80001ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001d0:	4a0a      	ldr	r2, [pc, #40]	@ (80001fc <GPIO_Init+0x34>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6313      	str	r3, [r2, #48]	@ 0x30
	GPIOA->AFR[0] |= 0x00100000; // Select the PA5 pin in alternate function mode
 80001d8:	4b09      	ldr	r3, [pc, #36]	@ (8000200 <GPIO_Init+0x38>)
 80001da:	6a1b      	ldr	r3, [r3, #32]
 80001dc:	4a08      	ldr	r2, [pc, #32]	@ (8000200 <GPIO_Init+0x38>)
 80001de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001e2:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |= 0x00000800; //Set the PA5 pin alternate function
 80001e4:	4b06      	ldr	r3, [pc, #24]	@ (8000200 <GPIO_Init+0x38>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a05      	ldr	r2, [pc, #20]	@ (8000200 <GPIO_Init+0x38>)
 80001ea:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80001ee:	6013      	str	r3, [r2, #0]
}
 80001f0:	bf00      	nop
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	40023800 	.word	0x40023800
 8000200:	40020000 	.word	0x40020000

08000204 <TIM2_Init>:

void TIM2_Init()
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	RCC->APB1ENR |=1;
 8000208:	4b14      	ldr	r3, [pc, #80]	@ (800025c <TIM2_Init+0x58>)
 800020a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800020c:	4a13      	ldr	r2, [pc, #76]	@ (800025c <TIM2_Init+0x58>)
 800020e:	f043 0301 	orr.w	r3, r3, #1
 8000212:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM2->PSC = 16-1; //Setting the clock frequency to 1MHz.
 8000214:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000218:	220f      	movs	r2, #15
 800021a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM2->ARR = 5000; // Total period of the timer
 800021c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000224:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM2->CNT = 0;
 8000226:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800022a:	2200      	movs	r2, #0
 800022c:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM2->CCMR1 = 0x0060; //PWM mode for the timer
 800022e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000232:	2260      	movs	r2, #96	@ 0x60
 8000234:	619a      	str	r2, [r3, #24]
	TIM2->CCER |= 1; //Enable channel 1 as output
 8000236:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800023a:	6a1b      	ldr	r3, [r3, #32]
 800023c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000240:	f043 0301 	orr.w	r3, r3, #1
 8000244:	6213      	str	r3, [r2, #32]
	TIM2->CCR1 = 500; // Pulse width for PWM
 8000246:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800024a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800024e:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000250:	bf00      	nop
 8000252:	46bd      	mov	sp, r7
 8000254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000258:	4770      	bx	lr
 800025a:	bf00      	nop
 800025c:	40023800 	.word	0x40023800

08000260 <TIM4_ms_Delay>:

void TIM4_ms_Delay(uint32_t delay)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	RCC->APB1ENR |= 1<<2; //Start the clock for the timer peripheral
 8000268:	4b14      	ldr	r3, [pc, #80]	@ (80002bc <TIM4_ms_Delay+0x5c>)
 800026a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800026c:	4a13      	ldr	r2, [pc, #76]	@ (80002bc <TIM4_ms_Delay+0x5c>)
 800026e:	f043 0304 	orr.w	r3, r3, #4
 8000272:	6413      	str	r3, [r2, #64]	@ 0x40
	TIM4->PSC = 16000-1; //Setting the clock frequency to 1kHz.
 8000274:	4b12      	ldr	r3, [pc, #72]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 8000276:	f643 627f 	movw	r2, #15999	@ 0x3e7f
 800027a:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM4->ARR = (delay); // Total period of the timer
 800027c:	4a10      	ldr	r2, [pc, #64]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	62d3      	str	r3, [r2, #44]	@ 0x2c
	TIM4->CNT = 0;
 8000282:	4b0f      	ldr	r3, [pc, #60]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 8000284:	2200      	movs	r2, #0
 8000286:	625a      	str	r2, [r3, #36]	@ 0x24
	TIM4->CR1 |= 1; //Start the Timer
 8000288:	4b0d      	ldr	r3, [pc, #52]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	4a0c      	ldr	r2, [pc, #48]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6013      	str	r3, [r2, #0]
	while(!(TIM4->SR & TIM_SR_UIF)){} //Polling the update interrupt flag
 8000294:	bf00      	nop
 8000296:	4b0a      	ldr	r3, [pc, #40]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 8000298:	691b      	ldr	r3, [r3, #16]
 800029a:	f003 0301 	and.w	r3, r3, #1
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d0f9      	beq.n	8000296 <TIM4_ms_Delay+0x36>
	TIM4->SR &= ~(0x0001); //Reset the update interrupt flag
 80002a2:	4b07      	ldr	r3, [pc, #28]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 80002a4:	691b      	ldr	r3, [r3, #16]
 80002a6:	4a06      	ldr	r2, [pc, #24]	@ (80002c0 <TIM4_ms_Delay+0x60>)
 80002a8:	f023 0301 	bic.w	r3, r3, #1
 80002ac:	6113      	str	r3, [r2, #16]
}
 80002ae:	bf00      	nop
 80002b0:	370c      	adds	r7, #12
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40023800 	.word	0x40023800
 80002c0:	40000800 	.word	0x40000800

080002c4 <main>:

int main()
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	RCC->CFGR |= 0<<10; // set APB1 = 16 MHz
 80002c8:	4b15      	ldr	r3, [pc, #84]	@ (8000320 <main+0x5c>)
 80002ca:	4a15      	ldr	r2, [pc, #84]	@ (8000320 <main+0x5c>)
 80002cc:	689b      	ldr	r3, [r3, #8]
 80002ce:	6093      	str	r3, [r2, #8]
	GPIO_Init();
 80002d0:	f7ff ff7a 	bl	80001c8 <GPIO_Init>
	TIM2_Init();
 80002d4:	f7ff ff96 	bl	8000204 <TIM2_Init>
	TIM2->CR1 |= 1;
 80002d8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80002e2:	f043 0301 	orr.w	r3, r3, #1
 80002e6:	6013      	str	r3, [r2, #0]
	while(1){

		if(TIM2->CCR1 < 4500)
 80002e8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002ee:	f241 1293 	movw	r2, #4499	@ 0x1193
 80002f2:	4293      	cmp	r3, r2
 80002f4:	d80a      	bhi.n	800030c <main+0x48>
		{
			TIM2->CCR1 = TIM2->CCR1 + 50;
 80002f6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80002fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80002fc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000300:	3332      	adds	r3, #50	@ 0x32
 8000302:	6353      	str	r3, [r2, #52]	@ 0x34
			TIM4_ms_Delay(5);
 8000304:	2005      	movs	r0, #5
 8000306:	f7ff ffab 	bl	8000260 <TIM4_ms_Delay>
 800030a:	e7ed      	b.n	80002e8 <main+0x24>
		}
		else
		{
			TIM2->CCR1 = 500;
 800030c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000310:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000314:	635a      	str	r2, [r3, #52]	@ 0x34
			TIM4_ms_Delay(5);
 8000316:	2005      	movs	r0, #5
 8000318:	f7ff ffa2 	bl	8000260 <TIM4_ms_Delay>
		if(TIM2->CCR1 < 4500)
 800031c:	e7e4      	b.n	80002e8 <main+0x24>
 800031e:	bf00      	nop
 8000320:	40023800 	.word	0x40023800

08000324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  DWT_Init();
 8000328:	f000 f802 	bl	8000330 <DWT_Init>
}
 800032c:	bf00      	nop
 800032e:	bd80      	pop	{r7, pc}

08000330 <DWT_Init>:
}
#pragma GCC pop_options


uint32_t DWT_Init(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
    /* Disable TRC */
    CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000334:	4b14      	ldr	r3, [pc, #80]	@ (8000388 <DWT_Init+0x58>)
 8000336:	68db      	ldr	r3, [r3, #12]
 8000338:	4a13      	ldr	r2, [pc, #76]	@ (8000388 <DWT_Init+0x58>)
 800033a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800033e:	60d3      	str	r3, [r2, #12]
    /* Enable TRC */
    CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000340:	4b11      	ldr	r3, [pc, #68]	@ (8000388 <DWT_Init+0x58>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a10      	ldr	r2, [pc, #64]	@ (8000388 <DWT_Init+0x58>)
 8000346:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800034a:	60d3      	str	r3, [r2, #12]
    /* Disable clock cycle counter */
    DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800034c:	4b0f      	ldr	r3, [pc, #60]	@ (800038c <DWT_Init+0x5c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a0e      	ldr	r2, [pc, #56]	@ (800038c <DWT_Init+0x5c>)
 8000352:	f023 0301 	bic.w	r3, r3, #1
 8000356:	6013      	str	r3, [r2, #0]
    /* Enable  clock cycle counter */
    DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000358:	4b0c      	ldr	r3, [pc, #48]	@ (800038c <DWT_Init+0x5c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a0b      	ldr	r2, [pc, #44]	@ (800038c <DWT_Init+0x5c>)
 800035e:	f043 0301 	orr.w	r3, r3, #1
 8000362:	6013      	str	r3, [r2, #0]
    /* Reset the clock cycle counter value */
    DWT->CYCCNT = 0;
 8000364:	4b09      	ldr	r3, [pc, #36]	@ (800038c <DWT_Init+0x5c>)
 8000366:	2200      	movs	r2, #0
 8000368:	605a      	str	r2, [r3, #4]
    /* 3 NO OPERATION instructions */
    __ASM volatile ("NOP");
 800036a:	bf00      	nop
    __ASM volatile ("NOP");
 800036c:	bf00      	nop
    __ASM volatile ("NOP");
 800036e:	bf00      	nop
    /* Check if clock cycle counter has started: 0 on success */
    return !(DWT->CYCCNT);
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <DWT_Init+0x5c>)
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	2b00      	cmp	r3, #0
 8000376:	bf0c      	ite	eq
 8000378:	2301      	moveq	r3, #1
 800037a:	2300      	movne	r3, #0
 800037c:	b2db      	uxtb	r3, r3
}
 800037e:	4618      	mov	r0, r3
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000edf0 	.word	0xe000edf0
 800038c:	e0001000 	.word	0xe0001000

08000390 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000390:	480d      	ldr	r0, [pc, #52]	@ (80003c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000392:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000394:	f7ff ffc6 	bl	8000324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000398:	480c      	ldr	r0, [pc, #48]	@ (80003cc <LoopForever+0x6>)
  ldr r1, =_edata
 800039a:	490d      	ldr	r1, [pc, #52]	@ (80003d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800039c:	4a0d      	ldr	r2, [pc, #52]	@ (80003d4 <LoopForever+0xe>)
  movs r3, #0
 800039e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a0:	e002      	b.n	80003a8 <LoopCopyDataInit>

080003a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003a6:	3304      	adds	r3, #4

080003a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003ac:	d3f9      	bcc.n	80003a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003ae:	4a0a      	ldr	r2, [pc, #40]	@ (80003d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b0:	4c0a      	ldr	r4, [pc, #40]	@ (80003dc <LoopForever+0x16>)
  movs r3, #0
 80003b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b4:	e001      	b.n	80003ba <LoopFillZerobss>

080003b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003b8:	3204      	adds	r2, #4

080003ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003bc:	d3fb      	bcc.n	80003b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003be:	f000 f811 	bl	80003e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c2:	f7ff ff7f 	bl	80002c4 <main>

080003c6 <LoopForever>:

LoopForever:
  b LoopForever
 80003c6:	e7fe      	b.n	80003c6 <LoopForever>
  ldr   r0, =_estack
 80003c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003d4:	0800044c 	.word	0x0800044c
  ldr r2, =_sbss
 80003d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003dc:	2000001c 	.word	0x2000001c

080003e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e0:	e7fe      	b.n	80003e0 <ADC_IRQHandler>
	...

080003e4 <__libc_init_array>:
 80003e4:	b570      	push	{r4, r5, r6, lr}
 80003e6:	4d0d      	ldr	r5, [pc, #52]	@ (800041c <__libc_init_array+0x38>)
 80003e8:	4c0d      	ldr	r4, [pc, #52]	@ (8000420 <__libc_init_array+0x3c>)
 80003ea:	1b64      	subs	r4, r4, r5
 80003ec:	10a4      	asrs	r4, r4, #2
 80003ee:	2600      	movs	r6, #0
 80003f0:	42a6      	cmp	r6, r4
 80003f2:	d109      	bne.n	8000408 <__libc_init_array+0x24>
 80003f4:	4d0b      	ldr	r5, [pc, #44]	@ (8000424 <__libc_init_array+0x40>)
 80003f6:	4c0c      	ldr	r4, [pc, #48]	@ (8000428 <__libc_init_array+0x44>)
 80003f8:	f000 f818 	bl	800042c <_init>
 80003fc:	1b64      	subs	r4, r4, r5
 80003fe:	10a4      	asrs	r4, r4, #2
 8000400:	2600      	movs	r6, #0
 8000402:	42a6      	cmp	r6, r4
 8000404:	d105      	bne.n	8000412 <__libc_init_array+0x2e>
 8000406:	bd70      	pop	{r4, r5, r6, pc}
 8000408:	f855 3b04 	ldr.w	r3, [r5], #4
 800040c:	4798      	blx	r3
 800040e:	3601      	adds	r6, #1
 8000410:	e7ee      	b.n	80003f0 <__libc_init_array+0xc>
 8000412:	f855 3b04 	ldr.w	r3, [r5], #4
 8000416:	4798      	blx	r3
 8000418:	3601      	adds	r6, #1
 800041a:	e7f2      	b.n	8000402 <__libc_init_array+0x1e>
 800041c:	08000444 	.word	0x08000444
 8000420:	08000444 	.word	0x08000444
 8000424:	08000444 	.word	0x08000444
 8000428:	08000448 	.word	0x08000448

0800042c <_init>:
 800042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800042e:	bf00      	nop
 8000430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000432:	bc08      	pop	{r3}
 8000434:	469e      	mov	lr, r3
 8000436:	4770      	bx	lr

08000438 <_fini>:
 8000438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800043a:	bf00      	nop
 800043c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800043e:	bc08      	pop	{r3}
 8000440:	469e      	mov	lr, r3
 8000442:	4770      	bx	lr
